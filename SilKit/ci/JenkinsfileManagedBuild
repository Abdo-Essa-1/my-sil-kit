pipeline {
    agent { label 'python3&&git&&windows' }
    triggers {
        pollSCM('0 0 * * *')
    }
    stages {
        stage('Abort if not master branch') {
            when {
                not {
                    branch "master"
                }
            }
            steps {
                script {
                    currentBuild.result = 'ABORTED'
                    error("Aborting the build because not on master branch.")
                }
            }
        }
        stage('Checkout from version control') {
            steps {
                echo "Checkout from version control"
                checkout scm
            }
        }
        stage('Increment Patch Version') {
            steps {
                echo "Incrementing Patch Version"
                dir("IntegrationBus/ci"){
                    script {
                        configFileProvider([configFile(fileId: 'vib_main_credentials', variable: 'CREDENTIALS_FILE')]) {
                            def credentials_id = readFile(file: CREDENTIALS_FILE).trim()
                            withCredentials([usernamePassword(credentialsId: credentials_id, usernameVariable: 'VIB_PUSH_USERNAME', passwordVariable: 'VIB_PUSH_PASSWORD')]){
                                try {
                                    bat "python ./incrementPatchLevel.py \"$VIB_PUSH_USERNAME\" \"$VIB_PUSH_PASSWORD\""
                                }catch(all) {
                                    currentBuild.result='ABORTED'
                                    error("Aborting the build because version increment failed.")
                                }
                            }
                        }
                    }
                }
            }
        }
        stage('Execute Managed Build') {
            steps {
                echo "Triggering Managed Build"
                script {
                    def buildJob = build(job: '../vib-main/master')
                    def buildNumber = buildJob.getNumber().toString()
                    writeFile(file: "build_number.txt", text: buildNumber)
                }

            }
        }
    }
    post {
        always {
            echo 'One way or another, I have finished'
        }
        success {
            echo 'I succeeded!'
            configFileProvider([
                configFile(fileId: 'vib_main_success_webhook', variable: 'WEBHOOK_SUCCESS_FILE'),
                configFile(fileId: 'vib_main_artifactory_base_link', variable: 'ARTIFACTORY_BASE_LINK')]) {

                script {
                    def webhook_teams = readFile(file: WEBHOOK_SUCCESS_FILE).trim()
                    def artifactory_base_link = readFile(file: ARTIFACTORY_BASE_LINK).trim()
                    def buildNumber = readFile(file: "build_number.txt").trim()
                    def versionNumber = readFile(file: "new_version_number.txt").trim()
                    def changelog = readFile(file: "changelog.txt")
                    office365ConnectorSend (
                        webhookUrl: webhook_teams,
                        factDefinitions: [
                            [name: "Build-Artefakte", template: artifactory_base_link+buildNumber]
                        ],
                        status: "New Nightly Build "+versionNumber+" published",
                        message: "A new nightly build has been published. <br><br> Changelog: <br>"+changelog,
                        color: "#00ff00"
                    )
                }
            }
            
        }
        unstable {
            echo 'Build was unstable.'
        }
        failure {
            echo 'Build failed.'
        }
    }
}