ARG UBUNTU_VERSION=18.04
ARG REGISTRY
FROM ${REGISTRY}/vector/ubuntu/full:${UBUNTU_VERSION}
ARG UBUNTU_VERSION
ARG SILKIT_ARTIFACTORY_REPO
ARG PROXY_DOMAIN

# without TZ the apt installer will hang
ENV TZ "Europe/Berlin"
ENV DEBIAN_FRONTEND "noninteractive"
ENV UBUNTU_VERSION ${UBUNTU_VERSION}
ENV SILKIT_ARTIFACTORY_REPO ${SILKIT_ARTIFACTORY_REPO}
ENV PROXY_DOMAIN ${PROXY_DOMAIN}
ENV LC_ALL C.UTF-8
ENV LANG C.UTF-8

RUN apt-get update && \
    apt-get install -y \
    doxygen \
    cmake \
    git \
    subversion \
    libc-dev \
    make \
    cppcheck \
    manpages \
    sysstat \
    strace \
    gdb \
    ninja-build \
    man \
    wget \
    curl  \
    build-essential \
    python3.8 \
    openssl \
    libssl-dev \
    g++ \
    clang \
    python3-pip \
    mingw-w64 \
    python3-jinja2 \
    lsb-base \
    lsb-release

# ensure we have newer compilers than the defaults
RUN if [ "${UBUNTU_VERSION}" = "20.04" ]; then \
        echo "Ubuntu ${UBUNTU_VERSION}: Installing clang-12 gcc-10"; \
        apt install -y clang-12 gcc-10 g++-10; \
    else \
        echo "Ubuntu ${UBUNTU_VERSION}: Installing clang-8 gcc-8"; \
        apt install -y clang-8 gcc-8 g++-8; \
    fi
    
RUN rm -rf /var/lib/apt/lists/*

# for building reproducible docs, we now use pipenv
RUN pip3 install pipenv

################################################################################
# prepare our shell overlay
# we install all custom packages as if they were installed with the prefix /opt/vector
RUN mkdir -p /opt/vector
ENV PATH="/opt/vector/bin:${PATH}"

ARG ARTIFACTORY
ENV CMAKE_VERSION="3.15.0"
ENV BOOST_ROOT=/opt/vector

# install download scripts to bin folder
COPY fetch_cmake.sh /opt/vector/bin/
COPY fetch_boost.sh /opt/vector/bin/

RUN fetch_cmake.sh
RUN fetch_boost.sh

# Make python3 the default 
RUN update-alternatives --install /usr/bin/python python /usr/bin/python3 1

################################################################################
# 3. Step: Setup our build user: jenkins
################################################################################
RUN useradd -r -g users -u 500  -m jenkins

# Adding sphinx/breathe environment for documentation builds
COPY docs_requirements.txt /home/jenkins
RUN chown -R jenkins /home/jenkins

USER jenkins

ARG PYPI_MIRROR
ENV PYPI_MIRROR ${PYPI_MIRROR}

WORKDIR /home/jenkins
ENV PATH="${PATH}:/home/jenkins/.local/bin"
RUN pip3 install --index-url ${PYPI_MIRROR}  -r docs_requirements.txt
