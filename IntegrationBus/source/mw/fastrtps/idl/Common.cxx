// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Common.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "Common.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>



ib::mw::idl::EndpointAddress::EndpointAddress()
{
    m_participantId = 0;
    m_endpointId = 0;

}

ib::mw::idl::EndpointAddress::~EndpointAddress()
{


}

ib::mw::idl::EndpointAddress::EndpointAddress(const EndpointAddress &x)
{
    m_participantId = x.m_participantId;
    m_endpointId = x.m_endpointId;
}

ib::mw::idl::EndpointAddress::EndpointAddress(EndpointAddress &&x)
{
    m_participantId = x.m_participantId;
    m_endpointId = x.m_endpointId;
}

ib::mw::idl::EndpointAddress& ib::mw::idl::EndpointAddress::operator=(const EndpointAddress &x)
{

    m_participantId = x.m_participantId;
    m_endpointId = x.m_endpointId;

    return *this;
}

ib::mw::idl::EndpointAddress& ib::mw::idl::EndpointAddress::operator=(EndpointAddress &&x)
{

    m_participantId = x.m_participantId;
    m_endpointId = x.m_endpointId;

    return *this;
}

size_t ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);



    return current_alignment - initial_alignment;
}

size_t ib::mw::idl::EndpointAddress::getCdrSerializedSize(const ib::mw::idl::EndpointAddress& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);



    return current_alignment - initial_alignment;
}

void ib::mw::idl::EndpointAddress::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_participantId;
    scdr << m_endpointId;
}

void ib::mw::idl::EndpointAddress::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_participantId;
    dcdr >> m_endpointId;
}

/*!
 * @brief This function sets a value in member participantId
 * @param _participantId New value for member participantId
 */
void ib::mw::idl::EndpointAddress::participantId(ib::mw::idl::ParticipantIdT _participantId)
{
m_participantId = _participantId;
}

/*!
 * @brief This function returns the value of member participantId
 * @return Value of member participantId
 */
ib::mw::idl::ParticipantIdT ib::mw::idl::EndpointAddress::participantId() const
{
    return m_participantId;
}

/*!
 * @brief This function returns a reference to member participantId
 * @return Reference to member participantId
 */
ib::mw::idl::ParticipantIdT& ib::mw::idl::EndpointAddress::participantId()
{
    return m_participantId;
}
/*!
 * @brief This function sets a value in member endpointId
 * @param _endpointId New value for member endpointId
 */
void ib::mw::idl::EndpointAddress::endpointId(ib::mw::idl::EndpointIdT _endpointId)
{
m_endpointId = _endpointId;
}

/*!
 * @brief This function returns the value of member endpointId
 * @return Value of member endpointId
 */
ib::mw::idl::EndpointIdT ib::mw::idl::EndpointAddress::endpointId() const
{
    return m_endpointId;
}

/*!
 * @brief This function returns a reference to member endpointId
 * @return Reference to member endpointId
 */
ib::mw::idl::EndpointIdT& ib::mw::idl::EndpointAddress::endpointId()
{
    return m_endpointId;
}

size_t ib::mw::idl::EndpointAddress::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;





    return current_align;
}

bool ib::mw::idl::EndpointAddress::isKeyDefined()
{
   return false;
}

void ib::mw::idl::EndpointAddress::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
}



