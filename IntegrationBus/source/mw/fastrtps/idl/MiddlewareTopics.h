// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file MiddlewareTopics.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _IB_MW_SYNC_IDL_MIDDLEWARETOPICS_H_
#define _IB_MW_SYNC_IDL_MIDDLEWARETOPICS_H_

// TODO Poner en el contexto.
#include "Common.h"

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(MiddlewareTopics_SOURCE)
#define MiddlewareTopics_DllAPI __declspec( dllexport )
#else
#define MiddlewareTopics_DllAPI __declspec( dllimport )
#endif // MiddlewareTopics_SOURCE
#else
#define MiddlewareTopics_DllAPI
#endif
#else
#define MiddlewareTopics_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

namespace ib
{
    namespace mw
    {
        namespace sync
        {
            namespace idl
            {
                /*!
                 * @brief This class represents the structure QuantumRequest defined by the user in the IDL file.
                 * @ingroup MIDDLEWARETOPICS
                 */
                class QuantumRequest
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport QuantumRequest();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~QuantumRequest();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::mw::sync::idl::QuantumRequest that will be copied.
                     */
                    eProsima_user_DllExport QuantumRequest(const QuantumRequest &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::mw::sync::idl::QuantumRequest that will be copied.
                     */
                    eProsima_user_DllExport QuantumRequest(QuantumRequest &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::mw::sync::idl::QuantumRequest that will be copied.
                     */
                    eProsima_user_DllExport QuantumRequest& operator=(const QuantumRequest &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::mw::sync::idl::QuantumRequest that will be copied.
                     */
                    eProsima_user_DllExport QuantumRequest& operator=(QuantumRequest &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
                    {
                        m_senderAddr = _senderAddr;
                    }

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
                    {
                        m_senderAddr = std::move(_senderAddr);
                    }

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    inline eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const
                    {
                        return m_senderAddr;
                    }

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    inline eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr()
                    {
                        return m_senderAddr;
                    }
                    /*!
                     * @brief This function sets a value in member nowNs
                     * @param _nowNs New value for member nowNs
                     */
                    inline eProsima_user_DllExport void nowNs(int64_t _nowNs)
                    {
                        m_nowNs = _nowNs;
                    }

                    /*!
                     * @brief This function returns the value of member nowNs
                     * @return Value of member nowNs
                     */
                    inline eProsima_user_DllExport int64_t nowNs() const
                    {
                        return m_nowNs;
                    }

                    /*!
                     * @brief This function returns a reference to member nowNs
                     * @return Reference to member nowNs
                     */
                    inline eProsima_user_DllExport int64_t& nowNs()
                    {
                        return m_nowNs;
                    }
                    /*!
                     * @brief This function sets a value in member durationNs
                     * @param _durationNs New value for member durationNs
                     */
                    inline eProsima_user_DllExport void durationNs(int64_t _durationNs)
                    {
                        m_durationNs = _durationNs;
                    }

                    /*!
                     * @brief This function returns the value of member durationNs
                     * @return Value of member durationNs
                     */
                    inline eProsima_user_DllExport int64_t durationNs() const
                    {
                        return m_durationNs;
                    }

                    /*!
                     * @brief This function returns a reference to member durationNs
                     * @return Reference to member durationNs
                     */
                    inline eProsima_user_DllExport int64_t& durationNs()
                    {
                        return m_durationNs;
                    }

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::mw::sync::idl::QuantumRequest& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    int64_t m_nowNs;
                    int64_t m_durationNs;
                };
                /*!
                 * @brief This class represents the enumeration QuantumRequestStatus defined by the user in the IDL file.
                 * @ingroup MIDDLEWARETOPICS
                 */
                enum QuantumRequestStatus : uint32_t
                {
                    QR_Invalid,
                    QR_Granted,
                    QR_Rejected
                };
                /*!
                 * @brief This class represents the structure QuantumGrant defined by the user in the IDL file.
                 * @ingroup MIDDLEWARETOPICS
                 */
                class QuantumGrant
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport QuantumGrant();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~QuantumGrant();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::mw::sync::idl::QuantumGrant that will be copied.
                     */
                    eProsima_user_DllExport QuantumGrant(const QuantumGrant &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::mw::sync::idl::QuantumGrant that will be copied.
                     */
                    eProsima_user_DllExport QuantumGrant(QuantumGrant &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::mw::sync::idl::QuantumGrant that will be copied.
                     */
                    eProsima_user_DllExport QuantumGrant& operator=(const QuantumGrant &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::mw::sync::idl::QuantumGrant that will be copied.
                     */
                    eProsima_user_DllExport QuantumGrant& operator=(QuantumGrant &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
                    {
                        m_senderAddr = _senderAddr;
                    }

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
                    {
                        m_senderAddr = std::move(_senderAddr);
                    }

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    inline eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const
                    {
                        return m_senderAddr;
                    }

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    inline eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr()
                    {
                        return m_senderAddr;
                    }
                    /*!
                     * @brief This function copies the value in member grantee
                     * @param _grantee New value to be copied in member grantee
                     */
                    inline eProsima_user_DllExport void grantee(const ib::mw::idl::EndpointAddress &_grantee)
                    {
                        m_grantee = _grantee;
                    }

                    /*!
                     * @brief This function moves the value in member grantee
                     * @param _grantee New value to be moved in member grantee
                     */
                    inline eProsima_user_DllExport void grantee(ib::mw::idl::EndpointAddress &&_grantee)
                    {
                        m_grantee = std::move(_grantee);
                    }

                    /*!
                     * @brief This function returns a constant reference to member grantee
                     * @return Constant reference to member grantee
                     */
                    inline eProsima_user_DllExport const ib::mw::idl::EndpointAddress& grantee() const
                    {
                        return m_grantee;
                    }

                    /*!
                     * @brief This function returns a reference to member grantee
                     * @return Reference to member grantee
                     */
                    inline eProsima_user_DllExport ib::mw::idl::EndpointAddress& grantee()
                    {
                        return m_grantee;
                    }
                    /*!
                     * @brief This function sets a value in member nowNs
                     * @param _nowNs New value for member nowNs
                     */
                    inline eProsima_user_DllExport void nowNs(int64_t _nowNs)
                    {
                        m_nowNs = _nowNs;
                    }

                    /*!
                     * @brief This function returns the value of member nowNs
                     * @return Value of member nowNs
                     */
                    inline eProsima_user_DllExport int64_t nowNs() const
                    {
                        return m_nowNs;
                    }

                    /*!
                     * @brief This function returns a reference to member nowNs
                     * @return Reference to member nowNs
                     */
                    inline eProsima_user_DllExport int64_t& nowNs()
                    {
                        return m_nowNs;
                    }
                    /*!
                     * @brief This function sets a value in member durationNs
                     * @param _durationNs New value for member durationNs
                     */
                    inline eProsima_user_DllExport void durationNs(int64_t _durationNs)
                    {
                        m_durationNs = _durationNs;
                    }

                    /*!
                     * @brief This function returns the value of member durationNs
                     * @return Value of member durationNs
                     */
                    inline eProsima_user_DllExport int64_t durationNs() const
                    {
                        return m_durationNs;
                    }

                    /*!
                     * @brief This function returns a reference to member durationNs
                     * @return Reference to member durationNs
                     */
                    inline eProsima_user_DllExport int64_t& durationNs()
                    {
                        return m_durationNs;
                    }
                    /*!
                     * @brief This function sets a value in member status
                     * @param _status New value for member status
                     */
                    inline eProsima_user_DllExport void status(ib::mw::sync::idl::QuantumRequestStatus _status)
                    {
                        m_status = _status;
                    }

                    /*!
                     * @brief This function returns the value of member status
                     * @return Value of member status
                     */
                    inline eProsima_user_DllExport ib::mw::sync::idl::QuantumRequestStatus status() const
                    {
                        return m_status;
                    }

                    /*!
                     * @brief This function returns a reference to member status
                     * @return Reference to member status
                     */
                    inline eProsima_user_DllExport ib::mw::sync::idl::QuantumRequestStatus& status()
                    {
                        return m_status;
                    }

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::mw::sync::idl::QuantumGrant& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    ib::mw::idl::EndpointAddress m_grantee;
                    int64_t m_nowNs;
                    int64_t m_durationNs;
                    ib::mw::sync::idl::QuantumRequestStatus m_status;
                };
                /*!
                 * @brief This class represents the structure Tick defined by the user in the IDL file.
                 * @ingroup MIDDLEWARETOPICS
                 */
                class Tick
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport Tick();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~Tick();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::mw::sync::idl::Tick that will be copied.
                     */
                    eProsima_user_DllExport Tick(const Tick &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::mw::sync::idl::Tick that will be copied.
                     */
                    eProsima_user_DllExport Tick(Tick &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::mw::sync::idl::Tick that will be copied.
                     */
                    eProsima_user_DllExport Tick& operator=(const Tick &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::mw::sync::idl::Tick that will be copied.
                     */
                    eProsima_user_DllExport Tick& operator=(Tick &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
                    {
                        m_senderAddr = _senderAddr;
                    }

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
                    {
                        m_senderAddr = std::move(_senderAddr);
                    }

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    inline eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const
                    {
                        return m_senderAddr;
                    }

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    inline eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr()
                    {
                        return m_senderAddr;
                    }
                    /*!
                     * @brief This function sets a value in member nowNs
                     * @param _nowNs New value for member nowNs
                     */
                    inline eProsima_user_DllExport void nowNs(int64_t _nowNs)
                    {
                        m_nowNs = _nowNs;
                    }

                    /*!
                     * @brief This function returns the value of member nowNs
                     * @return Value of member nowNs
                     */
                    inline eProsima_user_DllExport int64_t nowNs() const
                    {
                        return m_nowNs;
                    }

                    /*!
                     * @brief This function returns a reference to member nowNs
                     * @return Reference to member nowNs
                     */
                    inline eProsima_user_DllExport int64_t& nowNs()
                    {
                        return m_nowNs;
                    }
                    /*!
                     * @brief This function sets a value in member durationNs
                     * @param _durationNs New value for member durationNs
                     */
                    inline eProsima_user_DllExport void durationNs(int64_t _durationNs)
                    {
                        m_durationNs = _durationNs;
                    }

                    /*!
                     * @brief This function returns the value of member durationNs
                     * @return Value of member durationNs
                     */
                    inline eProsima_user_DllExport int64_t durationNs() const
                    {
                        return m_durationNs;
                    }

                    /*!
                     * @brief This function returns a reference to member durationNs
                     * @return Reference to member durationNs
                     */
                    inline eProsima_user_DllExport int64_t& durationNs()
                    {
                        return m_durationNs;
                    }

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::mw::sync::idl::Tick& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    int64_t m_nowNs;
                    int64_t m_durationNs;
                };
                /*!
                 * @brief This class represents the structure TickDone defined by the user in the IDL file.
                 * @ingroup MIDDLEWARETOPICS
                 */
                class TickDone
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport TickDone();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~TickDone();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::mw::sync::idl::TickDone that will be copied.
                     */
                    eProsima_user_DllExport TickDone(const TickDone &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::mw::sync::idl::TickDone that will be copied.
                     */
                    eProsima_user_DllExport TickDone(TickDone &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::mw::sync::idl::TickDone that will be copied.
                     */
                    eProsima_user_DllExport TickDone& operator=(const TickDone &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::mw::sync::idl::TickDone that will be copied.
                     */
                    eProsima_user_DllExport TickDone& operator=(TickDone &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
                    {
                        m_senderAddr = _senderAddr;
                    }

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
                    {
                        m_senderAddr = std::move(_senderAddr);
                    }

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    inline eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const
                    {
                        return m_senderAddr;
                    }

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    inline eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr()
                    {
                        return m_senderAddr;
                    }
                    /*!
                     * @brief This function copies the value in member finishedTick
                     * @param _finishedTick New value to be copied in member finishedTick
                     */
                    inline eProsima_user_DllExport void finishedTick(const ib::mw::sync::idl::Tick &_finishedTick)
                    {
                        m_finishedTick = _finishedTick;
                    }

                    /*!
                     * @brief This function moves the value in member finishedTick
                     * @param _finishedTick New value to be moved in member finishedTick
                     */
                    inline eProsima_user_DllExport void finishedTick(ib::mw::sync::idl::Tick &&_finishedTick)
                    {
                        m_finishedTick = std::move(_finishedTick);
                    }

                    /*!
                     * @brief This function returns a constant reference to member finishedTick
                     * @return Constant reference to member finishedTick
                     */
                    inline eProsima_user_DllExport const ib::mw::sync::idl::Tick& finishedTick() const
                    {
                        return m_finishedTick;
                    }

                    /*!
                     * @brief This function returns a reference to member finishedTick
                     * @return Reference to member finishedTick
                     */
                    inline eProsima_user_DllExport ib::mw::sync::idl::Tick& finishedTick()
                    {
                        return m_finishedTick;
                    }

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::mw::sync::idl::TickDone& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    ib::mw::sync::idl::Tick m_finishedTick;
                };
                /*!
                 * @brief This class represents the enumeration ParticipantCommandKind defined by the user in the IDL file.
                 * @ingroup MIDDLEWARETOPICS
                 */
                enum ParticipantCommandKind : uint32_t
                {
                    PC_Invalid,
                    PC_Initialize,
                    PC_ReInitialize
                };
                /*!
                 * @brief This class represents the structure ParticipantCommand defined by the user in the IDL file.
                 * @ingroup MIDDLEWARETOPICS
                 */
                class ParticipantCommand
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport ParticipantCommand();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~ParticipantCommand();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::mw::sync::idl::ParticipantCommand that will be copied.
                     */
                    eProsima_user_DllExport ParticipantCommand(const ParticipantCommand &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::mw::sync::idl::ParticipantCommand that will be copied.
                     */
                    eProsima_user_DllExport ParticipantCommand(ParticipantCommand &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::mw::sync::idl::ParticipantCommand that will be copied.
                     */
                    eProsima_user_DllExport ParticipantCommand& operator=(const ParticipantCommand &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::mw::sync::idl::ParticipantCommand that will be copied.
                     */
                    eProsima_user_DllExport ParticipantCommand& operator=(ParticipantCommand &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
                    {
                        m_senderAddr = _senderAddr;
                    }

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
                    {
                        m_senderAddr = std::move(_senderAddr);
                    }

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    inline eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const
                    {
                        return m_senderAddr;
                    }

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    inline eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr()
                    {
                        return m_senderAddr;
                    }
                    /*!
                     * @brief This function sets a value in member participant
                     * @param _participant New value for member participant
                     */
                    inline eProsima_user_DllExport void participant(ib::mw::idl::ParticipantIdT _participant)
                    {
                        m_participant = _participant;
                    }

                    /*!
                     * @brief This function returns the value of member participant
                     * @return Value of member participant
                     */
                    inline eProsima_user_DllExport ib::mw::idl::ParticipantIdT participant() const
                    {
                        return m_participant;
                    }

                    /*!
                     * @brief This function returns a reference to member participant
                     * @return Reference to member participant
                     */
                    inline eProsima_user_DllExport ib::mw::idl::ParticipantIdT& participant()
                    {
                        return m_participant;
                    }
                    /*!
                     * @brief This function sets a value in member kind
                     * @param _kind New value for member kind
                     */
                    inline eProsima_user_DllExport void kind(ib::mw::sync::idl::ParticipantCommandKind _kind)
                    {
                        m_kind = _kind;
                    }

                    /*!
                     * @brief This function returns the value of member kind
                     * @return Value of member kind
                     */
                    inline eProsima_user_DllExport ib::mw::sync::idl::ParticipantCommandKind kind() const
                    {
                        return m_kind;
                    }

                    /*!
                     * @brief This function returns a reference to member kind
                     * @return Reference to member kind
                     */
                    inline eProsima_user_DllExport ib::mw::sync::idl::ParticipantCommandKind& kind()
                    {
                        return m_kind;
                    }

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::mw::sync::idl::ParticipantCommand& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    ib::mw::idl::ParticipantIdT m_participant;
                    ib::mw::sync::idl::ParticipantCommandKind m_kind;
                };
                /*!
                 * @brief This class represents the enumeration SystemCommandKind defined by the user in the IDL file.
                 * @ingroup MIDDLEWARETOPICS
                 */
                enum SystemCommandKind : uint32_t
                {
                    SC_Invalid,
                    SC_Run,
                    SC_Stop,
                    SC_Shutdown,
                    SC_PrepareColdswap,
                    SC_ExecuteColdswap
                };
                /*!
                 * @brief This class represents the structure SystemCommand defined by the user in the IDL file.
                 * @ingroup MIDDLEWARETOPICS
                 */
                class SystemCommand
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport SystemCommand();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~SystemCommand();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::mw::sync::idl::SystemCommand that will be copied.
                     */
                    eProsima_user_DllExport SystemCommand(const SystemCommand &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::mw::sync::idl::SystemCommand that will be copied.
                     */
                    eProsima_user_DllExport SystemCommand(SystemCommand &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::mw::sync::idl::SystemCommand that will be copied.
                     */
                    eProsima_user_DllExport SystemCommand& operator=(const SystemCommand &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::mw::sync::idl::SystemCommand that will be copied.
                     */
                    eProsima_user_DllExport SystemCommand& operator=(SystemCommand &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
                    {
                        m_senderAddr = _senderAddr;
                    }

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
                    {
                        m_senderAddr = std::move(_senderAddr);
                    }

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    inline eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const
                    {
                        return m_senderAddr;
                    }

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    inline eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr()
                    {
                        return m_senderAddr;
                    }
                    /*!
                     * @brief This function sets a value in member kind
                     * @param _kind New value for member kind
                     */
                    inline eProsima_user_DllExport void kind(ib::mw::sync::idl::SystemCommandKind _kind)
                    {
                        m_kind = _kind;
                    }

                    /*!
                     * @brief This function returns the value of member kind
                     * @return Value of member kind
                     */
                    inline eProsima_user_DllExport ib::mw::sync::idl::SystemCommandKind kind() const
                    {
                        return m_kind;
                    }

                    /*!
                     * @brief This function returns a reference to member kind
                     * @return Reference to member kind
                     */
                    inline eProsima_user_DllExport ib::mw::sync::idl::SystemCommandKind& kind()
                    {
                        return m_kind;
                    }

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::mw::sync::idl::SystemCommand& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    ib::mw::sync::idl::SystemCommandKind m_kind;
                };
                /*!
                 * @brief This class represents the enumeration ParticipantState defined by the user in the IDL file.
                 * @ingroup MIDDLEWARETOPICS
                 */
                enum ParticipantState : uint32_t
                {
                    PS_Invalid,
                    PS_Idle,
                    PS_Initializing,
                    PS_Initialized,
                    PS_Running,
                    PS_Paused,
                    PS_Stopping,
                    PS_Stopped,
                    PS_ColdswapPrepare,
                    PS_ColdswapReady,
                    PS_ColdswapShutdown,
                    PS_ColdswapIgnored,
                    PS_Error,
                    PS_ShuttingDown,
                    PS_Shutdown
                };
                /*!
                 * @brief This class represents the structure ParticipantStatus defined by the user in the IDL file.
                 * @ingroup MIDDLEWARETOPICS
                 */
                class ParticipantStatus
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport ParticipantStatus();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~ParticipantStatus();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::mw::sync::idl::ParticipantStatus that will be copied.
                     */
                    eProsima_user_DllExport ParticipantStatus(const ParticipantStatus &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::mw::sync::idl::ParticipantStatus that will be copied.
                     */
                    eProsima_user_DllExport ParticipantStatus(ParticipantStatus &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::mw::sync::idl::ParticipantStatus that will be copied.
                     */
                    eProsima_user_DllExport ParticipantStatus& operator=(const ParticipantStatus &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::mw::sync::idl::ParticipantStatus that will be copied.
                     */
                    eProsima_user_DllExport ParticipantStatus& operator=(ParticipantStatus &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
                    {
                        m_senderAddr = _senderAddr;
                    }

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
                    {
                        m_senderAddr = std::move(_senderAddr);
                    }

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    inline eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const
                    {
                        return m_senderAddr;
                    }

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    inline eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr()
                    {
                        return m_senderAddr;
                    }
                    /*!
                     * @brief This function copies the value in member participantName
                     * @param _participantName New value to be copied in member participantName
                     */
                    inline eProsima_user_DllExport void participantName(const std::string &_participantName)
                    {
                        m_participantName = _participantName;
                    }

                    /*!
                     * @brief This function moves the value in member participantName
                     * @param _participantName New value to be moved in member participantName
                     */
                    inline eProsima_user_DllExport void participantName(std::string &&_participantName)
                    {
                        m_participantName = std::move(_participantName);
                    }

                    /*!
                     * @brief This function returns a constant reference to member participantName
                     * @return Constant reference to member participantName
                     */
                    inline eProsima_user_DllExport const std::string& participantName() const
                    {
                        return m_participantName;
                    }

                    /*!
                     * @brief This function returns a reference to member participantName
                     * @return Reference to member participantName
                     */
                    inline eProsima_user_DllExport std::string& participantName()
                    {
                        return m_participantName;
                    }
                    /*!
                     * @brief This function sets a value in member state
                     * @param _state New value for member state
                     */
                    inline eProsima_user_DllExport void state(ib::mw::sync::idl::ParticipantState _state)
                    {
                        m_state = _state;
                    }

                    /*!
                     * @brief This function returns the value of member state
                     * @return Value of member state
                     */
                    inline eProsima_user_DllExport ib::mw::sync::idl::ParticipantState state() const
                    {
                        return m_state;
                    }

                    /*!
                     * @brief This function returns a reference to member state
                     * @return Reference to member state
                     */
                    inline eProsima_user_DllExport ib::mw::sync::idl::ParticipantState& state()
                    {
                        return m_state;
                    }
                    /*!
                     * @brief This function copies the value in member enterReason
                     * @param _enterReason New value to be copied in member enterReason
                     */
                    inline eProsima_user_DllExport void enterReason(const std::string &_enterReason)
                    {
                        m_enterReason = _enterReason;
                    }

                    /*!
                     * @brief This function moves the value in member enterReason
                     * @param _enterReason New value to be moved in member enterReason
                     */
                    inline eProsima_user_DllExport void enterReason(std::string &&_enterReason)
                    {
                        m_enterReason = std::move(_enterReason);
                    }

                    /*!
                     * @brief This function returns a constant reference to member enterReason
                     * @return Constant reference to member enterReason
                     */
                    inline eProsima_user_DllExport const std::string& enterReason() const
                    {
                        return m_enterReason;
                    }

                    /*!
                     * @brief This function returns a reference to member enterReason
                     * @return Reference to member enterReason
                     */
                    inline eProsima_user_DllExport std::string& enterReason()
                    {
                        return m_enterReason;
                    }
                    /*!
                     * @brief This function sets a value in member enterTimeUs
                     * @param _enterTimeUs New value for member enterTimeUs
                     */
                    inline eProsima_user_DllExport void enterTimeUs(int64_t _enterTimeUs)
                    {
                        m_enterTimeUs = _enterTimeUs;
                    }

                    /*!
                     * @brief This function returns the value of member enterTimeUs
                     * @return Value of member enterTimeUs
                     */
                    inline eProsima_user_DllExport int64_t enterTimeUs() const
                    {
                        return m_enterTimeUs;
                    }

                    /*!
                     * @brief This function returns a reference to member enterTimeUs
                     * @return Reference to member enterTimeUs
                     */
                    inline eProsima_user_DllExport int64_t& enterTimeUs()
                    {
                        return m_enterTimeUs;
                    }
                    /*!
                     * @brief This function sets a value in member refreshTimeUs
                     * @param _refreshTimeUs New value for member refreshTimeUs
                     */
                    inline eProsima_user_DllExport void refreshTimeUs(int64_t _refreshTimeUs)
                    {
                        m_refreshTimeUs = _refreshTimeUs;
                    }

                    /*!
                     * @brief This function returns the value of member refreshTimeUs
                     * @return Value of member refreshTimeUs
                     */
                    inline eProsima_user_DllExport int64_t refreshTimeUs() const
                    {
                        return m_refreshTimeUs;
                    }

                    /*!
                     * @brief This function returns a reference to member refreshTimeUs
                     * @return Reference to member refreshTimeUs
                     */
                    inline eProsima_user_DllExport int64_t& refreshTimeUs()
                    {
                        return m_refreshTimeUs;
                    }

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::mw::sync::idl::ParticipantStatus& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    std::string m_participantName;
                    ib::mw::sync::idl::ParticipantState m_state;
                    std::string m_enterReason;
                    int64_t m_enterTimeUs;
                    int64_t m_refreshTimeUs;
                };
                /*!
                 * @brief This class represents the enumeration SystemState defined by the user in the IDL file.
                 * @ingroup MIDDLEWARETOPICS
                 */
                enum SystemState : uint32_t
                {
                    SS_Invalid,
                    SS_Idle,
                    SS_Initializing,
                    SS_Initialized,
                    SS_Running,
                    SS_Paused,
                    SS_Stopping,
                    SS_Stopped,
                    SS_ColdswapPrepare,
                    SS_ColdswapReady,
                    SS_ColdswapPending,
                    SS_ColdswapDone,
                    SS_Error,
                    SS_ShuttingDown,
                    SS_Shutdown
                };
            }
        }
    }
}

#endif // _IB_MW_SYNC_IDL_MIDDLEWARETOPICS_H_