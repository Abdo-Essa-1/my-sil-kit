// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file CanTopics.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _IB_SIM_CAN_IDL_CANTOPICS_H_
#define _IB_SIM_CAN_IDL_CANTOPICS_H_

// TODO Poner en el contexto.
#include "Common.h"

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(CanTopics_SOURCE)
#define CanTopics_DllAPI __declspec( dllexport )
#else
#define CanTopics_DllAPI __declspec( dllimport )
#endif // CanTopics_SOURCE
#else
#define CanTopics_DllAPI
#endif
#else
#define CanTopics_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

namespace ib
{
    namespace sim
    {
        namespace can
        {
            namespace idl
            {
                /*!
                 * @brief This class represents the structure CanMessageFlags defined by the user in the IDL file.
                 * @ingroup CANTOPICS
                 */
                class CanMessageFlags
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CanMessageFlags();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CanMessageFlags();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::can::idl::CanMessageFlags that will be copied.
                     */
                    eProsima_user_DllExport CanMessageFlags(const CanMessageFlags &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::can::idl::CanMessageFlags that will be copied.
                     */
                    eProsima_user_DllExport CanMessageFlags(CanMessageFlags &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::can::idl::CanMessageFlags that will be copied.
                     */
                    eProsima_user_DllExport CanMessageFlags& operator=(const CanMessageFlags &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::can::idl::CanMessageFlags that will be copied.
                     */
                    eProsima_user_DllExport CanMessageFlags& operator=(CanMessageFlags &&x);

                    /*!
                     * @brief This function sets a value in member ide
                     * @param _ide New value for member ide
                     */
                    inline eProsima_user_DllExport void ide(bool _ide)
                    {
                        m_ide = _ide;
                    }

                    /*!
                     * @brief This function returns the value of member ide
                     * @return Value of member ide
                     */
                    inline eProsima_user_DllExport bool ide() const
                    {
                        return m_ide;
                    }

                    /*!
                     * @brief This function returns a reference to member ide
                     * @return Reference to member ide
                     */
                    inline eProsima_user_DllExport bool& ide()
                    {
                        return m_ide;
                    }
                    /*!
                     * @brief This function sets a value in member rtr
                     * @param _rtr New value for member rtr
                     */
                    inline eProsima_user_DllExport void rtr(bool _rtr)
                    {
                        m_rtr = _rtr;
                    }

                    /*!
                     * @brief This function returns the value of member rtr
                     * @return Value of member rtr
                     */
                    inline eProsima_user_DllExport bool rtr() const
                    {
                        return m_rtr;
                    }

                    /*!
                     * @brief This function returns a reference to member rtr
                     * @return Reference to member rtr
                     */
                    inline eProsima_user_DllExport bool& rtr()
                    {
                        return m_rtr;
                    }
                    /*!
                     * @brief This function sets a value in member fdf
                     * @param _fdf New value for member fdf
                     */
                    inline eProsima_user_DllExport void fdf(bool _fdf)
                    {
                        m_fdf = _fdf;
                    }

                    /*!
                     * @brief This function returns the value of member fdf
                     * @return Value of member fdf
                     */
                    inline eProsima_user_DllExport bool fdf() const
                    {
                        return m_fdf;
                    }

                    /*!
                     * @brief This function returns a reference to member fdf
                     * @return Reference to member fdf
                     */
                    inline eProsima_user_DllExport bool& fdf()
                    {
                        return m_fdf;
                    }
                    /*!
                     * @brief This function sets a value in member brs
                     * @param _brs New value for member brs
                     */
                    inline eProsima_user_DllExport void brs(bool _brs)
                    {
                        m_brs = _brs;
                    }

                    /*!
                     * @brief This function returns the value of member brs
                     * @return Value of member brs
                     */
                    inline eProsima_user_DllExport bool brs() const
                    {
                        return m_brs;
                    }

                    /*!
                     * @brief This function returns a reference to member brs
                     * @return Reference to member brs
                     */
                    inline eProsima_user_DllExport bool& brs()
                    {
                        return m_brs;
                    }
                    /*!
                     * @brief This function sets a value in member esi
                     * @param _esi New value for member esi
                     */
                    inline eProsima_user_DllExport void esi(bool _esi)
                    {
                        m_esi = _esi;
                    }

                    /*!
                     * @brief This function returns the value of member esi
                     * @return Value of member esi
                     */
                    inline eProsima_user_DllExport bool esi() const
                    {
                        return m_esi;
                    }

                    /*!
                     * @brief This function returns a reference to member esi
                     * @return Reference to member esi
                     */
                    inline eProsima_user_DllExport bool& esi()
                    {
                        return m_esi;
                    }

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::can::idl::CanMessageFlags& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    bool m_ide;
                    bool m_rtr;
                    bool m_fdf;
                    bool m_brs;
                    bool m_esi;
                };
                typedef uint32_t transmitIdT;
                /*!
                 * @brief This class represents the structure CanMessage defined by the user in the IDL file.
                 * @ingroup CANTOPICS
                 */
                class CanMessage
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CanMessage();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CanMessage();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::can::idl::CanMessage that will be copied.
                     */
                    eProsima_user_DllExport CanMessage(const CanMessage &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::can::idl::CanMessage that will be copied.
                     */
                    eProsima_user_DllExport CanMessage(CanMessage &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::can::idl::CanMessage that will be copied.
                     */
                    eProsima_user_DllExport CanMessage& operator=(const CanMessage &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::can::idl::CanMessage that will be copied.
                     */
                    eProsima_user_DllExport CanMessage& operator=(CanMessage &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
                    {
                        m_senderAddr = _senderAddr;
                    }

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
                    {
                        m_senderAddr = std::move(_senderAddr);
                    }

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    inline eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const
                    {
                        return m_senderAddr;
                    }

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    inline eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr()
                    {
                        return m_senderAddr;
                    }
                    /*!
                     * @brief This function sets a value in member transmitId
                     * @param _transmitId New value for member transmitId
                     */
                    inline eProsima_user_DllExport void transmitId(uint32_t _transmitId)
                    {
                        m_transmitId = _transmitId;
                    }

                    /*!
                     * @brief This function returns the value of member transmitId
                     * @return Value of member transmitId
                     */
                    inline eProsima_user_DllExport uint32_t transmitId() const
                    {
                        return m_transmitId;
                    }

                    /*!
                     * @brief This function returns a reference to member transmitId
                     * @return Reference to member transmitId
                     */
                    inline eProsima_user_DllExport uint32_t& transmitId()
                    {
                        return m_transmitId;
                    }
                    /*!
                     * @brief This function sets a value in member timestampNs
                     * @param _timestampNs New value for member timestampNs
                     */
                    inline eProsima_user_DllExport void timestampNs(int64_t _timestampNs)
                    {
                        m_timestampNs = _timestampNs;
                    }

                    /*!
                     * @brief This function returns the value of member timestampNs
                     * @return Value of member timestampNs
                     */
                    inline eProsima_user_DllExport int64_t timestampNs() const
                    {
                        return m_timestampNs;
                    }

                    /*!
                     * @brief This function returns a reference to member timestampNs
                     * @return Reference to member timestampNs
                     */
                    inline eProsima_user_DllExport int64_t& timestampNs()
                    {
                        return m_timestampNs;
                    }
                    /*!
                     * @brief This function sets a value in member canId
                     * @param _canId New value for member canId
                     */
                    inline eProsima_user_DllExport void canId(uint32_t _canId)
                    {
                        m_canId = _canId;
                    }

                    /*!
                     * @brief This function returns the value of member canId
                     * @return Value of member canId
                     */
                    inline eProsima_user_DllExport uint32_t canId() const
                    {
                        return m_canId;
                    }

                    /*!
                     * @brief This function returns a reference to member canId
                     * @return Reference to member canId
                     */
                    inline eProsima_user_DllExport uint32_t& canId()
                    {
                        return m_canId;
                    }
                    /*!
                     * @brief This function copies the value in member flags
                     * @param _flags New value to be copied in member flags
                     */
                    inline eProsima_user_DllExport void flags(const ib::sim::can::idl::CanMessageFlags &_flags)
                    {
                        m_flags = _flags;
                    }

                    /*!
                     * @brief This function moves the value in member flags
                     * @param _flags New value to be moved in member flags
                     */
                    inline eProsima_user_DllExport void flags(ib::sim::can::idl::CanMessageFlags &&_flags)
                    {
                        m_flags = std::move(_flags);
                    }

                    /*!
                     * @brief This function returns a constant reference to member flags
                     * @return Constant reference to member flags
                     */
                    inline eProsima_user_DllExport const ib::sim::can::idl::CanMessageFlags& flags() const
                    {
                        return m_flags;
                    }

                    /*!
                     * @brief This function returns a reference to member flags
                     * @return Reference to member flags
                     */
                    inline eProsima_user_DllExport ib::sim::can::idl::CanMessageFlags& flags()
                    {
                        return m_flags;
                    }
                    /*!
                     * @brief This function sets a value in member dlc
                     * @param _dlc New value for member dlc
                     */
                    inline eProsima_user_DllExport void dlc(uint8_t _dlc)
                    {
                        m_dlc = _dlc;
                    }

                    /*!
                     * @brief This function returns the value of member dlc
                     * @return Value of member dlc
                     */
                    inline eProsima_user_DllExport uint8_t dlc() const
                    {
                        return m_dlc;
                    }

                    /*!
                     * @brief This function returns a reference to member dlc
                     * @return Reference to member dlc
                     */
                    inline eProsima_user_DllExport uint8_t& dlc()
                    {
                        return m_dlc;
                    }
                    /*!
                     * @brief This function copies the value in member dataField
                     * @param _dataField New value to be copied in member dataField
                     */
                    inline eProsima_user_DllExport void dataField(const std::vector<uint8_t> &_dataField)
                    {
                        m_dataField = _dataField;
                    }

                    /*!
                     * @brief This function moves the value in member dataField
                     * @param _dataField New value to be moved in member dataField
                     */
                    inline eProsima_user_DllExport void dataField(std::vector<uint8_t> &&_dataField)
                    {
                        m_dataField = std::move(_dataField);
                    }

                    /*!
                     * @brief This function returns a constant reference to member dataField
                     * @return Constant reference to member dataField
                     */
                    inline eProsima_user_DllExport const std::vector<uint8_t>& dataField() const
                    {
                        return m_dataField;
                    }

                    /*!
                     * @brief This function returns a reference to member dataField
                     * @return Reference to member dataField
                     */
                    inline eProsima_user_DllExport std::vector<uint8_t>& dataField()
                    {
                        return m_dataField;
                    }

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::can::idl::CanMessage& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    uint32_t m_transmitId;
                    int64_t m_timestampNs;
                    uint32_t m_canId;
                    ib::sim::can::idl::CanMessageFlags m_flags;
                    uint8_t m_dlc;
                    std::vector<uint8_t> m_dataField;
                };
                /*!
                 * @brief This class represents the structure CanControllerStatus defined by the user in the IDL file.
                 * @ingroup CANTOPICS
                 */
                class CanControllerStatus
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CanControllerStatus();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CanControllerStatus();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::can::idl::CanControllerStatus that will be copied.
                     */
                    eProsima_user_DllExport CanControllerStatus(const CanControllerStatus &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::can::idl::CanControllerStatus that will be copied.
                     */
                    eProsima_user_DllExport CanControllerStatus(CanControllerStatus &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::can::idl::CanControllerStatus that will be copied.
                     */
                    eProsima_user_DllExport CanControllerStatus& operator=(const CanControllerStatus &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::can::idl::CanControllerStatus that will be copied.
                     */
                    eProsima_user_DllExport CanControllerStatus& operator=(CanControllerStatus &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
                    {
                        m_senderAddr = _senderAddr;
                    }

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
                    {
                        m_senderAddr = std::move(_senderAddr);
                    }

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    inline eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const
                    {
                        return m_senderAddr;
                    }

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    inline eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr()
                    {
                        return m_senderAddr;
                    }
                    /*!
                     * @brief This function sets a value in member timestampNs
                     * @param _timestampNs New value for member timestampNs
                     */
                    inline eProsima_user_DllExport void timestampNs(int64_t _timestampNs)
                    {
                        m_timestampNs = _timestampNs;
                    }

                    /*!
                     * @brief This function returns the value of member timestampNs
                     * @return Value of member timestampNs
                     */
                    inline eProsima_user_DllExport int64_t timestampNs() const
                    {
                        return m_timestampNs;
                    }

                    /*!
                     * @brief This function returns a reference to member timestampNs
                     * @return Reference to member timestampNs
                     */
                    inline eProsima_user_DllExport int64_t& timestampNs()
                    {
                        return m_timestampNs;
                    }
                    /*!
                     * @brief This function sets a value in member controllerState
                     * @param _controllerState New value for member controllerState
                     */
                    inline eProsima_user_DllExport void controllerState(uint8_t _controllerState)
                    {
                        m_controllerState = _controllerState;
                    }

                    /*!
                     * @brief This function returns the value of member controllerState
                     * @return Value of member controllerState
                     */
                    inline eProsima_user_DllExport uint8_t controllerState() const
                    {
                        return m_controllerState;
                    }

                    /*!
                     * @brief This function returns a reference to member controllerState
                     * @return Reference to member controllerState
                     */
                    inline eProsima_user_DllExport uint8_t& controllerState()
                    {
                        return m_controllerState;
                    }
                    /*!
                     * @brief This function sets a value in member errorState
                     * @param _errorState New value for member errorState
                     */
                    inline eProsima_user_DllExport void errorState(uint8_t _errorState)
                    {
                        m_errorState = _errorState;
                    }

                    /*!
                     * @brief This function returns the value of member errorState
                     * @return Value of member errorState
                     */
                    inline eProsima_user_DllExport uint8_t errorState() const
                    {
                        return m_errorState;
                    }

                    /*!
                     * @brief This function returns a reference to member errorState
                     * @return Reference to member errorState
                     */
                    inline eProsima_user_DllExport uint8_t& errorState()
                    {
                        return m_errorState;
                    }

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::can::idl::CanControllerStatus& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    int64_t m_timestampNs;
                    uint8_t m_controllerState;
                    uint8_t m_errorState;
                };
                /*!
                 * @brief This class represents the structure CanTransmitAcknowledge defined by the user in the IDL file.
                 * @ingroup CANTOPICS
                 */
                class CanTransmitAcknowledge
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CanTransmitAcknowledge();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CanTransmitAcknowledge();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::can::idl::CanTransmitAcknowledge that will be copied.
                     */
                    eProsima_user_DllExport CanTransmitAcknowledge(const CanTransmitAcknowledge &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::can::idl::CanTransmitAcknowledge that will be copied.
                     */
                    eProsima_user_DllExport CanTransmitAcknowledge(CanTransmitAcknowledge &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::can::idl::CanTransmitAcknowledge that will be copied.
                     */
                    eProsima_user_DllExport CanTransmitAcknowledge& operator=(const CanTransmitAcknowledge &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::can::idl::CanTransmitAcknowledge that will be copied.
                     */
                    eProsima_user_DllExport CanTransmitAcknowledge& operator=(CanTransmitAcknowledge &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
                    {
                        m_senderAddr = _senderAddr;
                    }

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
                    {
                        m_senderAddr = std::move(_senderAddr);
                    }

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    inline eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const
                    {
                        return m_senderAddr;
                    }

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    inline eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr()
                    {
                        return m_senderAddr;
                    }
                    /*!
                     * @brief This function sets a value in member transmitId
                     * @param _transmitId New value for member transmitId
                     */
                    inline eProsima_user_DllExport void transmitId(ib::sim::can::idl::transmitIdT _transmitId)
                    {
                        m_transmitId = _transmitId;
                    }

                    /*!
                     * @brief This function returns the value of member transmitId
                     * @return Value of member transmitId
                     */
                    inline eProsima_user_DllExport ib::sim::can::idl::transmitIdT transmitId() const
                    {
                        return m_transmitId;
                    }

                    /*!
                     * @brief This function returns a reference to member transmitId
                     * @return Reference to member transmitId
                     */
                    inline eProsima_user_DllExport ib::sim::can::idl::transmitIdT& transmitId()
                    {
                        return m_transmitId;
                    }
                    /*!
                     * @brief This function sets a value in member timestampNS
                     * @param _timestampNS New value for member timestampNS
                     */
                    inline eProsima_user_DllExport void timestampNS(int64_t _timestampNS)
                    {
                        m_timestampNS = _timestampNS;
                    }

                    /*!
                     * @brief This function returns the value of member timestampNS
                     * @return Value of member timestampNS
                     */
                    inline eProsima_user_DllExport int64_t timestampNS() const
                    {
                        return m_timestampNS;
                    }

                    /*!
                     * @brief This function returns a reference to member timestampNS
                     * @return Reference to member timestampNS
                     */
                    inline eProsima_user_DllExport int64_t& timestampNS()
                    {
                        return m_timestampNS;
                    }
                    /*!
                     * @brief This function sets a value in member txStatus
                     * @param _txStatus New value for member txStatus
                     */
                    inline eProsima_user_DllExport void txStatus(uint8_t _txStatus)
                    {
                        m_txStatus = _txStatus;
                    }

                    /*!
                     * @brief This function returns the value of member txStatus
                     * @return Value of member txStatus
                     */
                    inline eProsima_user_DllExport uint8_t txStatus() const
                    {
                        return m_txStatus;
                    }

                    /*!
                     * @brief This function returns a reference to member txStatus
                     * @return Reference to member txStatus
                     */
                    inline eProsima_user_DllExport uint8_t& txStatus()
                    {
                        return m_txStatus;
                    }

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::can::idl::CanTransmitAcknowledge& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    ib::sim::can::idl::transmitIdT m_transmitId;
                    int64_t m_timestampNS;
                    uint8_t m_txStatus;
                };
                /*!
                 * @brief This class represents the structure CanConfigureBaudrate defined by the user in the IDL file.
                 * @ingroup CANTOPICS
                 */
                class CanConfigureBaudrate
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CanConfigureBaudrate();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CanConfigureBaudrate();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::can::idl::CanConfigureBaudrate that will be copied.
                     */
                    eProsima_user_DllExport CanConfigureBaudrate(const CanConfigureBaudrate &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::can::idl::CanConfigureBaudrate that will be copied.
                     */
                    eProsima_user_DllExport CanConfigureBaudrate(CanConfigureBaudrate &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::can::idl::CanConfigureBaudrate that will be copied.
                     */
                    eProsima_user_DllExport CanConfigureBaudrate& operator=(const CanConfigureBaudrate &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::can::idl::CanConfigureBaudrate that will be copied.
                     */
                    eProsima_user_DllExport CanConfigureBaudrate& operator=(CanConfigureBaudrate &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
                    {
                        m_senderAddr = _senderAddr;
                    }

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
                    {
                        m_senderAddr = std::move(_senderAddr);
                    }

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    inline eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const
                    {
                        return m_senderAddr;
                    }

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    inline eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr()
                    {
                        return m_senderAddr;
                    }
                    /*!
                     * @brief This function sets a value in member baudRate
                     * @param _baudRate New value for member baudRate
                     */
                    inline eProsima_user_DllExport void baudRate(uint32_t _baudRate)
                    {
                        m_baudRate = _baudRate;
                    }

                    /*!
                     * @brief This function returns the value of member baudRate
                     * @return Value of member baudRate
                     */
                    inline eProsima_user_DllExport uint32_t baudRate() const
                    {
                        return m_baudRate;
                    }

                    /*!
                     * @brief This function returns a reference to member baudRate
                     * @return Reference to member baudRate
                     */
                    inline eProsima_user_DllExport uint32_t& baudRate()
                    {
                        return m_baudRate;
                    }
                    /*!
                     * @brief This function sets a value in member fdBaudRate
                     * @param _fdBaudRate New value for member fdBaudRate
                     */
                    inline eProsima_user_DllExport void fdBaudRate(uint32_t _fdBaudRate)
                    {
                        m_fdBaudRate = _fdBaudRate;
                    }

                    /*!
                     * @brief This function returns the value of member fdBaudRate
                     * @return Value of member fdBaudRate
                     */
                    inline eProsima_user_DllExport uint32_t fdBaudRate() const
                    {
                        return m_fdBaudRate;
                    }

                    /*!
                     * @brief This function returns a reference to member fdBaudRate
                     * @return Reference to member fdBaudRate
                     */
                    inline eProsima_user_DllExport uint32_t& fdBaudRate()
                    {
                        return m_fdBaudRate;
                    }

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::can::idl::CanConfigureBaudrate& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    uint32_t m_baudRate;
                    uint32_t m_fdBaudRate;
                };
                /*!
                 * @brief This class represents the structure CanSetControllerMode defined by the user in the IDL file.
                 * @ingroup CANTOPICS
                 */
                class CanSetControllerMode
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CanSetControllerMode();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~CanSetControllerMode();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::can::idl::CanSetControllerMode that will be copied.
                     */
                    eProsima_user_DllExport CanSetControllerMode(const CanSetControllerMode &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::can::idl::CanSetControllerMode that will be copied.
                     */
                    eProsima_user_DllExport CanSetControllerMode(CanSetControllerMode &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::can::idl::CanSetControllerMode that will be copied.
                     */
                    eProsima_user_DllExport CanSetControllerMode& operator=(const CanSetControllerMode &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::can::idl::CanSetControllerMode that will be copied.
                     */
                    eProsima_user_DllExport CanSetControllerMode& operator=(CanSetControllerMode &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
                    {
                        m_senderAddr = _senderAddr;
                    }

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
                    {
                        m_senderAddr = std::move(_senderAddr);
                    }

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    inline eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const
                    {
                        return m_senderAddr;
                    }

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    inline eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr()
                    {
                        return m_senderAddr;
                    }
                    /*!
                     * @brief This function sets a value in member resetErrorHandling
                     * @param _resetErrorHandling New value for member resetErrorHandling
                     */
                    inline eProsima_user_DllExport void resetErrorHandling(bool _resetErrorHandling)
                    {
                        m_resetErrorHandling = _resetErrorHandling;
                    }

                    /*!
                     * @brief This function returns the value of member resetErrorHandling
                     * @return Value of member resetErrorHandling
                     */
                    inline eProsima_user_DllExport bool resetErrorHandling() const
                    {
                        return m_resetErrorHandling;
                    }

                    /*!
                     * @brief This function returns a reference to member resetErrorHandling
                     * @return Reference to member resetErrorHandling
                     */
                    inline eProsima_user_DllExport bool& resetErrorHandling()
                    {
                        return m_resetErrorHandling;
                    }
                    /*!
                     * @brief This function sets a value in member cancelTransmitRequests
                     * @param _cancelTransmitRequests New value for member cancelTransmitRequests
                     */
                    inline eProsima_user_DllExport void cancelTransmitRequests(bool _cancelTransmitRequests)
                    {
                        m_cancelTransmitRequests = _cancelTransmitRequests;
                    }

                    /*!
                     * @brief This function returns the value of member cancelTransmitRequests
                     * @return Value of member cancelTransmitRequests
                     */
                    inline eProsima_user_DllExport bool cancelTransmitRequests() const
                    {
                        return m_cancelTransmitRequests;
                    }

                    /*!
                     * @brief This function returns a reference to member cancelTransmitRequests
                     * @return Reference to member cancelTransmitRequests
                     */
                    inline eProsima_user_DllExport bool& cancelTransmitRequests()
                    {
                        return m_cancelTransmitRequests;
                    }
                    /*!
                     * @brief This function sets a value in member mode
                     * @param _mode New value for member mode
                     */
                    inline eProsima_user_DllExport void mode(uint8_t _mode)
                    {
                        m_mode = _mode;
                    }

                    /*!
                     * @brief This function returns the value of member mode
                     * @return Value of member mode
                     */
                    inline eProsima_user_DllExport uint8_t mode() const
                    {
                        return m_mode;
                    }

                    /*!
                     * @brief This function returns a reference to member mode
                     * @return Reference to member mode
                     */
                    inline eProsima_user_DllExport uint8_t& mode()
                    {
                        return m_mode;
                    }

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::can::idl::CanSetControllerMode& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    bool m_resetErrorHandling;
                    bool m_cancelTransmitRequests;
                    uint8_t m_mode;
                };
            }
        }
    }
}

#endif // _IB_SIM_CAN_IDL_CANTOPICS_H_