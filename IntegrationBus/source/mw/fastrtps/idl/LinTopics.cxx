// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file LinTopics.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "LinTopics.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>




ib::sim::lin::idl::Frame::Frame()
{
    m_id = 0;

    m_checksumModel = ib::sim::lin::idl::Undefined;

    m_dataLength = 0;

    memset(&m_data, 0, (8) * 1);

}

ib::sim::lin::idl::Frame::~Frame()
{
}

ib::sim::lin::idl::Frame::Frame(const Frame &x)
{
    m_id = x.m_id;
    m_checksumModel = x.m_checksumModel;
    m_dataLength = x.m_dataLength;
    m_data = x.m_data;
}

ib::sim::lin::idl::Frame::Frame(Frame &&x)
{
    m_id = x.m_id;
    m_checksumModel = x.m_checksumModel;
    m_dataLength = x.m_dataLength;
    m_data = std::move(x.m_data);
}

ib::sim::lin::idl::Frame& ib::sim::lin::idl::Frame::operator=(const Frame &x)
{
    m_id = x.m_id;
    m_checksumModel = x.m_checksumModel;
    m_dataLength = x.m_dataLength;
    m_data = x.m_data;

    return *this;
}

ib::sim::lin::idl::Frame& ib::sim::lin::idl::Frame::operator=(Frame &&x)
{
    m_id = x.m_id;
    m_checksumModel = x.m_checksumModel;
    m_dataLength = x.m_dataLength;
    m_data = std::move(x.m_data);

    return *this;
}

size_t ib::sim::lin::idl::Frame::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += ((8) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t ib::sim::lin::idl::Frame::getCdrSerializedSize(const ib::sim::lin::idl::Frame& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += ((8) * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void ib::sim::lin::idl::Frame::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_id;
    scdr << (uint32_t)m_checksumModel;
    scdr << m_dataLength;
    scdr << m_data;
}

void ib::sim::lin::idl::Frame::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_id;
    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_checksumModel = (ib::sim::lin::idl::ChecksumModel)enum_value;
    }
    dcdr >> m_dataLength;
    dcdr >> m_data;
}

size_t ib::sim::lin::idl::Frame::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            





    return current_align;
}

bool ib::sim::lin::idl::Frame::isKeyDefined()
{
    return false;
}

void ib::sim::lin::idl::Frame::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
	 
	 
}



ib::sim::lin::idl::FrameResponse::FrameResponse()
{

    m_responseMode = ib::sim::lin::idl::Unused;


}

ib::sim::lin::idl::FrameResponse::~FrameResponse()
{
}

ib::sim::lin::idl::FrameResponse::FrameResponse(const FrameResponse &x)
{
    m_frame = x.m_frame;
    m_responseMode = x.m_responseMode;
}

ib::sim::lin::idl::FrameResponse::FrameResponse(FrameResponse &&x)
{
    m_frame = std::move(x.m_frame);
    m_responseMode = x.m_responseMode;
}

ib::sim::lin::idl::FrameResponse& ib::sim::lin::idl::FrameResponse::operator=(const FrameResponse &x)
{
    m_frame = x.m_frame;
    m_responseMode = x.m_responseMode;

    return *this;
}

ib::sim::lin::idl::FrameResponse& ib::sim::lin::idl::FrameResponse::operator=(FrameResponse &&x)
{
    m_frame = std::move(x.m_frame);
    m_responseMode = x.m_responseMode;

    return *this;
}

size_t ib::sim::lin::idl::FrameResponse::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += ib::sim::lin::idl::Frame::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t ib::sim::lin::idl::FrameResponse::getCdrSerializedSize(const ib::sim::lin::idl::FrameResponse& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += ib::sim::lin::idl::Frame::getCdrSerializedSize(data.frame(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void ib::sim::lin::idl::FrameResponse::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_frame;
    scdr << (uint32_t)m_responseMode;
}

void ib::sim::lin::idl::FrameResponse::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_frame;
    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_responseMode = (ib::sim::lin::idl::FrameResponseMode)enum_value;
    }
}

size_t ib::sim::lin::idl::FrameResponse::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            



    return current_align;
}

bool ib::sim::lin::idl::FrameResponse::isKeyDefined()
{
    return false;
}

void ib::sim::lin::idl::FrameResponse::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
}


ib::sim::lin::idl::ControllerConfig::ControllerConfig()
{

    m_controllerMode = ib::sim::lin::idl::Inactive;

    m_baudRate = 0;



}

ib::sim::lin::idl::ControllerConfig::~ControllerConfig()
{
}

ib::sim::lin::idl::ControllerConfig::ControllerConfig(const ControllerConfig &x)
{
    m_senderAddr = x.m_senderAddr;
    m_controllerMode = x.m_controllerMode;
    m_baudRate = x.m_baudRate;
    m_frameResponses = x.m_frameResponses;
}

ib::sim::lin::idl::ControllerConfig::ControllerConfig(ControllerConfig &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_controllerMode = x.m_controllerMode;
    m_baudRate = x.m_baudRate;
    m_frameResponses = std::move(x.m_frameResponses);
}

ib::sim::lin::idl::ControllerConfig& ib::sim::lin::idl::ControllerConfig::operator=(const ControllerConfig &x)
{
    m_senderAddr = x.m_senderAddr;
    m_controllerMode = x.m_controllerMode;
    m_baudRate = x.m_baudRate;
    m_frameResponses = x.m_frameResponses;

    return *this;
}

ib::sim::lin::idl::ControllerConfig& ib::sim::lin::idl::ControllerConfig::operator=(ControllerConfig &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_controllerMode = x.m_controllerMode;
    m_baudRate = x.m_baudRate;
    m_frameResponses = std::move(x.m_frameResponses);

    return *this;
}

size_t ib::sim::lin::idl::ControllerConfig::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += ib::sim::lin::idl::FrameResponse::getMaxCdrSerializedSize(current_alignment);}


    return current_alignment - initial_alignment;
}

size_t ib::sim::lin::idl::ControllerConfig::getCdrSerializedSize(const ib::sim::lin::idl::ControllerConfig& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += ib::mw::idl::EndpointAddress::getCdrSerializedSize(data.senderAddr(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.frameResponses().size(); ++a)
    {
        current_alignment += ib::sim::lin::idl::FrameResponse::getCdrSerializedSize(data.frameResponses().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void ib::sim::lin::idl::ControllerConfig::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_senderAddr;
    scdr << (uint32_t)m_controllerMode;
    scdr << m_baudRate;
    scdr << m_frameResponses;
}

void ib::sim::lin::idl::ControllerConfig::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_senderAddr;
    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_controllerMode = (ib::sim::lin::idl::ControllerMode)enum_value;
    }
    dcdr >> m_baudRate;
    dcdr >> m_frameResponses;
}

size_t ib::sim::lin::idl::ControllerConfig::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            
     current_align += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_align); 




    return current_align;
}

bool ib::sim::lin::idl::ControllerConfig::isKeyDefined()
{
    return true;
}

void ib::sim::lin::idl::ControllerConfig::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 scdr << m_senderAddr;  
	 
	 
	 
}

ib::sim::lin::idl::Transmission::Transmission()
{

    m_timestampNs = 0;


    m_status = ib::sim::lin::idl::NOT_OK;


}

ib::sim::lin::idl::Transmission::~Transmission()
{
}

ib::sim::lin::idl::Transmission::Transmission(const Transmission &x)
{
    m_senderAddr = x.m_senderAddr;
    m_timestampNs = x.m_timestampNs;
    m_frame = x.m_frame;
    m_status = x.m_status;
}

ib::sim::lin::idl::Transmission::Transmission(Transmission &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_timestampNs = x.m_timestampNs;
    m_frame = std::move(x.m_frame);
    m_status = x.m_status;
}

ib::sim::lin::idl::Transmission& ib::sim::lin::idl::Transmission::operator=(const Transmission &x)
{
    m_senderAddr = x.m_senderAddr;
    m_timestampNs = x.m_timestampNs;
    m_frame = x.m_frame;
    m_status = x.m_status;

    return *this;
}

ib::sim::lin::idl::Transmission& ib::sim::lin::idl::Transmission::operator=(Transmission &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_timestampNs = x.m_timestampNs;
    m_frame = std::move(x.m_frame);
    m_status = x.m_status;

    return *this;
}

size_t ib::sim::lin::idl::Transmission::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += ib::sim::lin::idl::Frame::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t ib::sim::lin::idl::Transmission::getCdrSerializedSize(const ib::sim::lin::idl::Transmission& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += ib::mw::idl::EndpointAddress::getCdrSerializedSize(data.senderAddr(), current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += ib::sim::lin::idl::Frame::getCdrSerializedSize(data.frame(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void ib::sim::lin::idl::Transmission::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_senderAddr;
    scdr << m_timestampNs;
    scdr << m_frame;
    scdr << (uint32_t)m_status;
}

void ib::sim::lin::idl::Transmission::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_senderAddr;
    dcdr >> m_timestampNs;
    dcdr >> m_frame;
    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_status = (ib::sim::lin::idl::FrameStatus)enum_value;
    }
}

size_t ib::sim::lin::idl::Transmission::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            
     current_align += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_align); 




    return current_align;
}

bool ib::sim::lin::idl::Transmission::isKeyDefined()
{
    return true;
}

void ib::sim::lin::idl::Transmission::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 scdr << m_senderAddr;  
	 
	 
	 
}
ib::sim::lin::idl::SendFrameRequest::SendFrameRequest()
{


    m_responseType = ib::sim::lin::idl::MasterResponse;


}

ib::sim::lin::idl::SendFrameRequest::~SendFrameRequest()
{
}

ib::sim::lin::idl::SendFrameRequest::SendFrameRequest(const SendFrameRequest &x)
{
    m_senderAddr = x.m_senderAddr;
    m_frame = x.m_frame;
    m_responseType = x.m_responseType;
}

ib::sim::lin::idl::SendFrameRequest::SendFrameRequest(SendFrameRequest &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_frame = std::move(x.m_frame);
    m_responseType = x.m_responseType;
}

ib::sim::lin::idl::SendFrameRequest& ib::sim::lin::idl::SendFrameRequest::operator=(const SendFrameRequest &x)
{
    m_senderAddr = x.m_senderAddr;
    m_frame = x.m_frame;
    m_responseType = x.m_responseType;

    return *this;
}

ib::sim::lin::idl::SendFrameRequest& ib::sim::lin::idl::SendFrameRequest::operator=(SendFrameRequest &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_frame = std::move(x.m_frame);
    m_responseType = x.m_responseType;

    return *this;
}

size_t ib::sim::lin::idl::SendFrameRequest::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_alignment);
    current_alignment += ib::sim::lin::idl::Frame::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t ib::sim::lin::idl::SendFrameRequest::getCdrSerializedSize(const ib::sim::lin::idl::SendFrameRequest& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += ib::mw::idl::EndpointAddress::getCdrSerializedSize(data.senderAddr(), current_alignment);
    current_alignment += ib::sim::lin::idl::Frame::getCdrSerializedSize(data.frame(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void ib::sim::lin::idl::SendFrameRequest::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_senderAddr;
    scdr << m_frame;
    scdr << (uint32_t)m_responseType;
}

void ib::sim::lin::idl::SendFrameRequest::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_senderAddr;
    dcdr >> m_frame;
    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_responseType = (ib::sim::lin::idl::FrameResponseType)enum_value;
    }
}

size_t ib::sim::lin::idl::SendFrameRequest::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            
     current_align += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_align); 



    return current_align;
}

bool ib::sim::lin::idl::SendFrameRequest::isKeyDefined()
{
    return true;
}

void ib::sim::lin::idl::SendFrameRequest::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 scdr << m_senderAddr;  
	 
	 
}
ib::sim::lin::idl::SendFrameHeaderRequest::SendFrameHeaderRequest()
{

    m_id = 0;


}

ib::sim::lin::idl::SendFrameHeaderRequest::~SendFrameHeaderRequest()
{
}

ib::sim::lin::idl::SendFrameHeaderRequest::SendFrameHeaderRequest(const SendFrameHeaderRequest &x)
{
    m_senderAddr = x.m_senderAddr;
    m_id = x.m_id;
}

ib::sim::lin::idl::SendFrameHeaderRequest::SendFrameHeaderRequest(SendFrameHeaderRequest &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_id = x.m_id;
}

ib::sim::lin::idl::SendFrameHeaderRequest& ib::sim::lin::idl::SendFrameHeaderRequest::operator=(const SendFrameHeaderRequest &x)
{
    m_senderAddr = x.m_senderAddr;
    m_id = x.m_id;

    return *this;
}

ib::sim::lin::idl::SendFrameHeaderRequest& ib::sim::lin::idl::SendFrameHeaderRequest::operator=(SendFrameHeaderRequest &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_id = x.m_id;

    return *this;
}

size_t ib::sim::lin::idl::SendFrameHeaderRequest::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t ib::sim::lin::idl::SendFrameHeaderRequest::getCdrSerializedSize(const ib::sim::lin::idl::SendFrameHeaderRequest& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += ib::mw::idl::EndpointAddress::getCdrSerializedSize(data.senderAddr(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void ib::sim::lin::idl::SendFrameHeaderRequest::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_senderAddr;
    scdr << m_id;
}

void ib::sim::lin::idl::SendFrameHeaderRequest::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_senderAddr;
    dcdr >> m_id;
}

size_t ib::sim::lin::idl::SendFrameHeaderRequest::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            
     current_align += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_align); 


    return current_align;
}

bool ib::sim::lin::idl::SendFrameHeaderRequest::isKeyDefined()
{
    return true;
}

void ib::sim::lin::idl::SendFrameHeaderRequest::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 scdr << m_senderAddr;  
	 
}
ib::sim::lin::idl::FrameResponseUpdate::FrameResponseUpdate()
{



}

ib::sim::lin::idl::FrameResponseUpdate::~FrameResponseUpdate()
{
}

ib::sim::lin::idl::FrameResponseUpdate::FrameResponseUpdate(const FrameResponseUpdate &x)
{
    m_senderAddr = x.m_senderAddr;
    m_frameResponses = x.m_frameResponses;
}

ib::sim::lin::idl::FrameResponseUpdate::FrameResponseUpdate(FrameResponseUpdate &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_frameResponses = std::move(x.m_frameResponses);
}

ib::sim::lin::idl::FrameResponseUpdate& ib::sim::lin::idl::FrameResponseUpdate::operator=(const FrameResponseUpdate &x)
{
    m_senderAddr = x.m_senderAddr;
    m_frameResponses = x.m_frameResponses;

    return *this;
}

ib::sim::lin::idl::FrameResponseUpdate& ib::sim::lin::idl::FrameResponseUpdate::operator=(FrameResponseUpdate &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_frameResponses = std::move(x.m_frameResponses);

    return *this;
}

size_t ib::sim::lin::idl::FrameResponseUpdate::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 100; ++a)
    {
        current_alignment += ib::sim::lin::idl::FrameResponse::getMaxCdrSerializedSize(current_alignment);}


    return current_alignment - initial_alignment;
}

size_t ib::sim::lin::idl::FrameResponseUpdate::getCdrSerializedSize(const ib::sim::lin::idl::FrameResponseUpdate& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += ib::mw::idl::EndpointAddress::getCdrSerializedSize(data.senderAddr(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.frameResponses().size(); ++a)
    {
        current_alignment += ib::sim::lin::idl::FrameResponse::getCdrSerializedSize(data.frameResponses().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void ib::sim::lin::idl::FrameResponseUpdate::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_senderAddr;
    scdr << m_frameResponses;
}

void ib::sim::lin::idl::FrameResponseUpdate::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_senderAddr;
    dcdr >> m_frameResponses;
}

size_t ib::sim::lin::idl::FrameResponseUpdate::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            
     current_align += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_align); 


    return current_align;
}

bool ib::sim::lin::idl::FrameResponseUpdate::isKeyDefined()
{
    return true;
}

void ib::sim::lin::idl::FrameResponseUpdate::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 scdr << m_senderAddr;  
	 
}
ib::sim::lin::idl::ControllerStatusUpdate::ControllerStatusUpdate()
{

    m_timestampNs = 0;

    m_status = ib::sim::lin::idl::Unknown;


}

ib::sim::lin::idl::ControllerStatusUpdate::~ControllerStatusUpdate()
{
}

ib::sim::lin::idl::ControllerStatusUpdate::ControllerStatusUpdate(const ControllerStatusUpdate &x)
{
    m_senderAddr = x.m_senderAddr;
    m_timestampNs = x.m_timestampNs;
    m_status = x.m_status;
}

ib::sim::lin::idl::ControllerStatusUpdate::ControllerStatusUpdate(ControllerStatusUpdate &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_timestampNs = x.m_timestampNs;
    m_status = x.m_status;
}

ib::sim::lin::idl::ControllerStatusUpdate& ib::sim::lin::idl::ControllerStatusUpdate::operator=(const ControllerStatusUpdate &x)
{
    m_senderAddr = x.m_senderAddr;
    m_timestampNs = x.m_timestampNs;
    m_status = x.m_status;

    return *this;
}

ib::sim::lin::idl::ControllerStatusUpdate& ib::sim::lin::idl::ControllerStatusUpdate::operator=(ControllerStatusUpdate &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_timestampNs = x.m_timestampNs;
    m_status = x.m_status;

    return *this;
}

size_t ib::sim::lin::idl::ControllerStatusUpdate::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t ib::sim::lin::idl::ControllerStatusUpdate::getCdrSerializedSize(const ib::sim::lin::idl::ControllerStatusUpdate& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += ib::mw::idl::EndpointAddress::getCdrSerializedSize(data.senderAddr(), current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void ib::sim::lin::idl::ControllerStatusUpdate::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_senderAddr;
    scdr << m_timestampNs;
    scdr << (uint32_t)m_status;
}

void ib::sim::lin::idl::ControllerStatusUpdate::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_senderAddr;
    dcdr >> m_timestampNs;
    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_status = (ib::sim::lin::idl::ControllerStatus)enum_value;
    }
}

size_t ib::sim::lin::idl::ControllerStatusUpdate::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            
     current_align += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_align); 



    return current_align;
}

bool ib::sim::lin::idl::ControllerStatusUpdate::isKeyDefined()
{
    return true;
}

void ib::sim::lin::idl::ControllerStatusUpdate::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 scdr << m_senderAddr;  
	 
	 
}
ib::sim::lin::idl::WakeupPulse::WakeupPulse()
{

    m_timestampNs = 0;


}

ib::sim::lin::idl::WakeupPulse::~WakeupPulse()
{
}

ib::sim::lin::idl::WakeupPulse::WakeupPulse(const WakeupPulse &x)
{
    m_senderAddr = x.m_senderAddr;
    m_timestampNs = x.m_timestampNs;
}

ib::sim::lin::idl::WakeupPulse::WakeupPulse(WakeupPulse &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_timestampNs = x.m_timestampNs;
}

ib::sim::lin::idl::WakeupPulse& ib::sim::lin::idl::WakeupPulse::operator=(const WakeupPulse &x)
{
    m_senderAddr = x.m_senderAddr;
    m_timestampNs = x.m_timestampNs;

    return *this;
}

ib::sim::lin::idl::WakeupPulse& ib::sim::lin::idl::WakeupPulse::operator=(WakeupPulse &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_timestampNs = x.m_timestampNs;

    return *this;
}

size_t ib::sim::lin::idl::WakeupPulse::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

size_t ib::sim::lin::idl::WakeupPulse::getCdrSerializedSize(const ib::sim::lin::idl::WakeupPulse& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += ib::mw::idl::EndpointAddress::getCdrSerializedSize(data.senderAddr(), current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);



    return current_alignment - initial_alignment;
}

void ib::sim::lin::idl::WakeupPulse::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_senderAddr;
    scdr << m_timestampNs;
}

void ib::sim::lin::idl::WakeupPulse::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_senderAddr;
    dcdr >> m_timestampNs;
}

size_t ib::sim::lin::idl::WakeupPulse::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            
     current_align += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_align); 


    return current_align;
}

bool ib::sim::lin::idl::WakeupPulse::isKeyDefined()
{
    return true;
}

void ib::sim::lin::idl::WakeupPulse::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 scdr << m_senderAddr;  
	 
}



