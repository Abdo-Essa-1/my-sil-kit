// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file LinTopics.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _IB_SIM_LIN_IDL_LINTOPICS_H_
#define _IB_SIM_LIN_IDL_LINTOPICS_H_

// TODO Poner en el contexto.
#include "Common.h"

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(LinTopics_SOURCE)
#define LinTopics_DllAPI __declspec( dllexport )
#else
#define LinTopics_DllAPI __declspec( dllimport )
#endif // LinTopics_SOURCE
#else
#define LinTopics_DllAPI
#endif
#else
#define LinTopics_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

namespace ib
{
    namespace sim
    {
        namespace lin
        {
            namespace idl
            {
                typedef uint8_t LinIdT;
                /*!
                 * @brief This class represents the enumeration ChecksumModel defined by the user in the IDL file.
                 * @ingroup LINTOPICS
                 */
                enum ChecksumModel : uint32_t
                {
                    Undefined,
                    Enhanced,
                    Classic
                };
                typedef uint8_t DataLengthT;
                /*!
                 * @brief This class represents the structure Frame defined by the user in the IDL file.
                 * @ingroup LINTOPICS
                 */
                class Frame
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport Frame();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport virtual ~Frame();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::lin::idl::Frame that will be copied.
                     */
                    eProsima_user_DllExport Frame(const Frame &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::lin::idl::Frame that will be copied.
                     */
                    eProsima_user_DllExport Frame(Frame &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::lin::idl::Frame that will be copied.
                     */
                    eProsima_user_DllExport Frame& operator=(const Frame &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::lin::idl::Frame that will be copied.
                     */
                    eProsima_user_DllExport Frame& operator=(Frame &&x);

                    /*!
                     * @brief This function sets a value in member id
                     * @param _id New value for member id
                     */
                    eProsima_user_DllExport void id(ib::sim::lin::idl::LinIdT _id);

                    /*!
                     * @brief This function returns the value of member id
                     * @return Value of member id
                     */
                    eProsima_user_DllExport ib::sim::lin::idl::LinIdT id() const;

                    /*!
                     * @brief This function returns a reference to member id
                     * @return Reference to member id
                     */
                    eProsima_user_DllExport ib::sim::lin::idl::LinIdT& id();
                    /*!
                     * @brief This function sets a value in member checksumModel
                     * @param _checksumModel New value for member checksumModel
                     */
                    eProsima_user_DllExport void checksumModel(ib::sim::lin::idl::ChecksumModel _checksumModel);

                    /*!
                     * @brief This function returns the value of member checksumModel
                     * @return Value of member checksumModel
                     */
                    eProsima_user_DllExport ib::sim::lin::idl::ChecksumModel checksumModel() const;

                    /*!
                     * @brief This function returns a reference to member checksumModel
                     * @return Reference to member checksumModel
                     */
                    eProsima_user_DllExport ib::sim::lin::idl::ChecksumModel& checksumModel();
                    /*!
                     * @brief This function sets a value in member dataLength
                     * @param _dataLength New value for member dataLength
                     */
                    eProsima_user_DllExport void dataLength(ib::sim::lin::idl::DataLengthT _dataLength);

                    /*!
                     * @brief This function returns the value of member dataLength
                     * @return Value of member dataLength
                     */
                    eProsima_user_DllExport ib::sim::lin::idl::DataLengthT dataLength() const;

                    /*!
                     * @brief This function returns a reference to member dataLength
                     * @return Reference to member dataLength
                     */
                    eProsima_user_DllExport ib::sim::lin::idl::DataLengthT& dataLength();
                    /*!
                     * @brief This function copies the value in member data
                     * @param _data New value to be copied in member data
                     */
                    eProsima_user_DllExport void data(const std::array<uint8_t, 8> &_data);

                    /*!
                     * @brief This function moves the value in member data
                     * @param _data New value to be moved in member data
                     */
                    eProsima_user_DllExport void data(std::array<uint8_t, 8> &&_data);

                    /*!
                     * @brief This function returns a constant reference to member data
                     * @return Constant reference to member data
                     */
                    eProsima_user_DllExport const std::array<uint8_t, 8>& data() const;

                    /*!
                     * @brief This function returns a reference to member data
                     * @return Reference to member data
                     */
                    eProsima_user_DllExport std::array<uint8_t, 8>& data();

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::lin::idl::Frame& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::sim::lin::idl::LinIdT m_id;
                    ib::sim::lin::idl::ChecksumModel m_checksumModel;
                    ib::sim::lin::idl::DataLengthT m_dataLength;
                    std::array<uint8_t, 8> m_data;
                };
                /*!
                 * @brief This class represents the enumeration FrameResponseType defined by the user in the IDL file.
                 * @ingroup LINTOPICS
                 */
                enum FrameResponseType : uint32_t
                {
                    MasterResponse,
                    SlaveResponse,
                    SlaveToSlave
                };
                /*!
                 * @brief This class represents the enumeration FrameResponseMode defined by the user in the IDL file.
                 * @ingroup LINTOPICS
                 */
                enum FrameResponseMode : uint32_t
                {
                    Unused,
                    Rx,
                    TxUnconditional
                };
                /*!
                 * @brief This class represents the enumeration FrameStatus defined by the user in the IDL file.
                 * @ingroup LINTOPICS
                 */
                enum FrameStatus : uint32_t
                {
                    NOT_OK,
                    LIN_TX_OK,
                    LIN_TX_BUSY,
                    LIN_TX_HEADER_ERROR,
                    LIN_TX_ERROR,
                    LIN_RX_OK,
                    LIN_RX_BUSY,
                    LIN_RX_ERROR,
                    LIN_RX_NO_RESPONSE
                };
                /*!
                 * @brief This class represents the structure FrameResponse defined by the user in the IDL file.
                 * @ingroup LINTOPICS
                 */
                class FrameResponse
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport FrameResponse();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport virtual ~FrameResponse();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::lin::idl::FrameResponse that will be copied.
                     */
                    eProsima_user_DllExport FrameResponse(const FrameResponse &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::lin::idl::FrameResponse that will be copied.
                     */
                    eProsima_user_DllExport FrameResponse(FrameResponse &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::lin::idl::FrameResponse that will be copied.
                     */
                    eProsima_user_DllExport FrameResponse& operator=(const FrameResponse &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::lin::idl::FrameResponse that will be copied.
                     */
                    eProsima_user_DllExport FrameResponse& operator=(FrameResponse &&x);

                    /*!
                     * @brief This function copies the value in member frame
                     * @param _frame New value to be copied in member frame
                     */
                    eProsima_user_DllExport void frame(const ib::sim::lin::idl::Frame &_frame);

                    /*!
                     * @brief This function moves the value in member frame
                     * @param _frame New value to be moved in member frame
                     */
                    eProsima_user_DllExport void frame(ib::sim::lin::idl::Frame &&_frame);

                    /*!
                     * @brief This function returns a constant reference to member frame
                     * @return Constant reference to member frame
                     */
                    eProsima_user_DllExport const ib::sim::lin::idl::Frame& frame() const;

                    /*!
                     * @brief This function returns a reference to member frame
                     * @return Reference to member frame
                     */
                    eProsima_user_DllExport ib::sim::lin::idl::Frame& frame();
                    /*!
                     * @brief This function sets a value in member responseMode
                     * @param _responseMode New value for member responseMode
                     */
                    eProsima_user_DllExport void responseMode(ib::sim::lin::idl::FrameResponseMode _responseMode);

                    /*!
                     * @brief This function returns the value of member responseMode
                     * @return Value of member responseMode
                     */
                    eProsima_user_DllExport ib::sim::lin::idl::FrameResponseMode responseMode() const;

                    /*!
                     * @brief This function returns a reference to member responseMode
                     * @return Reference to member responseMode
                     */
                    eProsima_user_DllExport ib::sim::lin::idl::FrameResponseMode& responseMode();

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::lin::idl::FrameResponse& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::sim::lin::idl::Frame m_frame;
                    ib::sim::lin::idl::FrameResponseMode m_responseMode;
                };
                /*!
                 * @brief This class represents the enumeration ControllerMode defined by the user in the IDL file.
                 * @ingroup LINTOPICS
                 */
                enum ControllerMode : uint32_t
                {
                    Inactive,
                    Master,
                    Slave
                };
                typedef uint32_t BaudRateT;
                /*!
                 * @brief This class represents the structure ControllerConfig defined by the user in the IDL file.
                 * @ingroup LINTOPICS
                 */
                class ControllerConfig
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport ControllerConfig();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport virtual ~ControllerConfig();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::lin::idl::ControllerConfig that will be copied.
                     */
                    eProsima_user_DllExport ControllerConfig(const ControllerConfig &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::lin::idl::ControllerConfig that will be copied.
                     */
                    eProsima_user_DllExport ControllerConfig(ControllerConfig &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::lin::idl::ControllerConfig that will be copied.
                     */
                    eProsima_user_DllExport ControllerConfig& operator=(const ControllerConfig &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::lin::idl::ControllerConfig that will be copied.
                     */
                    eProsima_user_DllExport ControllerConfig& operator=(ControllerConfig &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr);

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr);

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const;

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr();
                    /*!
                     * @brief This function sets a value in member controllerMode
                     * @param _controllerMode New value for member controllerMode
                     */
                    eProsima_user_DllExport void controllerMode(ib::sim::lin::idl::ControllerMode _controllerMode);

                    /*!
                     * @brief This function returns the value of member controllerMode
                     * @return Value of member controllerMode
                     */
                    eProsima_user_DllExport ib::sim::lin::idl::ControllerMode controllerMode() const;

                    /*!
                     * @brief This function returns a reference to member controllerMode
                     * @return Reference to member controllerMode
                     */
                    eProsima_user_DllExport ib::sim::lin::idl::ControllerMode& controllerMode();
                    /*!
                     * @brief This function sets a value in member baudRate
                     * @param _baudRate New value for member baudRate
                     */
                    eProsima_user_DllExport void baudRate(ib::sim::lin::idl::BaudRateT _baudRate);

                    /*!
                     * @brief This function returns the value of member baudRate
                     * @return Value of member baudRate
                     */
                    eProsima_user_DllExport ib::sim::lin::idl::BaudRateT baudRate() const;

                    /*!
                     * @brief This function returns a reference to member baudRate
                     * @return Reference to member baudRate
                     */
                    eProsima_user_DllExport ib::sim::lin::idl::BaudRateT& baudRate();
                    /*!
                     * @brief This function copies the value in member frameResponses
                     * @param _frameResponses New value to be copied in member frameResponses
                     */
                    eProsima_user_DllExport void frameResponses(const std::vector<ib::sim::lin::idl::FrameResponse> &_frameResponses);

                    /*!
                     * @brief This function moves the value in member frameResponses
                     * @param _frameResponses New value to be moved in member frameResponses
                     */
                    eProsima_user_DllExport void frameResponses(std::vector<ib::sim::lin::idl::FrameResponse> &&_frameResponses);

                    /*!
                     * @brief This function returns a constant reference to member frameResponses
                     * @return Constant reference to member frameResponses
                     */
                    eProsima_user_DllExport const std::vector<ib::sim::lin::idl::FrameResponse>& frameResponses() const;

                    /*!
                     * @brief This function returns a reference to member frameResponses
                     * @return Reference to member frameResponses
                     */
                    eProsima_user_DllExport std::vector<ib::sim::lin::idl::FrameResponse>& frameResponses();

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::lin::idl::ControllerConfig& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    ib::sim::lin::idl::ControllerMode m_controllerMode;
                    ib::sim::lin::idl::BaudRateT m_baudRate;
                    std::vector<ib::sim::lin::idl::FrameResponse> m_frameResponses;
                };
                /*!
                 * @brief This class represents the enumeration ControllerStatus defined by the user in the IDL file.
                 * @ingroup LINTOPICS
                 */
                enum ControllerStatus : uint32_t
                {
                    Unknown,
                    Operational,
                    Sleep,
                    SleepPending
                };
                /*!
                 * @brief This class represents the structure Transmission defined by the user in the IDL file.
                 * @ingroup LINTOPICS
                 */
                class Transmission
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport Transmission();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport virtual ~Transmission();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::lin::idl::Transmission that will be copied.
                     */
                    eProsima_user_DllExport Transmission(const Transmission &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::lin::idl::Transmission that will be copied.
                     */
                    eProsima_user_DllExport Transmission(Transmission &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::lin::idl::Transmission that will be copied.
                     */
                    eProsima_user_DllExport Transmission& operator=(const Transmission &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::lin::idl::Transmission that will be copied.
                     */
                    eProsima_user_DllExport Transmission& operator=(Transmission &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr);

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr);

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const;

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr();
                    /*!
                     * @brief This function sets a value in member timestampNs
                     * @param _timestampNs New value for member timestampNs
                     */
                    eProsima_user_DllExport void timestampNs(int64_t _timestampNs);

                    /*!
                     * @brief This function returns the value of member timestampNs
                     * @return Value of member timestampNs
                     */
                    eProsima_user_DllExport int64_t timestampNs() const;

                    /*!
                     * @brief This function returns a reference to member timestampNs
                     * @return Reference to member timestampNs
                     */
                    eProsima_user_DllExport int64_t& timestampNs();
                    /*!
                     * @brief This function copies the value in member frame
                     * @param _frame New value to be copied in member frame
                     */
                    eProsima_user_DllExport void frame(const ib::sim::lin::idl::Frame &_frame);

                    /*!
                     * @brief This function moves the value in member frame
                     * @param _frame New value to be moved in member frame
                     */
                    eProsima_user_DllExport void frame(ib::sim::lin::idl::Frame &&_frame);

                    /*!
                     * @brief This function returns a constant reference to member frame
                     * @return Constant reference to member frame
                     */
                    eProsima_user_DllExport const ib::sim::lin::idl::Frame& frame() const;

                    /*!
                     * @brief This function returns a reference to member frame
                     * @return Reference to member frame
                     */
                    eProsima_user_DllExport ib::sim::lin::idl::Frame& frame();
                    /*!
                     * @brief This function sets a value in member status
                     * @param _status New value for member status
                     */
                    eProsima_user_DllExport void status(ib::sim::lin::idl::FrameStatus _status);

                    /*!
                     * @brief This function returns the value of member status
                     * @return Value of member status
                     */
                    eProsima_user_DllExport ib::sim::lin::idl::FrameStatus status() const;

                    /*!
                     * @brief This function returns a reference to member status
                     * @return Reference to member status
                     */
                    eProsima_user_DllExport ib::sim::lin::idl::FrameStatus& status();

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::lin::idl::Transmission& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    int64_t m_timestampNs;
                    ib::sim::lin::idl::Frame m_frame;
                    ib::sim::lin::idl::FrameStatus m_status;
                };
                /*!
                 * @brief This class represents the structure SendFrameRequest defined by the user in the IDL file.
                 * @ingroup LINTOPICS
                 */
                class SendFrameRequest
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport SendFrameRequest();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport virtual ~SendFrameRequest();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::lin::idl::SendFrameRequest that will be copied.
                     */
                    eProsima_user_DllExport SendFrameRequest(const SendFrameRequest &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::lin::idl::SendFrameRequest that will be copied.
                     */
                    eProsima_user_DllExport SendFrameRequest(SendFrameRequest &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::lin::idl::SendFrameRequest that will be copied.
                     */
                    eProsima_user_DllExport SendFrameRequest& operator=(const SendFrameRequest &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::lin::idl::SendFrameRequest that will be copied.
                     */
                    eProsima_user_DllExport SendFrameRequest& operator=(SendFrameRequest &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr);

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr);

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const;

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr();
                    /*!
                     * @brief This function copies the value in member frame
                     * @param _frame New value to be copied in member frame
                     */
                    eProsima_user_DllExport void frame(const ib::sim::lin::idl::Frame &_frame);

                    /*!
                     * @brief This function moves the value in member frame
                     * @param _frame New value to be moved in member frame
                     */
                    eProsima_user_DllExport void frame(ib::sim::lin::idl::Frame &&_frame);

                    /*!
                     * @brief This function returns a constant reference to member frame
                     * @return Constant reference to member frame
                     */
                    eProsima_user_DllExport const ib::sim::lin::idl::Frame& frame() const;

                    /*!
                     * @brief This function returns a reference to member frame
                     * @return Reference to member frame
                     */
                    eProsima_user_DllExport ib::sim::lin::idl::Frame& frame();
                    /*!
                     * @brief This function sets a value in member responseType
                     * @param _responseType New value for member responseType
                     */
                    eProsima_user_DllExport void responseType(ib::sim::lin::idl::FrameResponseType _responseType);

                    /*!
                     * @brief This function returns the value of member responseType
                     * @return Value of member responseType
                     */
                    eProsima_user_DllExport ib::sim::lin::idl::FrameResponseType responseType() const;

                    /*!
                     * @brief This function returns a reference to member responseType
                     * @return Reference to member responseType
                     */
                    eProsima_user_DllExport ib::sim::lin::idl::FrameResponseType& responseType();

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::lin::idl::SendFrameRequest& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    ib::sim::lin::idl::Frame m_frame;
                    ib::sim::lin::idl::FrameResponseType m_responseType;
                };
                /*!
                 * @brief This class represents the structure SendFrameHeaderRequest defined by the user in the IDL file.
                 * @ingroup LINTOPICS
                 */
                class SendFrameHeaderRequest
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport SendFrameHeaderRequest();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport virtual ~SendFrameHeaderRequest();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::lin::idl::SendFrameHeaderRequest that will be copied.
                     */
                    eProsima_user_DllExport SendFrameHeaderRequest(const SendFrameHeaderRequest &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::lin::idl::SendFrameHeaderRequest that will be copied.
                     */
                    eProsima_user_DllExport SendFrameHeaderRequest(SendFrameHeaderRequest &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::lin::idl::SendFrameHeaderRequest that will be copied.
                     */
                    eProsima_user_DllExport SendFrameHeaderRequest& operator=(const SendFrameHeaderRequest &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::lin::idl::SendFrameHeaderRequest that will be copied.
                     */
                    eProsima_user_DllExport SendFrameHeaderRequest& operator=(SendFrameHeaderRequest &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr);

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr);

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const;

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr();
                    /*!
                     * @brief This function sets a value in member id
                     * @param _id New value for member id
                     */
                    eProsima_user_DllExport void id(ib::sim::lin::idl::LinIdT _id);

                    /*!
                     * @brief This function returns the value of member id
                     * @return Value of member id
                     */
                    eProsima_user_DllExport ib::sim::lin::idl::LinIdT id() const;

                    /*!
                     * @brief This function returns a reference to member id
                     * @return Reference to member id
                     */
                    eProsima_user_DllExport ib::sim::lin::idl::LinIdT& id();

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::lin::idl::SendFrameHeaderRequest& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    ib::sim::lin::idl::LinIdT m_id;
                };
                /*!
                 * @brief This class represents the structure FrameResponseUpdate defined by the user in the IDL file.
                 * @ingroup LINTOPICS
                 */
                class FrameResponseUpdate
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport FrameResponseUpdate();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport virtual ~FrameResponseUpdate();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::lin::idl::FrameResponseUpdate that will be copied.
                     */
                    eProsima_user_DllExport FrameResponseUpdate(const FrameResponseUpdate &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::lin::idl::FrameResponseUpdate that will be copied.
                     */
                    eProsima_user_DllExport FrameResponseUpdate(FrameResponseUpdate &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::lin::idl::FrameResponseUpdate that will be copied.
                     */
                    eProsima_user_DllExport FrameResponseUpdate& operator=(const FrameResponseUpdate &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::lin::idl::FrameResponseUpdate that will be copied.
                     */
                    eProsima_user_DllExport FrameResponseUpdate& operator=(FrameResponseUpdate &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr);

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr);

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const;

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr();
                    /*!
                     * @brief This function copies the value in member frameResponses
                     * @param _frameResponses New value to be copied in member frameResponses
                     */
                    eProsima_user_DllExport void frameResponses(const std::vector<ib::sim::lin::idl::FrameResponse> &_frameResponses);

                    /*!
                     * @brief This function moves the value in member frameResponses
                     * @param _frameResponses New value to be moved in member frameResponses
                     */
                    eProsima_user_DllExport void frameResponses(std::vector<ib::sim::lin::idl::FrameResponse> &&_frameResponses);

                    /*!
                     * @brief This function returns a constant reference to member frameResponses
                     * @return Constant reference to member frameResponses
                     */
                    eProsima_user_DllExport const std::vector<ib::sim::lin::idl::FrameResponse>& frameResponses() const;

                    /*!
                     * @brief This function returns a reference to member frameResponses
                     * @return Reference to member frameResponses
                     */
                    eProsima_user_DllExport std::vector<ib::sim::lin::idl::FrameResponse>& frameResponses();

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::lin::idl::FrameResponseUpdate& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    std::vector<ib::sim::lin::idl::FrameResponse> m_frameResponses;
                };
                /*!
                 * @brief This class represents the structure ControllerStatusUpdate defined by the user in the IDL file.
                 * @ingroup LINTOPICS
                 */
                class ControllerStatusUpdate
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport ControllerStatusUpdate();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport virtual ~ControllerStatusUpdate();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::lin::idl::ControllerStatusUpdate that will be copied.
                     */
                    eProsima_user_DllExport ControllerStatusUpdate(const ControllerStatusUpdate &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::lin::idl::ControllerStatusUpdate that will be copied.
                     */
                    eProsima_user_DllExport ControllerStatusUpdate(ControllerStatusUpdate &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::lin::idl::ControllerStatusUpdate that will be copied.
                     */
                    eProsima_user_DllExport ControllerStatusUpdate& operator=(const ControllerStatusUpdate &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::lin::idl::ControllerStatusUpdate that will be copied.
                     */
                    eProsima_user_DllExport ControllerStatusUpdate& operator=(ControllerStatusUpdate &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr);

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr);

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const;

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr();
                    /*!
                     * @brief This function sets a value in member timestampNs
                     * @param _timestampNs New value for member timestampNs
                     */
                    eProsima_user_DllExport void timestampNs(int64_t _timestampNs);

                    /*!
                     * @brief This function returns the value of member timestampNs
                     * @return Value of member timestampNs
                     */
                    eProsima_user_DllExport int64_t timestampNs() const;

                    /*!
                     * @brief This function returns a reference to member timestampNs
                     * @return Reference to member timestampNs
                     */
                    eProsima_user_DllExport int64_t& timestampNs();
                    /*!
                     * @brief This function sets a value in member status
                     * @param _status New value for member status
                     */
                    eProsima_user_DllExport void status(ib::sim::lin::idl::ControllerStatus _status);

                    /*!
                     * @brief This function returns the value of member status
                     * @return Value of member status
                     */
                    eProsima_user_DllExport ib::sim::lin::idl::ControllerStatus status() const;

                    /*!
                     * @brief This function returns a reference to member status
                     * @return Reference to member status
                     */
                    eProsima_user_DllExport ib::sim::lin::idl::ControllerStatus& status();

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::lin::idl::ControllerStatusUpdate& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    int64_t m_timestampNs;
                    ib::sim::lin::idl::ControllerStatus m_status;
                };
                /*!
                 * @brief This class represents the structure WakeupPulse defined by the user in the IDL file.
                 * @ingroup LINTOPICS
                 */
                class WakeupPulse
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport WakeupPulse();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport virtual ~WakeupPulse();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::lin::idl::WakeupPulse that will be copied.
                     */
                    eProsima_user_DllExport WakeupPulse(const WakeupPulse &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::lin::idl::WakeupPulse that will be copied.
                     */
                    eProsima_user_DllExport WakeupPulse(WakeupPulse &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::lin::idl::WakeupPulse that will be copied.
                     */
                    eProsima_user_DllExport WakeupPulse& operator=(const WakeupPulse &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::lin::idl::WakeupPulse that will be copied.
                     */
                    eProsima_user_DllExport WakeupPulse& operator=(WakeupPulse &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr);

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr);

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const;

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr();
                    /*!
                     * @brief This function sets a value in member timestampNs
                     * @param _timestampNs New value for member timestampNs
                     */
                    eProsima_user_DllExport void timestampNs(int64_t _timestampNs);

                    /*!
                     * @brief This function returns the value of member timestampNs
                     * @return Value of member timestampNs
                     */
                    eProsima_user_DllExport int64_t timestampNs() const;

                    /*!
                     * @brief This function returns a reference to member timestampNs
                     * @return Reference to member timestampNs
                     */
                    eProsima_user_DllExport int64_t& timestampNs();

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::lin::idl::WakeupPulse& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    int64_t m_timestampNs;
                };
            }
        }
    }
}

#endif // _IB_SIM_LIN_IDL_LINTOPICS_H_