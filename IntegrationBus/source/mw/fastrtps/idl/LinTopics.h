// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file LinTopics.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _IB_SIM_LIN_IDL_LINTOPICS_H_
#define _IB_SIM_LIN_IDL_LINTOPICS_H_

// TODO Poner en el contexto.
#include "Common.h"

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(LinTopics_SOURCE)
#define LinTopics_DllAPI __declspec( dllexport )
#else
#define LinTopics_DllAPI __declspec( dllimport )
#endif // LinTopics_SOURCE
#else
#define LinTopics_DllAPI
#endif
#else
#define LinTopics_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

namespace ib
{
    namespace sim
    {
        namespace lin
        {
            namespace idl
            {
                typedef uint8_t LinId;
                /*!
                 * @brief This class represents the enumeration ChecksumModel defined by the user in the IDL file.
                 * @ingroup LINTOPICS
                 */
                enum ChecksumModel : uint32_t
                {
                    Undefined,
                    Enhanced,
                    Classic
                };
                /*!
                 * @brief This class represents the enumeration ResponseMode defined by the user in the IDL file.
                 * @ingroup LINTOPICS
                 */
                enum ResponseMode : uint32_t
                {
                    Unused,
                    Rx,
                    TxUnconditional
                };
                /*!
                 * @brief This class represents the enumeration MessageStatus defined by the user in the IDL file.
                 * @ingroup LINTOPICS
                 */
                enum MessageStatus : uint32_t
                {
                    TxSuccess,
                    RxSuccess,
                    TxResponseError,
                    RxResponseError,
                    RxNoResponse,
                    HeaderError,
                    Canceled,
                    Busy
                };
                /*!
                 * @brief This class represents the structure LinMessage defined by the user in the IDL file.
                 * @ingroup LINTOPICS
                 */
                class LinMessage
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport LinMessage();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~LinMessage();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::lin::idl::LinMessage that will be copied.
                     */
                    eProsima_user_DllExport LinMessage(const LinMessage &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::lin::idl::LinMessage that will be copied.
                     */
                    eProsima_user_DllExport LinMessage(LinMessage &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::lin::idl::LinMessage that will be copied.
                     */
                    eProsima_user_DllExport LinMessage& operator=(const LinMessage &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::lin::idl::LinMessage that will be copied.
                     */
                    eProsima_user_DllExport LinMessage& operator=(LinMessage &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
                    {
                        m_senderAddr = _senderAddr;
                    }

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
                    {
                        m_senderAddr = std::move(_senderAddr);
                    }

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    inline eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const
                    {
                        return m_senderAddr;
                    }

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    inline eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr()
                    {
                        return m_senderAddr;
                    }
                    /*!
                     * @brief This function sets a value in member status
                     * @param _status New value for member status
                     */
                    inline eProsima_user_DllExport void status(ib::sim::lin::idl::MessageStatus _status)
                    {
                        m_status = _status;
                    }

                    /*!
                     * @brief This function returns the value of member status
                     * @return Value of member status
                     */
                    inline eProsima_user_DllExport ib::sim::lin::idl::MessageStatus status() const
                    {
                        return m_status;
                    }

                    /*!
                     * @brief This function returns a reference to member status
                     * @return Reference to member status
                     */
                    inline eProsima_user_DllExport ib::sim::lin::idl::MessageStatus& status()
                    {
                        return m_status;
                    }
                    /*!
                     * @brief This function sets a value in member timestamp
                     * @param _timestamp New value for member timestamp
                     */
                    inline eProsima_user_DllExport void timestamp(int64_t _timestamp)
                    {
                        m_timestamp = _timestamp;
                    }

                    /*!
                     * @brief This function returns the value of member timestamp
                     * @return Value of member timestamp
                     */
                    inline eProsima_user_DllExport int64_t timestamp() const
                    {
                        return m_timestamp;
                    }

                    /*!
                     * @brief This function returns a reference to member timestamp
                     * @return Reference to member timestamp
                     */
                    inline eProsima_user_DllExport int64_t& timestamp()
                    {
                        return m_timestamp;
                    }
                    /*!
                     * @brief This function sets a value in member linId
                     * @param _linId New value for member linId
                     */
                    inline eProsima_user_DllExport void linId(ib::sim::lin::idl::LinId _linId)
                    {
                        m_linId = _linId;
                    }

                    /*!
                     * @brief This function returns the value of member linId
                     * @return Value of member linId
                     */
                    inline eProsima_user_DllExport ib::sim::lin::idl::LinId linId() const
                    {
                        return m_linId;
                    }

                    /*!
                     * @brief This function returns a reference to member linId
                     * @return Reference to member linId
                     */
                    inline eProsima_user_DllExport ib::sim::lin::idl::LinId& linId()
                    {
                        return m_linId;
                    }
                    /*!
                     * @brief This function sets a value in member payloadLength
                     * @param _payloadLength New value for member payloadLength
                     */
                    inline eProsima_user_DllExport void payloadLength(uint8_t _payloadLength)
                    {
                        m_payloadLength = _payloadLength;
                    }

                    /*!
                     * @brief This function returns the value of member payloadLength
                     * @return Value of member payloadLength
                     */
                    inline eProsima_user_DllExport uint8_t payloadLength() const
                    {
                        return m_payloadLength;
                    }

                    /*!
                     * @brief This function returns a reference to member payloadLength
                     * @return Reference to member payloadLength
                     */
                    inline eProsima_user_DllExport uint8_t& payloadLength()
                    {
                        return m_payloadLength;
                    }
                    /*!
                     * @brief This function copies the value in member payload
                     * @param _payload New value to be copied in member payload
                     */
                    inline eProsima_user_DllExport void payload(const std::array<uint8_t, 8> &_payload)
                    {
                        m_payload = _payload;
                    }

                    /*!
                     * @brief This function moves the value in member payload
                     * @param _payload New value to be moved in member payload
                     */
                    inline eProsima_user_DllExport void payload(std::array<uint8_t, 8> &&_payload)
                    {
                        m_payload = std::move(_payload);
                    }

                    /*!
                     * @brief This function returns a constant reference to member payload
                     * @return Constant reference to member payload
                     */
                    inline eProsima_user_DllExport const std::array<uint8_t, 8>& payload() const
                    {
                        return m_payload;
                    }

                    /*!
                     * @brief This function returns a reference to member payload
                     * @return Reference to member payload
                     */
                    inline eProsima_user_DllExport std::array<uint8_t, 8>& payload()
                    {
                        return m_payload;
                    }
                    /*!
                     * @brief This function sets a value in member checksumModel
                     * @param _checksumModel New value for member checksumModel
                     */
                    inline eProsima_user_DllExport void checksumModel(ib::sim::lin::idl::ChecksumModel _checksumModel)
                    {
                        m_checksumModel = _checksumModel;
                    }

                    /*!
                     * @brief This function returns the value of member checksumModel
                     * @return Value of member checksumModel
                     */
                    inline eProsima_user_DllExport ib::sim::lin::idl::ChecksumModel checksumModel() const
                    {
                        return m_checksumModel;
                    }

                    /*!
                     * @brief This function returns a reference to member checksumModel
                     * @return Reference to member checksumModel
                     */
                    inline eProsima_user_DllExport ib::sim::lin::idl::ChecksumModel& checksumModel()
                    {
                        return m_checksumModel;
                    }

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::lin::idl::LinMessage& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    ib::sim::lin::idl::MessageStatus m_status;
                    int64_t m_timestamp;
                    ib::sim::lin::idl::LinId m_linId;
                    uint8_t m_payloadLength;
                    std::array<uint8_t, 8> m_payload;
                    ib::sim::lin::idl::ChecksumModel m_checksumModel;
                };
                /*!
                 * @brief This class represents the structure RxRequest defined by the user in the IDL file.
                 * @ingroup LINTOPICS
                 */
                class RxRequest
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport RxRequest();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~RxRequest();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::lin::idl::RxRequest that will be copied.
                     */
                    eProsima_user_DllExport RxRequest(const RxRequest &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::lin::idl::RxRequest that will be copied.
                     */
                    eProsima_user_DllExport RxRequest(RxRequest &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::lin::idl::RxRequest that will be copied.
                     */
                    eProsima_user_DllExport RxRequest& operator=(const RxRequest &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::lin::idl::RxRequest that will be copied.
                     */
                    eProsima_user_DllExport RxRequest& operator=(RxRequest &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
                    {
                        m_senderAddr = _senderAddr;
                    }

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
                    {
                        m_senderAddr = std::move(_senderAddr);
                    }

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    inline eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const
                    {
                        return m_senderAddr;
                    }

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    inline eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr()
                    {
                        return m_senderAddr;
                    }
                    /*!
                     * @brief This function sets a value in member linId
                     * @param _linId New value for member linId
                     */
                    inline eProsima_user_DllExport void linId(ib::sim::lin::idl::LinId _linId)
                    {
                        m_linId = _linId;
                    }

                    /*!
                     * @brief This function returns the value of member linId
                     * @return Value of member linId
                     */
                    inline eProsima_user_DllExport ib::sim::lin::idl::LinId linId() const
                    {
                        return m_linId;
                    }

                    /*!
                     * @brief This function returns a reference to member linId
                     * @return Reference to member linId
                     */
                    inline eProsima_user_DllExport ib::sim::lin::idl::LinId& linId()
                    {
                        return m_linId;
                    }
                    /*!
                     * @brief This function sets a value in member payloadLength
                     * @param _payloadLength New value for member payloadLength
                     */
                    inline eProsima_user_DllExport void payloadLength(uint8_t _payloadLength)
                    {
                        m_payloadLength = _payloadLength;
                    }

                    /*!
                     * @brief This function returns the value of member payloadLength
                     * @return Value of member payloadLength
                     */
                    inline eProsima_user_DllExport uint8_t payloadLength() const
                    {
                        return m_payloadLength;
                    }

                    /*!
                     * @brief This function returns a reference to member payloadLength
                     * @return Reference to member payloadLength
                     */
                    inline eProsima_user_DllExport uint8_t& payloadLength()
                    {
                        return m_payloadLength;
                    }
                    /*!
                     * @brief This function sets a value in member checksumModel
                     * @param _checksumModel New value for member checksumModel
                     */
                    inline eProsima_user_DllExport void checksumModel(ib::sim::lin::idl::ChecksumModel _checksumModel)
                    {
                        m_checksumModel = _checksumModel;
                    }

                    /*!
                     * @brief This function returns the value of member checksumModel
                     * @return Value of member checksumModel
                     */
                    inline eProsima_user_DllExport ib::sim::lin::idl::ChecksumModel checksumModel() const
                    {
                        return m_checksumModel;
                    }

                    /*!
                     * @brief This function returns a reference to member checksumModel
                     * @return Reference to member checksumModel
                     */
                    inline eProsima_user_DllExport ib::sim::lin::idl::ChecksumModel& checksumModel()
                    {
                        return m_checksumModel;
                    }

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::lin::idl::RxRequest& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    ib::sim::lin::idl::LinId m_linId;
                    uint8_t m_payloadLength;
                    ib::sim::lin::idl::ChecksumModel m_checksumModel;
                };
                /*!
                 * @brief This class represents the structure TxAcknowledge defined by the user in the IDL file.
                 * @ingroup LINTOPICS
                 */
                class TxAcknowledge
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport TxAcknowledge();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~TxAcknowledge();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::lin::idl::TxAcknowledge that will be copied.
                     */
                    eProsima_user_DllExport TxAcknowledge(const TxAcknowledge &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::lin::idl::TxAcknowledge that will be copied.
                     */
                    eProsima_user_DllExport TxAcknowledge(TxAcknowledge &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::lin::idl::TxAcknowledge that will be copied.
                     */
                    eProsima_user_DllExport TxAcknowledge& operator=(const TxAcknowledge &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::lin::idl::TxAcknowledge that will be copied.
                     */
                    eProsima_user_DllExport TxAcknowledge& operator=(TxAcknowledge &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
                    {
                        m_senderAddr = _senderAddr;
                    }

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
                    {
                        m_senderAddr = std::move(_senderAddr);
                    }

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    inline eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const
                    {
                        return m_senderAddr;
                    }

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    inline eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr()
                    {
                        return m_senderAddr;
                    }
                    /*!
                     * @brief This function sets a value in member timestamp
                     * @param _timestamp New value for member timestamp
                     */
                    inline eProsima_user_DllExport void timestamp(int64_t _timestamp)
                    {
                        m_timestamp = _timestamp;
                    }

                    /*!
                     * @brief This function returns the value of member timestamp
                     * @return Value of member timestamp
                     */
                    inline eProsima_user_DllExport int64_t timestamp() const
                    {
                        return m_timestamp;
                    }

                    /*!
                     * @brief This function returns a reference to member timestamp
                     * @return Reference to member timestamp
                     */
                    inline eProsima_user_DllExport int64_t& timestamp()
                    {
                        return m_timestamp;
                    }
                    /*!
                     * @brief This function sets a value in member linId
                     * @param _linId New value for member linId
                     */
                    inline eProsima_user_DllExport void linId(ib::sim::lin::idl::LinId _linId)
                    {
                        m_linId = _linId;
                    }

                    /*!
                     * @brief This function returns the value of member linId
                     * @return Value of member linId
                     */
                    inline eProsima_user_DllExport ib::sim::lin::idl::LinId linId() const
                    {
                        return m_linId;
                    }

                    /*!
                     * @brief This function returns a reference to member linId
                     * @return Reference to member linId
                     */
                    inline eProsima_user_DllExport ib::sim::lin::idl::LinId& linId()
                    {
                        return m_linId;
                    }
                    /*!
                     * @brief This function sets a value in member status
                     * @param _status New value for member status
                     */
                    inline eProsima_user_DllExport void status(ib::sim::lin::idl::MessageStatus _status)
                    {
                        m_status = _status;
                    }

                    /*!
                     * @brief This function returns the value of member status
                     * @return Value of member status
                     */
                    inline eProsima_user_DllExport ib::sim::lin::idl::MessageStatus status() const
                    {
                        return m_status;
                    }

                    /*!
                     * @brief This function returns a reference to member status
                     * @return Reference to member status
                     */
                    inline eProsima_user_DllExport ib::sim::lin::idl::MessageStatus& status()
                    {
                        return m_status;
                    }

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::lin::idl::TxAcknowledge& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    int64_t m_timestamp;
                    ib::sim::lin::idl::LinId m_linId;
                    ib::sim::lin::idl::MessageStatus m_status;
                };
                /*!
                 * @brief This class represents the enumeration ControllerMode defined by the user in the IDL file.
                 * @ingroup LINTOPICS
                 */
                enum ControllerMode : uint32_t
                {
                    Inactive,
                    Master,
                    Slave
                };
                /*!
                 * @brief This class represents the structure ControllerConfig defined by the user in the IDL file.
                 * @ingroup LINTOPICS
                 */
                class ControllerConfig
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport ControllerConfig();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~ControllerConfig();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::lin::idl::ControllerConfig that will be copied.
                     */
                    eProsima_user_DllExport ControllerConfig(const ControllerConfig &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::lin::idl::ControllerConfig that will be copied.
                     */
                    eProsima_user_DllExport ControllerConfig(ControllerConfig &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::lin::idl::ControllerConfig that will be copied.
                     */
                    eProsima_user_DllExport ControllerConfig& operator=(const ControllerConfig &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::lin::idl::ControllerConfig that will be copied.
                     */
                    eProsima_user_DllExport ControllerConfig& operator=(ControllerConfig &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
                    {
                        m_senderAddr = _senderAddr;
                    }

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
                    {
                        m_senderAddr = std::move(_senderAddr);
                    }

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    inline eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const
                    {
                        return m_senderAddr;
                    }

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    inline eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr()
                    {
                        return m_senderAddr;
                    }
                    /*!
                     * @brief This function sets a value in member controllerMode
                     * @param _controllerMode New value for member controllerMode
                     */
                    inline eProsima_user_DllExport void controllerMode(ib::sim::lin::idl::ControllerMode _controllerMode)
                    {
                        m_controllerMode = _controllerMode;
                    }

                    /*!
                     * @brief This function returns the value of member controllerMode
                     * @return Value of member controllerMode
                     */
                    inline eProsima_user_DllExport ib::sim::lin::idl::ControllerMode controllerMode() const
                    {
                        return m_controllerMode;
                    }

                    /*!
                     * @brief This function returns a reference to member controllerMode
                     * @return Reference to member controllerMode
                     */
                    inline eProsima_user_DllExport ib::sim::lin::idl::ControllerMode& controllerMode()
                    {
                        return m_controllerMode;
                    }
                    /*!
                     * @brief This function sets a value in member baudrate
                     * @param _baudrate New value for member baudrate
                     */
                    inline eProsima_user_DllExport void baudrate(uint32_t _baudrate)
                    {
                        m_baudrate = _baudrate;
                    }

                    /*!
                     * @brief This function returns the value of member baudrate
                     * @return Value of member baudrate
                     */
                    inline eProsima_user_DllExport uint32_t baudrate() const
                    {
                        return m_baudrate;
                    }

                    /*!
                     * @brief This function returns a reference to member baudrate
                     * @return Reference to member baudrate
                     */
                    inline eProsima_user_DllExport uint32_t& baudrate()
                    {
                        return m_baudrate;
                    }

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::lin::idl::ControllerConfig& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    ib::sim::lin::idl::ControllerMode m_controllerMode;
                    uint32_t m_baudrate;
                };
                /*!
                 * @brief This class represents the structure SlaveResponseConfig defined by the user in the IDL file.
                 * @ingroup LINTOPICS
                 */
                class SlaveResponseConfig
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport SlaveResponseConfig();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~SlaveResponseConfig();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::lin::idl::SlaveResponseConfig that will be copied.
                     */
                    eProsima_user_DllExport SlaveResponseConfig(const SlaveResponseConfig &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::lin::idl::SlaveResponseConfig that will be copied.
                     */
                    eProsima_user_DllExport SlaveResponseConfig(SlaveResponseConfig &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::lin::idl::SlaveResponseConfig that will be copied.
                     */
                    eProsima_user_DllExport SlaveResponseConfig& operator=(const SlaveResponseConfig &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::lin::idl::SlaveResponseConfig that will be copied.
                     */
                    eProsima_user_DllExport SlaveResponseConfig& operator=(SlaveResponseConfig &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
                    {
                        m_senderAddr = _senderAddr;
                    }

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
                    {
                        m_senderAddr = std::move(_senderAddr);
                    }

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    inline eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const
                    {
                        return m_senderAddr;
                    }

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    inline eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr()
                    {
                        return m_senderAddr;
                    }
                    /*!
                     * @brief This function sets a value in member responseMode
                     * @param _responseMode New value for member responseMode
                     */
                    inline eProsima_user_DllExport void responseMode(ib::sim::lin::idl::ResponseMode _responseMode)
                    {
                        m_responseMode = _responseMode;
                    }

                    /*!
                     * @brief This function returns the value of member responseMode
                     * @return Value of member responseMode
                     */
                    inline eProsima_user_DllExport ib::sim::lin::idl::ResponseMode responseMode() const
                    {
                        return m_responseMode;
                    }

                    /*!
                     * @brief This function returns a reference to member responseMode
                     * @return Reference to member responseMode
                     */
                    inline eProsima_user_DllExport ib::sim::lin::idl::ResponseMode& responseMode()
                    {
                        return m_responseMode;
                    }
                    /*!
                     * @brief This function sets a value in member checksumModel
                     * @param _checksumModel New value for member checksumModel
                     */
                    inline eProsima_user_DllExport void checksumModel(ib::sim::lin::idl::ChecksumModel _checksumModel)
                    {
                        m_checksumModel = _checksumModel;
                    }

                    /*!
                     * @brief This function returns the value of member checksumModel
                     * @return Value of member checksumModel
                     */
                    inline eProsima_user_DllExport ib::sim::lin::idl::ChecksumModel checksumModel() const
                    {
                        return m_checksumModel;
                    }

                    /*!
                     * @brief This function returns a reference to member checksumModel
                     * @return Reference to member checksumModel
                     */
                    inline eProsima_user_DllExport ib::sim::lin::idl::ChecksumModel& checksumModel()
                    {
                        return m_checksumModel;
                    }
                    /*!
                     * @brief This function sets a value in member payloadLength
                     * @param _payloadLength New value for member payloadLength
                     */
                    inline eProsima_user_DllExport void payloadLength(uint8_t _payloadLength)
                    {
                        m_payloadLength = _payloadLength;
                    }

                    /*!
                     * @brief This function returns the value of member payloadLength
                     * @return Value of member payloadLength
                     */
                    inline eProsima_user_DllExport uint8_t payloadLength() const
                    {
                        return m_payloadLength;
                    }

                    /*!
                     * @brief This function returns a reference to member payloadLength
                     * @return Reference to member payloadLength
                     */
                    inline eProsima_user_DllExport uint8_t& payloadLength()
                    {
                        return m_payloadLength;
                    }

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::lin::idl::SlaveResponseConfig& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    ib::sim::lin::idl::ResponseMode m_responseMode;
                    ib::sim::lin::idl::ChecksumModel m_checksumModel;
                    uint8_t m_payloadLength;
                };
                /*!
                 * @brief This class represents the structure SlaveConfiguration defined by the user in the IDL file.
                 * @ingroup LINTOPICS
                 */
                class SlaveConfiguration
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport SlaveConfiguration();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~SlaveConfiguration();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::lin::idl::SlaveConfiguration that will be copied.
                     */
                    eProsima_user_DllExport SlaveConfiguration(const SlaveConfiguration &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::lin::idl::SlaveConfiguration that will be copied.
                     */
                    eProsima_user_DllExport SlaveConfiguration(SlaveConfiguration &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::lin::idl::SlaveConfiguration that will be copied.
                     */
                    eProsima_user_DllExport SlaveConfiguration& operator=(const SlaveConfiguration &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::lin::idl::SlaveConfiguration that will be copied.
                     */
                    eProsima_user_DllExport SlaveConfiguration& operator=(SlaveConfiguration &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
                    {
                        m_senderAddr = _senderAddr;
                    }

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
                    {
                        m_senderAddr = std::move(_senderAddr);
                    }

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    inline eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const
                    {
                        return m_senderAddr;
                    }

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    inline eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr()
                    {
                        return m_senderAddr;
                    }
                    /*!
                     * @brief This function copies the value in member responseConfigs
                     * @param _responseConfigs New value to be copied in member responseConfigs
                     */
                    inline eProsima_user_DllExport void responseConfigs(const std::vector<ib::sim::lin::idl::SlaveResponseConfig> &_responseConfigs)
                    {
                        m_responseConfigs = _responseConfigs;
                    }

                    /*!
                     * @brief This function moves the value in member responseConfigs
                     * @param _responseConfigs New value to be moved in member responseConfigs
                     */
                    inline eProsima_user_DllExport void responseConfigs(std::vector<ib::sim::lin::idl::SlaveResponseConfig> &&_responseConfigs)
                    {
                        m_responseConfigs = std::move(_responseConfigs);
                    }

                    /*!
                     * @brief This function returns a constant reference to member responseConfigs
                     * @return Constant reference to member responseConfigs
                     */
                    inline eProsima_user_DllExport const std::vector<ib::sim::lin::idl::SlaveResponseConfig>& responseConfigs() const
                    {
                        return m_responseConfigs;
                    }

                    /*!
                     * @brief This function returns a reference to member responseConfigs
                     * @return Reference to member responseConfigs
                     */
                    inline eProsima_user_DllExport std::vector<ib::sim::lin::idl::SlaveResponseConfig>& responseConfigs()
                    {
                        return m_responseConfigs;
                    }

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::lin::idl::SlaveConfiguration& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    std::vector<ib::sim::lin::idl::SlaveResponseConfig> m_responseConfigs;
                };
                /*!
                 * @brief This class represents the structure SlaveResponse defined by the user in the IDL file.
                 * @ingroup LINTOPICS
                 */
                class SlaveResponse
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport SlaveResponse();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~SlaveResponse();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::lin::idl::SlaveResponse that will be copied.
                     */
                    eProsima_user_DllExport SlaveResponse(const SlaveResponse &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::lin::idl::SlaveResponse that will be copied.
                     */
                    eProsima_user_DllExport SlaveResponse(SlaveResponse &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::lin::idl::SlaveResponse that will be copied.
                     */
                    eProsima_user_DllExport SlaveResponse& operator=(const SlaveResponse &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::lin::idl::SlaveResponse that will be copied.
                     */
                    eProsima_user_DllExport SlaveResponse& operator=(SlaveResponse &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
                    {
                        m_senderAddr = _senderAddr;
                    }

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
                    {
                        m_senderAddr = std::move(_senderAddr);
                    }

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    inline eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const
                    {
                        return m_senderAddr;
                    }

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    inline eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr()
                    {
                        return m_senderAddr;
                    }
                    /*!
                     * @brief This function sets a value in member linId
                     * @param _linId New value for member linId
                     */
                    inline eProsima_user_DllExport void linId(ib::sim::lin::idl::LinId _linId)
                    {
                        m_linId = _linId;
                    }

                    /*!
                     * @brief This function returns the value of member linId
                     * @return Value of member linId
                     */
                    inline eProsima_user_DllExport ib::sim::lin::idl::LinId linId() const
                    {
                        return m_linId;
                    }

                    /*!
                     * @brief This function returns a reference to member linId
                     * @return Reference to member linId
                     */
                    inline eProsima_user_DllExport ib::sim::lin::idl::LinId& linId()
                    {
                        return m_linId;
                    }
                    /*!
                     * @brief This function sets a value in member payloadLength
                     * @param _payloadLength New value for member payloadLength
                     */
                    inline eProsima_user_DllExport void payloadLength(uint8_t _payloadLength)
                    {
                        m_payloadLength = _payloadLength;
                    }

                    /*!
                     * @brief This function returns the value of member payloadLength
                     * @return Value of member payloadLength
                     */
                    inline eProsima_user_DllExport uint8_t payloadLength() const
                    {
                        return m_payloadLength;
                    }

                    /*!
                     * @brief This function returns a reference to member payloadLength
                     * @return Reference to member payloadLength
                     */
                    inline eProsima_user_DllExport uint8_t& payloadLength()
                    {
                        return m_payloadLength;
                    }
                    /*!
                     * @brief This function copies the value in member payload
                     * @param _payload New value to be copied in member payload
                     */
                    inline eProsima_user_DllExport void payload(const std::array<uint8_t, 8> &_payload)
                    {
                        m_payload = _payload;
                    }

                    /*!
                     * @brief This function moves the value in member payload
                     * @param _payload New value to be moved in member payload
                     */
                    inline eProsima_user_DllExport void payload(std::array<uint8_t, 8> &&_payload)
                    {
                        m_payload = std::move(_payload);
                    }

                    /*!
                     * @brief This function returns a constant reference to member payload
                     * @return Constant reference to member payload
                     */
                    inline eProsima_user_DllExport const std::array<uint8_t, 8>& payload() const
                    {
                        return m_payload;
                    }

                    /*!
                     * @brief This function returns a reference to member payload
                     * @return Reference to member payload
                     */
                    inline eProsima_user_DllExport std::array<uint8_t, 8>& payload()
                    {
                        return m_payload;
                    }

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::lin::idl::SlaveResponse& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    ib::sim::lin::idl::LinId m_linId;
                    uint8_t m_payloadLength;
                    std::array<uint8_t, 8> m_payload;
                };
            }
        }
    }
}

#endif // _IB_SIM_LIN_IDL_LINTOPICS_H_