// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file FlexRayTopicsPubSubTypes.h
 * This header file contains the declaration of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#ifndef _IB_SIM_FR_IDL_FLEXRAYTOPICS_PUBSUBTYPES_H_
#define _IB_SIM_FR_IDL_FLEXRAYTOPICS_PUBSUBTYPES_H_

#include <fastrtps/config.h>
#include <fastrtps/TopicDataType.h>

#include "FlexRayTopics.h"

#if !defined(GEN_API_VER) || (GEN_API_VER != 1)
#error Generated FlexRayTopics is not compatible with current installed Fast-RTPS. Please, regenerate it with fastrtpsgen.
#endif

namespace ib
{
    namespace sim
    {
        namespace fr
        {
            namespace idl
            {


                /*!
                 * @brief This class represents the TopicDataType of the type ClusterParameters defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                class ClusterParametersPubSubType : public eprosima::fastrtps::TopicDataType {
                public:
                        typedef ClusterParameters type;

                	ClusterParametersPubSubType();
                	virtual ~ClusterParametersPubSubType();
                	virtual bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload) override;
                	virtual bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data) override;
                    virtual std::function<uint32_t()> getSerializedSizeProvider(void* data) override;
                	virtual bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle,
                		bool force_md5 = false) override;
                	virtual void* createData() override;
                	virtual void deleteData(void * data) override;
                	MD5 m_md5;
                	unsigned char* m_keyBuffer;
                };
                /*!
                 * @brief This class represents the TopicDataType of the type NodeParameters defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                class NodeParametersPubSubType : public eprosima::fastrtps::TopicDataType {
                public:
                        typedef NodeParameters type;

                	NodeParametersPubSubType();
                	virtual ~NodeParametersPubSubType();
                	virtual bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload) override;
                	virtual bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data) override;
                    virtual std::function<uint32_t()> getSerializedSizeProvider(void* data) override;
                	virtual bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle,
                		bool force_md5 = false) override;
                	virtual void* createData() override;
                	virtual void deleteData(void * data) override;
                	MD5 m_md5;
                	unsigned char* m_keyBuffer;
                };

                /*!
                 * @brief This class represents the TopicDataType of the type TxBufferConfig defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                class TxBufferConfigPubSubType : public eprosima::fastrtps::TopicDataType {
                public:
                        typedef TxBufferConfig type;

                	TxBufferConfigPubSubType();
                	virtual ~TxBufferConfigPubSubType();
                	virtual bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload) override;
                	virtual bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data) override;
                    virtual std::function<uint32_t()> getSerializedSizeProvider(void* data) override;
                	virtual bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle,
                		bool force_md5 = false) override;
                	virtual void* createData() override;
                	virtual void deleteData(void * data) override;
                	MD5 m_md5;
                	unsigned char* m_keyBuffer;
                };
                /*!
                 * @brief This class represents the TopicDataType of the type ControllerConfig defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                class ControllerConfigPubSubType : public eprosima::fastrtps::TopicDataType {
                public:
                        typedef ControllerConfig type;

                	ControllerConfigPubSubType();
                	virtual ~ControllerConfigPubSubType();
                	virtual bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload) override;
                	virtual bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data) override;
                    virtual std::function<uint32_t()> getSerializedSizeProvider(void* data) override;
                	virtual bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle,
                		bool force_md5 = false) override;
                	virtual void* createData() override;
                	virtual void deleteData(void * data) override;
                	MD5 m_md5;
                	unsigned char* m_keyBuffer;
                };
                /*!
                 * @brief This class represents the TopicDataType of the type TxBufferUpdate defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                class TxBufferUpdatePubSubType : public eprosima::fastrtps::TopicDataType {
                public:
                        typedef TxBufferUpdate type;

                	TxBufferUpdatePubSubType();
                	virtual ~TxBufferUpdatePubSubType();
                	virtual bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload) override;
                	virtual bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data) override;
                    virtual std::function<uint32_t()> getSerializedSizeProvider(void* data) override;
                	virtual bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle,
                		bool force_md5 = false) override;
                	virtual void* createData() override;
                	virtual void deleteData(void * data) override;
                	MD5 m_md5;
                	unsigned char* m_keyBuffer;
                };

                /*!
                 * @brief This class represents the TopicDataType of the type HostCommand defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                class HostCommandPubSubType : public eprosima::fastrtps::TopicDataType {
                public:
                        typedef HostCommand type;

                	HostCommandPubSubType();
                	virtual ~HostCommandPubSubType();
                	virtual bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload) override;
                	virtual bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data) override;
                    virtual std::function<uint32_t()> getSerializedSizeProvider(void* data) override;
                	virtual bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle,
                		bool force_md5 = false) override;
                	virtual void* createData() override;
                	virtual void deleteData(void * data) override;
                	MD5 m_md5;
                	unsigned char* m_keyBuffer;
                };
                /*!
                 * @brief This class represents the TopicDataType of the type Header defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                class HeaderPubSubType : public eprosima::fastrtps::TopicDataType {
                public:
                        typedef Header type;

                	HeaderPubSubType();
                	virtual ~HeaderPubSubType();
                	virtual bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload) override;
                	virtual bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data) override;
                    virtual std::function<uint32_t()> getSerializedSizeProvider(void* data) override;
                	virtual bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle,
                		bool force_md5 = false) override;
                	virtual void* createData() override;
                	virtual void deleteData(void * data) override;
                	MD5 m_md5;
                	unsigned char* m_keyBuffer;
                };
                /*!
                 * @brief This class represents the TopicDataType of the type Frame defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                class FramePubSubType : public eprosima::fastrtps::TopicDataType {
                public:
                        typedef Frame type;

                	FramePubSubType();
                	virtual ~FramePubSubType();
                	virtual bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload) override;
                	virtual bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data) override;
                    virtual std::function<uint32_t()> getSerializedSizeProvider(void* data) override;
                	virtual bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle,
                		bool force_md5 = false) override;
                	virtual void* createData() override;
                	virtual void deleteData(void * data) override;
                	MD5 m_md5;
                	unsigned char* m_keyBuffer;
                };
                /*!
                 * @brief This class represents the TopicDataType of the type FrMessage defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                class FrMessagePubSubType : public eprosima::fastrtps::TopicDataType {
                public:
                        typedef FrMessage type;

                	FrMessagePubSubType();
                	virtual ~FrMessagePubSubType();
                	virtual bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload) override;
                	virtual bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data) override;
                    virtual std::function<uint32_t()> getSerializedSizeProvider(void* data) override;
                	virtual bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle,
                		bool force_md5 = false) override;
                	virtual void* createData() override;
                	virtual void deleteData(void * data) override;
                	MD5 m_md5;
                	unsigned char* m_keyBuffer;
                };
                /*!
                 * @brief This class represents the TopicDataType of the type FrMessageAck defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                class FrMessageAckPubSubType : public eprosima::fastrtps::TopicDataType {
                public:
                        typedef FrMessageAck type;

                	FrMessageAckPubSubType();
                	virtual ~FrMessageAckPubSubType();
                	virtual bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload) override;
                	virtual bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data) override;
                    virtual std::function<uint32_t()> getSerializedSizeProvider(void* data) override;
                	virtual bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle,
                		bool force_md5 = false) override;
                	virtual void* createData() override;
                	virtual void deleteData(void * data) override;
                	MD5 m_md5;
                	unsigned char* m_keyBuffer;
                };

                /*!
                 * @brief This class represents the TopicDataType of the type FrSymbol defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                class FrSymbolPubSubType : public eprosima::fastrtps::TopicDataType {
                public:
                        typedef FrSymbol type;

                	FrSymbolPubSubType();
                	virtual ~FrSymbolPubSubType();
                	virtual bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload) override;
                	virtual bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data) override;
                    virtual std::function<uint32_t()> getSerializedSizeProvider(void* data) override;
                	virtual bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle,
                		bool force_md5 = false) override;
                	virtual void* createData() override;
                	virtual void deleteData(void * data) override;
                	MD5 m_md5;
                	unsigned char* m_keyBuffer;
                };
                /*!
                 * @brief This class represents the TopicDataType of the type FrSymbolAck defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                class FrSymbolAckPubSubType : public eprosima::fastrtps::TopicDataType {
                public:
                        typedef FrSymbolAck type;

                	FrSymbolAckPubSubType();
                	virtual ~FrSymbolAckPubSubType();
                	virtual bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload) override;
                	virtual bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data) override;
                    virtual std::function<uint32_t()> getSerializedSizeProvider(void* data) override;
                	virtual bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle,
                		bool force_md5 = false) override;
                	virtual void* createData() override;
                	virtual void deleteData(void * data) override;
                	MD5 m_md5;
                	unsigned char* m_keyBuffer;
                };

                /*!
                 * @brief This class represents the TopicDataType of the type ControllerStatus defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                class ControllerStatusPubSubType : public eprosima::fastrtps::TopicDataType {
                public:
                        typedef ControllerStatus type;

                	ControllerStatusPubSubType();
                	virtual ~ControllerStatusPubSubType();
                	virtual bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload) override;
                	virtual bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data) override;
                    virtual std::function<uint32_t()> getSerializedSizeProvider(void* data) override;
                	virtual bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle,
                		bool force_md5 = false) override;
                	virtual void* createData() override;
                	virtual void deleteData(void * data) override;
                	MD5 m_md5;
                	unsigned char* m_keyBuffer;
                };
            }
        }
    }
}

#endif // _IB_SIM_FR_IDL_FLEXRAYTOPICS_PUBSUBTYPES_H_