// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file CanTopics.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "CanTopics.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

ib::sim::can::idl::CanMessageFlags::CanMessageFlags()
{
    m_ide = false;
    m_rtr = false;
    m_fdf = false;
    m_brs = false;
    m_esi = false;

}

ib::sim::can::idl::CanMessageFlags::~CanMessageFlags()
{





}

ib::sim::can::idl::CanMessageFlags::CanMessageFlags(const CanMessageFlags &x)
{
    m_ide = x.m_ide;
    m_rtr = x.m_rtr;
    m_fdf = x.m_fdf;
    m_brs = x.m_brs;
    m_esi = x.m_esi;
}

ib::sim::can::idl::CanMessageFlags::CanMessageFlags(CanMessageFlags &&x)
{
    m_ide = x.m_ide;
    m_rtr = x.m_rtr;
    m_fdf = x.m_fdf;
    m_brs = x.m_brs;
    m_esi = x.m_esi;
}

ib::sim::can::idl::CanMessageFlags& ib::sim::can::idl::CanMessageFlags::operator=(const CanMessageFlags &x)
{

    m_ide = x.m_ide;
    m_rtr = x.m_rtr;
    m_fdf = x.m_fdf;
    m_brs = x.m_brs;
    m_esi = x.m_esi;

    return *this;
}

ib::sim::can::idl::CanMessageFlags& ib::sim::can::idl::CanMessageFlags::operator=(CanMessageFlags &&x)
{

    m_ide = x.m_ide;
    m_rtr = x.m_rtr;
    m_fdf = x.m_fdf;
    m_brs = x.m_brs;
    m_esi = x.m_esi;

    return *this;
}

size_t ib::sim::can::idl::CanMessageFlags::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t ib::sim::can::idl::CanMessageFlags::getCdrSerializedSize(const ib::sim::can::idl::CanMessageFlags& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void ib::sim::can::idl::CanMessageFlags::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_ide;
    scdr << m_rtr;
    scdr << m_fdf;
    scdr << m_brs;
    scdr << m_esi;
}

void ib::sim::can::idl::CanMessageFlags::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_ide;
    dcdr >> m_rtr;
    dcdr >> m_fdf;
    dcdr >> m_brs;
    dcdr >> m_esi;
}

/*!
 * @brief This function sets a value in member ide
 * @param _ide New value for member ide
 */
void ib::sim::can::idl::CanMessageFlags::ide(bool _ide)
{
m_ide = _ide;
}

/*!
 * @brief This function returns the value of member ide
 * @return Value of member ide
 */
bool ib::sim::can::idl::CanMessageFlags::ide() const
{
    return m_ide;
}

/*!
 * @brief This function returns a reference to member ide
 * @return Reference to member ide
 */
bool& ib::sim::can::idl::CanMessageFlags::ide()
{
    return m_ide;
}
/*!
 * @brief This function sets a value in member rtr
 * @param _rtr New value for member rtr
 */
void ib::sim::can::idl::CanMessageFlags::rtr(bool _rtr)
{
m_rtr = _rtr;
}

/*!
 * @brief This function returns the value of member rtr
 * @return Value of member rtr
 */
bool ib::sim::can::idl::CanMessageFlags::rtr() const
{
    return m_rtr;
}

/*!
 * @brief This function returns a reference to member rtr
 * @return Reference to member rtr
 */
bool& ib::sim::can::idl::CanMessageFlags::rtr()
{
    return m_rtr;
}
/*!
 * @brief This function sets a value in member fdf
 * @param _fdf New value for member fdf
 */
void ib::sim::can::idl::CanMessageFlags::fdf(bool _fdf)
{
m_fdf = _fdf;
}

/*!
 * @brief This function returns the value of member fdf
 * @return Value of member fdf
 */
bool ib::sim::can::idl::CanMessageFlags::fdf() const
{
    return m_fdf;
}

/*!
 * @brief This function returns a reference to member fdf
 * @return Reference to member fdf
 */
bool& ib::sim::can::idl::CanMessageFlags::fdf()
{
    return m_fdf;
}
/*!
 * @brief This function sets a value in member brs
 * @param _brs New value for member brs
 */
void ib::sim::can::idl::CanMessageFlags::brs(bool _brs)
{
m_brs = _brs;
}

/*!
 * @brief This function returns the value of member brs
 * @return Value of member brs
 */
bool ib::sim::can::idl::CanMessageFlags::brs() const
{
    return m_brs;
}

/*!
 * @brief This function returns a reference to member brs
 * @return Reference to member brs
 */
bool& ib::sim::can::idl::CanMessageFlags::brs()
{
    return m_brs;
}
/*!
 * @brief This function sets a value in member esi
 * @param _esi New value for member esi
 */
void ib::sim::can::idl::CanMessageFlags::esi(bool _esi)
{
m_esi = _esi;
}

/*!
 * @brief This function returns the value of member esi
 * @return Value of member esi
 */
bool ib::sim::can::idl::CanMessageFlags::esi() const
{
    return m_esi;
}

/*!
 * @brief This function returns a reference to member esi
 * @return Reference to member esi
 */
bool& ib::sim::can::idl::CanMessageFlags::esi()
{
    return m_esi;
}

size_t ib::sim::can::idl::CanMessageFlags::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;








    return current_align;
}

bool ib::sim::can::idl::CanMessageFlags::isKeyDefined()
{
   return false;
}

void ib::sim::can::idl::CanMessageFlags::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
	 
	 
	 
}


ib::sim::can::idl::CanMessage::CanMessage()
{

    m_transmitId = 0;
    m_timestampNs = 0;
    m_canId = 0;

    m_dlc = 0;


}

ib::sim::can::idl::CanMessage::~CanMessage()
{







}

ib::sim::can::idl::CanMessage::CanMessage(const CanMessage &x)
{
    m_senderAddr = x.m_senderAddr;
    m_transmitId = x.m_transmitId;
    m_timestampNs = x.m_timestampNs;
    m_canId = x.m_canId;
    m_flags = x.m_flags;
    m_dlc = x.m_dlc;
    m_dataField = x.m_dataField;
}

ib::sim::can::idl::CanMessage::CanMessage(CanMessage &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_transmitId = x.m_transmitId;
    m_timestampNs = x.m_timestampNs;
    m_canId = x.m_canId;
    m_flags = std::move(x.m_flags);
    m_dlc = x.m_dlc;
    m_dataField = std::move(x.m_dataField);
}

ib::sim::can::idl::CanMessage& ib::sim::can::idl::CanMessage::operator=(const CanMessage &x)
{

    m_senderAddr = x.m_senderAddr;
    m_transmitId = x.m_transmitId;
    m_timestampNs = x.m_timestampNs;
    m_canId = x.m_canId;
    m_flags = x.m_flags;
    m_dlc = x.m_dlc;
    m_dataField = x.m_dataField;

    return *this;
}

ib::sim::can::idl::CanMessage& ib::sim::can::idl::CanMessage::operator=(CanMessage &&x)
{

    m_senderAddr = std::move(x.m_senderAddr);
    m_transmitId = x.m_transmitId;
    m_timestampNs = x.m_timestampNs;
    m_canId = x.m_canId;
    m_flags = std::move(x.m_flags);
    m_dlc = x.m_dlc;
    m_dataField = std::move(x.m_dataField);

    return *this;
}

size_t ib::sim::can::idl::CanMessage::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ib::sim::can::idl::CanMessageFlags::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (100 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);




    return current_alignment - initial_alignment;
}

size_t ib::sim::can::idl::CanMessage::getCdrSerializedSize(const ib::sim::can::idl::CanMessage& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getCdrSerializedSize(data.senderAddr(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ib::sim::can::idl::CanMessageFlags::getCdrSerializedSize(data.flags(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (data.dataField().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);




    return current_alignment - initial_alignment;
}

void ib::sim::can::idl::CanMessage::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_senderAddr;
    scdr << m_transmitId;
    scdr << m_timestampNs;
    scdr << m_canId;
    scdr << m_flags;
    scdr << m_dlc;
    scdr << m_dataField;
}

void ib::sim::can::idl::CanMessage::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_senderAddr;
    dcdr >> m_transmitId;
    dcdr >> m_timestampNs;
    dcdr >> m_canId;
    dcdr >> m_flags;
    dcdr >> m_dlc;
    dcdr >> m_dataField;
}

/*!
 * @brief This function copies the value in member senderAddr
 * @param _senderAddr New value to be copied in member senderAddr
 */
void ib::sim::can::idl::CanMessage::senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
{
m_senderAddr = _senderAddr;
}

/*!
 * @brief This function moves the value in member senderAddr
 * @param _senderAddr New value to be moved in member senderAddr
 */
void ib::sim::can::idl::CanMessage::senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
{
m_senderAddr = std::move(_senderAddr);
}

/*!
 * @brief This function returns a constant reference to member senderAddr
 * @return Constant reference to member senderAddr
 */
const ib::mw::idl::EndpointAddress& ib::sim::can::idl::CanMessage::senderAddr() const
{
    return m_senderAddr;
}

/*!
 * @brief This function returns a reference to member senderAddr
 * @return Reference to member senderAddr
 */
ib::mw::idl::EndpointAddress& ib::sim::can::idl::CanMessage::senderAddr()
{
    return m_senderAddr;
}
/*!
 * @brief This function sets a value in member transmitId
 * @param _transmitId New value for member transmitId
 */
void ib::sim::can::idl::CanMessage::transmitId(uint32_t _transmitId)
{
m_transmitId = _transmitId;
}

/*!
 * @brief This function returns the value of member transmitId
 * @return Value of member transmitId
 */
uint32_t ib::sim::can::idl::CanMessage::transmitId() const
{
    return m_transmitId;
}

/*!
 * @brief This function returns a reference to member transmitId
 * @return Reference to member transmitId
 */
uint32_t& ib::sim::can::idl::CanMessage::transmitId()
{
    return m_transmitId;
}
/*!
 * @brief This function sets a value in member timestampNs
 * @param _timestampNs New value for member timestampNs
 */
void ib::sim::can::idl::CanMessage::timestampNs(int64_t _timestampNs)
{
m_timestampNs = _timestampNs;
}

/*!
 * @brief This function returns the value of member timestampNs
 * @return Value of member timestampNs
 */
int64_t ib::sim::can::idl::CanMessage::timestampNs() const
{
    return m_timestampNs;
}

/*!
 * @brief This function returns a reference to member timestampNs
 * @return Reference to member timestampNs
 */
int64_t& ib::sim::can::idl::CanMessage::timestampNs()
{
    return m_timestampNs;
}
/*!
 * @brief This function sets a value in member canId
 * @param _canId New value for member canId
 */
void ib::sim::can::idl::CanMessage::canId(uint32_t _canId)
{
m_canId = _canId;
}

/*!
 * @brief This function returns the value of member canId
 * @return Value of member canId
 */
uint32_t ib::sim::can::idl::CanMessage::canId() const
{
    return m_canId;
}

/*!
 * @brief This function returns a reference to member canId
 * @return Reference to member canId
 */
uint32_t& ib::sim::can::idl::CanMessage::canId()
{
    return m_canId;
}
/*!
 * @brief This function copies the value in member flags
 * @param _flags New value to be copied in member flags
 */
void ib::sim::can::idl::CanMessage::flags(const ib::sim::can::idl::CanMessageFlags &_flags)
{
m_flags = _flags;
}

/*!
 * @brief This function moves the value in member flags
 * @param _flags New value to be moved in member flags
 */
void ib::sim::can::idl::CanMessage::flags(ib::sim::can::idl::CanMessageFlags &&_flags)
{
m_flags = std::move(_flags);
}

/*!
 * @brief This function returns a constant reference to member flags
 * @return Constant reference to member flags
 */
const ib::sim::can::idl::CanMessageFlags& ib::sim::can::idl::CanMessage::flags() const
{
    return m_flags;
}

/*!
 * @brief This function returns a reference to member flags
 * @return Reference to member flags
 */
ib::sim::can::idl::CanMessageFlags& ib::sim::can::idl::CanMessage::flags()
{
    return m_flags;
}
/*!
 * @brief This function sets a value in member dlc
 * @param _dlc New value for member dlc
 */
void ib::sim::can::idl::CanMessage::dlc(uint8_t _dlc)
{
m_dlc = _dlc;
}

/*!
 * @brief This function returns the value of member dlc
 * @return Value of member dlc
 */
uint8_t ib::sim::can::idl::CanMessage::dlc() const
{
    return m_dlc;
}

/*!
 * @brief This function returns a reference to member dlc
 * @return Reference to member dlc
 */
uint8_t& ib::sim::can::idl::CanMessage::dlc()
{
    return m_dlc;
}
/*!
 * @brief This function copies the value in member dataField
 * @param _dataField New value to be copied in member dataField
 */
void ib::sim::can::idl::CanMessage::dataField(const std::vector<uint8_t> &_dataField)
{
m_dataField = _dataField;
}

/*!
 * @brief This function moves the value in member dataField
 * @param _dataField New value to be moved in member dataField
 */
void ib::sim::can::idl::CanMessage::dataField(std::vector<uint8_t> &&_dataField)
{
m_dataField = std::move(_dataField);
}

/*!
 * @brief This function returns a constant reference to member dataField
 * @return Constant reference to member dataField
 */
const std::vector<uint8_t>& ib::sim::can::idl::CanMessage::dataField() const
{
    return m_dataField;
}

/*!
 * @brief This function returns a reference to member dataField
 * @return Reference to member dataField
 */
std::vector<uint8_t>& ib::sim::can::idl::CanMessage::dataField()
{
    return m_dataField;
}

size_t ib::sim::can::idl::CanMessage::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;


     current_align += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_align); 







    return current_align;
}

bool ib::sim::can::idl::CanMessage::isKeyDefined()
{
   return true;
}

void ib::sim::can::idl::CanMessage::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 scdr << m_senderAddr;  
	 
	 
	 
	 
	 
	 
}

ib::sim::can::idl::CanControllerStatus::CanControllerStatus()
{

    m_timestampNs = 0;
    m_controllerState = 0;
    m_errorState = 0;

}

ib::sim::can::idl::CanControllerStatus::~CanControllerStatus()
{




}

ib::sim::can::idl::CanControllerStatus::CanControllerStatus(const CanControllerStatus &x)
{
    m_senderAddr = x.m_senderAddr;
    m_timestampNs = x.m_timestampNs;
    m_controllerState = x.m_controllerState;
    m_errorState = x.m_errorState;
}

ib::sim::can::idl::CanControllerStatus::CanControllerStatus(CanControllerStatus &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_timestampNs = x.m_timestampNs;
    m_controllerState = x.m_controllerState;
    m_errorState = x.m_errorState;
}

ib::sim::can::idl::CanControllerStatus& ib::sim::can::idl::CanControllerStatus::operator=(const CanControllerStatus &x)
{

    m_senderAddr = x.m_senderAddr;
    m_timestampNs = x.m_timestampNs;
    m_controllerState = x.m_controllerState;
    m_errorState = x.m_errorState;

    return *this;
}

ib::sim::can::idl::CanControllerStatus& ib::sim::can::idl::CanControllerStatus::operator=(CanControllerStatus &&x)
{

    m_senderAddr = std::move(x.m_senderAddr);
    m_timestampNs = x.m_timestampNs;
    m_controllerState = x.m_controllerState;
    m_errorState = x.m_errorState;

    return *this;
}

size_t ib::sim::can::idl::CanControllerStatus::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t ib::sim::can::idl::CanControllerStatus::getCdrSerializedSize(const ib::sim::can::idl::CanControllerStatus& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getCdrSerializedSize(data.senderAddr(), current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void ib::sim::can::idl::CanControllerStatus::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_senderAddr;
    scdr << m_timestampNs;
    scdr << m_controllerState;
    scdr << m_errorState;
}

void ib::sim::can::idl::CanControllerStatus::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_senderAddr;
    dcdr >> m_timestampNs;
    dcdr >> m_controllerState;
    dcdr >> m_errorState;
}

/*!
 * @brief This function copies the value in member senderAddr
 * @param _senderAddr New value to be copied in member senderAddr
 */
void ib::sim::can::idl::CanControllerStatus::senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
{
m_senderAddr = _senderAddr;
}

/*!
 * @brief This function moves the value in member senderAddr
 * @param _senderAddr New value to be moved in member senderAddr
 */
void ib::sim::can::idl::CanControllerStatus::senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
{
m_senderAddr = std::move(_senderAddr);
}

/*!
 * @brief This function returns a constant reference to member senderAddr
 * @return Constant reference to member senderAddr
 */
const ib::mw::idl::EndpointAddress& ib::sim::can::idl::CanControllerStatus::senderAddr() const
{
    return m_senderAddr;
}

/*!
 * @brief This function returns a reference to member senderAddr
 * @return Reference to member senderAddr
 */
ib::mw::idl::EndpointAddress& ib::sim::can::idl::CanControllerStatus::senderAddr()
{
    return m_senderAddr;
}
/*!
 * @brief This function sets a value in member timestampNs
 * @param _timestampNs New value for member timestampNs
 */
void ib::sim::can::idl::CanControllerStatus::timestampNs(int64_t _timestampNs)
{
m_timestampNs = _timestampNs;
}

/*!
 * @brief This function returns the value of member timestampNs
 * @return Value of member timestampNs
 */
int64_t ib::sim::can::idl::CanControllerStatus::timestampNs() const
{
    return m_timestampNs;
}

/*!
 * @brief This function returns a reference to member timestampNs
 * @return Reference to member timestampNs
 */
int64_t& ib::sim::can::idl::CanControllerStatus::timestampNs()
{
    return m_timestampNs;
}
/*!
 * @brief This function sets a value in member controllerState
 * @param _controllerState New value for member controllerState
 */
void ib::sim::can::idl::CanControllerStatus::controllerState(uint8_t _controllerState)
{
m_controllerState = _controllerState;
}

/*!
 * @brief This function returns the value of member controllerState
 * @return Value of member controllerState
 */
uint8_t ib::sim::can::idl::CanControllerStatus::controllerState() const
{
    return m_controllerState;
}

/*!
 * @brief This function returns a reference to member controllerState
 * @return Reference to member controllerState
 */
uint8_t& ib::sim::can::idl::CanControllerStatus::controllerState()
{
    return m_controllerState;
}
/*!
 * @brief This function sets a value in member errorState
 * @param _errorState New value for member errorState
 */
void ib::sim::can::idl::CanControllerStatus::errorState(uint8_t _errorState)
{
m_errorState = _errorState;
}

/*!
 * @brief This function returns the value of member errorState
 * @return Value of member errorState
 */
uint8_t ib::sim::can::idl::CanControllerStatus::errorState() const
{
    return m_errorState;
}

/*!
 * @brief This function returns a reference to member errorState
 * @return Reference to member errorState
 */
uint8_t& ib::sim::can::idl::CanControllerStatus::errorState()
{
    return m_errorState;
}

size_t ib::sim::can::idl::CanControllerStatus::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;


     current_align += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_align); 




    return current_align;
}

bool ib::sim::can::idl::CanControllerStatus::isKeyDefined()
{
   return true;
}

void ib::sim::can::idl::CanControllerStatus::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 scdr << m_senderAddr;  
	 
	 
	 
}

ib::sim::can::idl::CanTransmitAcknowledge::CanTransmitAcknowledge()
{

    m_canId = 0;
    m_transmitId = 0;
    m_timestampNS = 0;
    m_txStatus = 0;

}

ib::sim::can::idl::CanTransmitAcknowledge::~CanTransmitAcknowledge()
{





}

ib::sim::can::idl::CanTransmitAcknowledge::CanTransmitAcknowledge(const CanTransmitAcknowledge &x)
{
    m_senderAddr = x.m_senderAddr;
    m_canId = x.m_canId;
    m_transmitId = x.m_transmitId;
    m_timestampNS = x.m_timestampNS;
    m_txStatus = x.m_txStatus;
}

ib::sim::can::idl::CanTransmitAcknowledge::CanTransmitAcknowledge(CanTransmitAcknowledge &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_canId = x.m_canId;
    m_transmitId = x.m_transmitId;
    m_timestampNS = x.m_timestampNS;
    m_txStatus = x.m_txStatus;
}

ib::sim::can::idl::CanTransmitAcknowledge& ib::sim::can::idl::CanTransmitAcknowledge::operator=(const CanTransmitAcknowledge &x)
{

    m_senderAddr = x.m_senderAddr;
    m_canId = x.m_canId;
    m_transmitId = x.m_transmitId;
    m_timestampNS = x.m_timestampNS;
    m_txStatus = x.m_txStatus;

    return *this;
}

ib::sim::can::idl::CanTransmitAcknowledge& ib::sim::can::idl::CanTransmitAcknowledge::operator=(CanTransmitAcknowledge &&x)
{

    m_senderAddr = std::move(x.m_senderAddr);
    m_canId = x.m_canId;
    m_transmitId = x.m_transmitId;
    m_timestampNS = x.m_timestampNS;
    m_txStatus = x.m_txStatus;

    return *this;
}

size_t ib::sim::can::idl::CanTransmitAcknowledge::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t ib::sim::can::idl::CanTransmitAcknowledge::getCdrSerializedSize(const ib::sim::can::idl::CanTransmitAcknowledge& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getCdrSerializedSize(data.senderAddr(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void ib::sim::can::idl::CanTransmitAcknowledge::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_senderAddr;
    scdr << m_canId;
    scdr << m_transmitId;
    scdr << m_timestampNS;
    scdr << m_txStatus;
}

void ib::sim::can::idl::CanTransmitAcknowledge::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_senderAddr;
    dcdr >> m_canId;
    dcdr >> m_transmitId;
    dcdr >> m_timestampNS;
    dcdr >> m_txStatus;
}

/*!
 * @brief This function copies the value in member senderAddr
 * @param _senderAddr New value to be copied in member senderAddr
 */
void ib::sim::can::idl::CanTransmitAcknowledge::senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
{
m_senderAddr = _senderAddr;
}

/*!
 * @brief This function moves the value in member senderAddr
 * @param _senderAddr New value to be moved in member senderAddr
 */
void ib::sim::can::idl::CanTransmitAcknowledge::senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
{
m_senderAddr = std::move(_senderAddr);
}

/*!
 * @brief This function returns a constant reference to member senderAddr
 * @return Constant reference to member senderAddr
 */
const ib::mw::idl::EndpointAddress& ib::sim::can::idl::CanTransmitAcknowledge::senderAddr() const
{
    return m_senderAddr;
}

/*!
 * @brief This function returns a reference to member senderAddr
 * @return Reference to member senderAddr
 */
ib::mw::idl::EndpointAddress& ib::sim::can::idl::CanTransmitAcknowledge::senderAddr()
{
    return m_senderAddr;
}
/*!
 * @brief This function sets a value in member canId
 * @param _canId New value for member canId
 */
void ib::sim::can::idl::CanTransmitAcknowledge::canId(uint32_t _canId)
{
m_canId = _canId;
}

/*!
 * @brief This function returns the value of member canId
 * @return Value of member canId
 */
uint32_t ib::sim::can::idl::CanTransmitAcknowledge::canId() const
{
    return m_canId;
}

/*!
 * @brief This function returns a reference to member canId
 * @return Reference to member canId
 */
uint32_t& ib::sim::can::idl::CanTransmitAcknowledge::canId()
{
    return m_canId;
}
/*!
 * @brief This function sets a value in member transmitId
 * @param _transmitId New value for member transmitId
 */
void ib::sim::can::idl::CanTransmitAcknowledge::transmitId(ib::sim::can::idl::transmitIdT _transmitId)
{
m_transmitId = _transmitId;
}

/*!
 * @brief This function returns the value of member transmitId
 * @return Value of member transmitId
 */
ib::sim::can::idl::transmitIdT ib::sim::can::idl::CanTransmitAcknowledge::transmitId() const
{
    return m_transmitId;
}

/*!
 * @brief This function returns a reference to member transmitId
 * @return Reference to member transmitId
 */
ib::sim::can::idl::transmitIdT& ib::sim::can::idl::CanTransmitAcknowledge::transmitId()
{
    return m_transmitId;
}
/*!
 * @brief This function sets a value in member timestampNS
 * @param _timestampNS New value for member timestampNS
 */
void ib::sim::can::idl::CanTransmitAcknowledge::timestampNS(int64_t _timestampNS)
{
m_timestampNS = _timestampNS;
}

/*!
 * @brief This function returns the value of member timestampNS
 * @return Value of member timestampNS
 */
int64_t ib::sim::can::idl::CanTransmitAcknowledge::timestampNS() const
{
    return m_timestampNS;
}

/*!
 * @brief This function returns a reference to member timestampNS
 * @return Reference to member timestampNS
 */
int64_t& ib::sim::can::idl::CanTransmitAcknowledge::timestampNS()
{
    return m_timestampNS;
}
/*!
 * @brief This function sets a value in member txStatus
 * @param _txStatus New value for member txStatus
 */
void ib::sim::can::idl::CanTransmitAcknowledge::txStatus(uint8_t _txStatus)
{
m_txStatus = _txStatus;
}

/*!
 * @brief This function returns the value of member txStatus
 * @return Value of member txStatus
 */
uint8_t ib::sim::can::idl::CanTransmitAcknowledge::txStatus() const
{
    return m_txStatus;
}

/*!
 * @brief This function returns a reference to member txStatus
 * @return Reference to member txStatus
 */
uint8_t& ib::sim::can::idl::CanTransmitAcknowledge::txStatus()
{
    return m_txStatus;
}

size_t ib::sim::can::idl::CanTransmitAcknowledge::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;


     current_align += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_align); 





    return current_align;
}

bool ib::sim::can::idl::CanTransmitAcknowledge::isKeyDefined()
{
   return true;
}

void ib::sim::can::idl::CanTransmitAcknowledge::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 scdr << m_senderAddr;  
	 
	 
	 
	 
}

ib::sim::can::idl::CanConfigureBaudrate::CanConfigureBaudrate()
{

    m_baudRate = 0;
    m_fdBaudRate = 0;

}

ib::sim::can::idl::CanConfigureBaudrate::~CanConfigureBaudrate()
{



}

ib::sim::can::idl::CanConfigureBaudrate::CanConfigureBaudrate(const CanConfigureBaudrate &x)
{
    m_senderAddr = x.m_senderAddr;
    m_baudRate = x.m_baudRate;
    m_fdBaudRate = x.m_fdBaudRate;
}

ib::sim::can::idl::CanConfigureBaudrate::CanConfigureBaudrate(CanConfigureBaudrate &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_baudRate = x.m_baudRate;
    m_fdBaudRate = x.m_fdBaudRate;
}

ib::sim::can::idl::CanConfigureBaudrate& ib::sim::can::idl::CanConfigureBaudrate::operator=(const CanConfigureBaudrate &x)
{

    m_senderAddr = x.m_senderAddr;
    m_baudRate = x.m_baudRate;
    m_fdBaudRate = x.m_fdBaudRate;

    return *this;
}

ib::sim::can::idl::CanConfigureBaudrate& ib::sim::can::idl::CanConfigureBaudrate::operator=(CanConfigureBaudrate &&x)
{

    m_senderAddr = std::move(x.m_senderAddr);
    m_baudRate = x.m_baudRate;
    m_fdBaudRate = x.m_fdBaudRate;

    return *this;
}

size_t ib::sim::can::idl::CanConfigureBaudrate::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t ib::sim::can::idl::CanConfigureBaudrate::getCdrSerializedSize(const ib::sim::can::idl::CanConfigureBaudrate& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getCdrSerializedSize(data.senderAddr(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void ib::sim::can::idl::CanConfigureBaudrate::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_senderAddr;
    scdr << m_baudRate;
    scdr << m_fdBaudRate;
}

void ib::sim::can::idl::CanConfigureBaudrate::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_senderAddr;
    dcdr >> m_baudRate;
    dcdr >> m_fdBaudRate;
}

/*!
 * @brief This function copies the value in member senderAddr
 * @param _senderAddr New value to be copied in member senderAddr
 */
void ib::sim::can::idl::CanConfigureBaudrate::senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
{
m_senderAddr = _senderAddr;
}

/*!
 * @brief This function moves the value in member senderAddr
 * @param _senderAddr New value to be moved in member senderAddr
 */
void ib::sim::can::idl::CanConfigureBaudrate::senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
{
m_senderAddr = std::move(_senderAddr);
}

/*!
 * @brief This function returns a constant reference to member senderAddr
 * @return Constant reference to member senderAddr
 */
const ib::mw::idl::EndpointAddress& ib::sim::can::idl::CanConfigureBaudrate::senderAddr() const
{
    return m_senderAddr;
}

/*!
 * @brief This function returns a reference to member senderAddr
 * @return Reference to member senderAddr
 */
ib::mw::idl::EndpointAddress& ib::sim::can::idl::CanConfigureBaudrate::senderAddr()
{
    return m_senderAddr;
}
/*!
 * @brief This function sets a value in member baudRate
 * @param _baudRate New value for member baudRate
 */
void ib::sim::can::idl::CanConfigureBaudrate::baudRate(uint32_t _baudRate)
{
m_baudRate = _baudRate;
}

/*!
 * @brief This function returns the value of member baudRate
 * @return Value of member baudRate
 */
uint32_t ib::sim::can::idl::CanConfigureBaudrate::baudRate() const
{
    return m_baudRate;
}

/*!
 * @brief This function returns a reference to member baudRate
 * @return Reference to member baudRate
 */
uint32_t& ib::sim::can::idl::CanConfigureBaudrate::baudRate()
{
    return m_baudRate;
}
/*!
 * @brief This function sets a value in member fdBaudRate
 * @param _fdBaudRate New value for member fdBaudRate
 */
void ib::sim::can::idl::CanConfigureBaudrate::fdBaudRate(uint32_t _fdBaudRate)
{
m_fdBaudRate = _fdBaudRate;
}

/*!
 * @brief This function returns the value of member fdBaudRate
 * @return Value of member fdBaudRate
 */
uint32_t ib::sim::can::idl::CanConfigureBaudrate::fdBaudRate() const
{
    return m_fdBaudRate;
}

/*!
 * @brief This function returns a reference to member fdBaudRate
 * @return Reference to member fdBaudRate
 */
uint32_t& ib::sim::can::idl::CanConfigureBaudrate::fdBaudRate()
{
    return m_fdBaudRate;
}

size_t ib::sim::can::idl::CanConfigureBaudrate::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;


     current_align += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_align); 



    return current_align;
}

bool ib::sim::can::idl::CanConfigureBaudrate::isKeyDefined()
{
   return true;
}

void ib::sim::can::idl::CanConfigureBaudrate::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 scdr << m_senderAddr;  
	 
	 
}

ib::sim::can::idl::CanSetControllerMode::CanSetControllerMode()
{

    m_resetErrorHandling = false;
    m_cancelTransmitRequests = false;
    m_mode = 0;

}

ib::sim::can::idl::CanSetControllerMode::~CanSetControllerMode()
{




}

ib::sim::can::idl::CanSetControllerMode::CanSetControllerMode(const CanSetControllerMode &x)
{
    m_senderAddr = x.m_senderAddr;
    m_resetErrorHandling = x.m_resetErrorHandling;
    m_cancelTransmitRequests = x.m_cancelTransmitRequests;
    m_mode = x.m_mode;
}

ib::sim::can::idl::CanSetControllerMode::CanSetControllerMode(CanSetControllerMode &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_resetErrorHandling = x.m_resetErrorHandling;
    m_cancelTransmitRequests = x.m_cancelTransmitRequests;
    m_mode = x.m_mode;
}

ib::sim::can::idl::CanSetControllerMode& ib::sim::can::idl::CanSetControllerMode::operator=(const CanSetControllerMode &x)
{

    m_senderAddr = x.m_senderAddr;
    m_resetErrorHandling = x.m_resetErrorHandling;
    m_cancelTransmitRequests = x.m_cancelTransmitRequests;
    m_mode = x.m_mode;

    return *this;
}

ib::sim::can::idl::CanSetControllerMode& ib::sim::can::idl::CanSetControllerMode::operator=(CanSetControllerMode &&x)
{

    m_senderAddr = std::move(x.m_senderAddr);
    m_resetErrorHandling = x.m_resetErrorHandling;
    m_cancelTransmitRequests = x.m_cancelTransmitRequests;
    m_mode = x.m_mode;

    return *this;
}

size_t ib::sim::can::idl::CanSetControllerMode::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t ib::sim::can::idl::CanSetControllerMode::getCdrSerializedSize(const ib::sim::can::idl::CanSetControllerMode& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getCdrSerializedSize(data.senderAddr(), current_alignment);
    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void ib::sim::can::idl::CanSetControllerMode::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_senderAddr;
    scdr << m_resetErrorHandling;
    scdr << m_cancelTransmitRequests;
    scdr << m_mode;
}

void ib::sim::can::idl::CanSetControllerMode::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_senderAddr;
    dcdr >> m_resetErrorHandling;
    dcdr >> m_cancelTransmitRequests;
    dcdr >> m_mode;
}

/*!
 * @brief This function copies the value in member senderAddr
 * @param _senderAddr New value to be copied in member senderAddr
 */
void ib::sim::can::idl::CanSetControllerMode::senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
{
m_senderAddr = _senderAddr;
}

/*!
 * @brief This function moves the value in member senderAddr
 * @param _senderAddr New value to be moved in member senderAddr
 */
void ib::sim::can::idl::CanSetControllerMode::senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
{
m_senderAddr = std::move(_senderAddr);
}

/*!
 * @brief This function returns a constant reference to member senderAddr
 * @return Constant reference to member senderAddr
 */
const ib::mw::idl::EndpointAddress& ib::sim::can::idl::CanSetControllerMode::senderAddr() const
{
    return m_senderAddr;
}

/*!
 * @brief This function returns a reference to member senderAddr
 * @return Reference to member senderAddr
 */
ib::mw::idl::EndpointAddress& ib::sim::can::idl::CanSetControllerMode::senderAddr()
{
    return m_senderAddr;
}
/*!
 * @brief This function sets a value in member resetErrorHandling
 * @param _resetErrorHandling New value for member resetErrorHandling
 */
void ib::sim::can::idl::CanSetControllerMode::resetErrorHandling(bool _resetErrorHandling)
{
m_resetErrorHandling = _resetErrorHandling;
}

/*!
 * @brief This function returns the value of member resetErrorHandling
 * @return Value of member resetErrorHandling
 */
bool ib::sim::can::idl::CanSetControllerMode::resetErrorHandling() const
{
    return m_resetErrorHandling;
}

/*!
 * @brief This function returns a reference to member resetErrorHandling
 * @return Reference to member resetErrorHandling
 */
bool& ib::sim::can::idl::CanSetControllerMode::resetErrorHandling()
{
    return m_resetErrorHandling;
}
/*!
 * @brief This function sets a value in member cancelTransmitRequests
 * @param _cancelTransmitRequests New value for member cancelTransmitRequests
 */
void ib::sim::can::idl::CanSetControllerMode::cancelTransmitRequests(bool _cancelTransmitRequests)
{
m_cancelTransmitRequests = _cancelTransmitRequests;
}

/*!
 * @brief This function returns the value of member cancelTransmitRequests
 * @return Value of member cancelTransmitRequests
 */
bool ib::sim::can::idl::CanSetControllerMode::cancelTransmitRequests() const
{
    return m_cancelTransmitRequests;
}

/*!
 * @brief This function returns a reference to member cancelTransmitRequests
 * @return Reference to member cancelTransmitRequests
 */
bool& ib::sim::can::idl::CanSetControllerMode::cancelTransmitRequests()
{
    return m_cancelTransmitRequests;
}
/*!
 * @brief This function sets a value in member mode
 * @param _mode New value for member mode
 */
void ib::sim::can::idl::CanSetControllerMode::mode(uint8_t _mode)
{
m_mode = _mode;
}

/*!
 * @brief This function returns the value of member mode
 * @return Value of member mode
 */
uint8_t ib::sim::can::idl::CanSetControllerMode::mode() const
{
    return m_mode;
}

/*!
 * @brief This function returns a reference to member mode
 * @return Reference to member mode
 */
uint8_t& ib::sim::can::idl::CanSetControllerMode::mode()
{
    return m_mode;
}

size_t ib::sim::can::idl::CanSetControllerMode::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;


     current_align += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_align); 




    return current_align;
}

bool ib::sim::can::idl::CanSetControllerMode::isKeyDefined()
{
   return true;
}

void ib::sim::can::idl::CanSetControllerMode::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 scdr << m_senderAddr;  
	 
	 
	 
}




