// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file EthernetTopics.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _IB_SIM_ETH_IDL_ETHERNETTOPICS_H_
#define _IB_SIM_ETH_IDL_ETHERNETTOPICS_H_

// TODO Poner en el contexto.
#include "Common.h"

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(EthernetTopics_SOURCE)
#define EthernetTopics_DllAPI __declspec( dllexport )
#else
#define EthernetTopics_DllAPI __declspec( dllimport )
#endif // EthernetTopics_SOURCE
#else
#define EthernetTopics_DllAPI
#endif
#else
#define EthernetTopics_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

namespace ib
{
    namespace sim
    {
        namespace eth
        {
            namespace idl
            {
                /*!
                 * @brief This class represents the structure EthTagControlInformation defined by the user in the IDL file.
                 * @ingroup ETHERNETTOPICS
                 */
                class EthTagControlInformation
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport EthTagControlInformation();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport virtual ~EthTagControlInformation();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::eth::idl::EthTagControlInformation that will be copied.
                     */
                    eProsima_user_DllExport EthTagControlInformation(const EthTagControlInformation &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::eth::idl::EthTagControlInformation that will be copied.
                     */
                    eProsima_user_DllExport EthTagControlInformation(EthTagControlInformation &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::eth::idl::EthTagControlInformation that will be copied.
                     */
                    eProsima_user_DllExport EthTagControlInformation& operator=(const EthTagControlInformation &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::eth::idl::EthTagControlInformation that will be copied.
                     */
                    eProsima_user_DllExport EthTagControlInformation& operator=(EthTagControlInformation &&x);

                    /*!
                     * @brief This function sets a value in member pcp
                     * @param _pcp New value for member pcp
                     */
                    eProsima_user_DllExport void pcp(uint8_t _pcp);

                    /*!
                     * @brief This function returns the value of member pcp
                     * @return Value of member pcp
                     */
                    eProsima_user_DllExport uint8_t pcp() const;

                    /*!
                     * @brief This function returns a reference to member pcp
                     * @return Reference to member pcp
                     */
                    eProsima_user_DllExport uint8_t& pcp();
                    /*!
                     * @brief This function sets a value in member dei
                     * @param _dei New value for member dei
                     */
                    eProsima_user_DllExport void dei(uint8_t _dei);

                    /*!
                     * @brief This function returns the value of member dei
                     * @return Value of member dei
                     */
                    eProsima_user_DllExport uint8_t dei() const;

                    /*!
                     * @brief This function returns a reference to member dei
                     * @return Reference to member dei
                     */
                    eProsima_user_DllExport uint8_t& dei();
                    /*!
                     * @brief This function sets a value in member vid
                     * @param _vid New value for member vid
                     */
                    eProsima_user_DllExport void vid(uint16_t _vid);

                    /*!
                     * @brief This function returns the value of member vid
                     * @return Value of member vid
                     */
                    eProsima_user_DllExport uint16_t vid() const;

                    /*!
                     * @brief This function returns a reference to member vid
                     * @return Reference to member vid
                     */
                    eProsima_user_DllExport uint16_t& vid();

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::eth::idl::EthTagControlInformation& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    uint8_t m_pcp;
                    uint8_t m_dei;
                    uint16_t m_vid;
                };
                typedef uint32_t transmitIdT;
                /*!
                 * @brief This class represents the structure EthMessage defined by the user in the IDL file.
                 * @ingroup ETHERNETTOPICS
                 */
                class EthMessage
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport EthMessage();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport virtual ~EthMessage();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::eth::idl::EthMessage that will be copied.
                     */
                    eProsima_user_DllExport EthMessage(const EthMessage &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::eth::idl::EthMessage that will be copied.
                     */
                    eProsima_user_DllExport EthMessage(EthMessage &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::eth::idl::EthMessage that will be copied.
                     */
                    eProsima_user_DllExport EthMessage& operator=(const EthMessage &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::eth::idl::EthMessage that will be copied.
                     */
                    eProsima_user_DllExport EthMessage& operator=(EthMessage &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr);

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr);

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const;

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr();
                    /*!
                     * @brief This function sets a value in member transmitId
                     * @param _transmitId New value for member transmitId
                     */
                    eProsima_user_DllExport void transmitId(uint32_t _transmitId);

                    /*!
                     * @brief This function returns the value of member transmitId
                     * @return Value of member transmitId
                     */
                    eProsima_user_DllExport uint32_t transmitId() const;

                    /*!
                     * @brief This function returns a reference to member transmitId
                     * @return Reference to member transmitId
                     */
                    eProsima_user_DllExport uint32_t& transmitId();
                    /*!
                     * @brief This function sets a value in member timestampNs
                     * @param _timestampNs New value for member timestampNs
                     */
                    eProsima_user_DllExport void timestampNs(int64_t _timestampNs);

                    /*!
                     * @brief This function returns the value of member timestampNs
                     * @return Value of member timestampNs
                     */
                    eProsima_user_DllExport int64_t timestampNs() const;

                    /*!
                     * @brief This function returns a reference to member timestampNs
                     * @return Reference to member timestampNs
                     */
                    eProsima_user_DllExport int64_t& timestampNs();
                    /*!
                     * @brief This function copies the value in member rawFrame
                     * @param _rawFrame New value to be copied in member rawFrame
                     */
                    eProsima_user_DllExport void rawFrame(const std::vector<uint8_t> &_rawFrame);

                    /*!
                     * @brief This function moves the value in member rawFrame
                     * @param _rawFrame New value to be moved in member rawFrame
                     */
                    eProsima_user_DllExport void rawFrame(std::vector<uint8_t> &&_rawFrame);

                    /*!
                     * @brief This function returns a constant reference to member rawFrame
                     * @return Constant reference to member rawFrame
                     */
                    eProsima_user_DllExport const std::vector<uint8_t>& rawFrame() const;

                    /*!
                     * @brief This function returns a reference to member rawFrame
                     * @return Reference to member rawFrame
                     */
                    eProsima_user_DllExport std::vector<uint8_t>& rawFrame();

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::eth::idl::EthMessage& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    uint32_t m_transmitId;
                    int64_t m_timestampNs;
                    std::vector<uint8_t> m_rawFrame;
                };
                /*!
                 * @brief This class represents the enumeration EthTransmitStatus defined by the user in the IDL file.
                 * @ingroup ETHERNETTOPICS
                 */
                enum EthTransmitStatus : uint32_t
                {
                    Transmitted,
                    ErrorControllerInactive,
                    ErrorLinkDown,
                    ErrorDropped,
                    ErrorDuplicatedTransmitId,
                    InvalidFrameFormat
                };
                /*!
                 * @brief This class represents the structure EthTransmitAcknowledge defined by the user in the IDL file.
                 * @ingroup ETHERNETTOPICS
                 */
                class EthTransmitAcknowledge
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport EthTransmitAcknowledge();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport virtual ~EthTransmitAcknowledge();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::eth::idl::EthTransmitAcknowledge that will be copied.
                     */
                    eProsima_user_DllExport EthTransmitAcknowledge(const EthTransmitAcknowledge &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::eth::idl::EthTransmitAcknowledge that will be copied.
                     */
                    eProsima_user_DllExport EthTransmitAcknowledge(EthTransmitAcknowledge &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::eth::idl::EthTransmitAcknowledge that will be copied.
                     */
                    eProsima_user_DllExport EthTransmitAcknowledge& operator=(const EthTransmitAcknowledge &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::eth::idl::EthTransmitAcknowledge that will be copied.
                     */
                    eProsima_user_DllExport EthTransmitAcknowledge& operator=(EthTransmitAcknowledge &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr);

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr);

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const;

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr();
                    /*!
                     * @brief This function sets a value in member transmitId
                     * @param _transmitId New value for member transmitId
                     */
                    eProsima_user_DllExport void transmitId(uint32_t _transmitId);

                    /*!
                     * @brief This function returns the value of member transmitId
                     * @return Value of member transmitId
                     */
                    eProsima_user_DllExport uint32_t transmitId() const;

                    /*!
                     * @brief This function returns a reference to member transmitId
                     * @return Reference to member transmitId
                     */
                    eProsima_user_DllExport uint32_t& transmitId();
                    /*!
                     * @brief This function copies the value in member sourceMac
                     * @param _sourceMac New value to be copied in member sourceMac
                     */
                    eProsima_user_DllExport void sourceMac(const std::array<uint8_t, 6> &_sourceMac);

                    /*!
                     * @brief This function moves the value in member sourceMac
                     * @param _sourceMac New value to be moved in member sourceMac
                     */
                    eProsima_user_DllExport void sourceMac(std::array<uint8_t, 6> &&_sourceMac);

                    /*!
                     * @brief This function returns a constant reference to member sourceMac
                     * @return Constant reference to member sourceMac
                     */
                    eProsima_user_DllExport const std::array<uint8_t, 6>& sourceMac() const;

                    /*!
                     * @brief This function returns a reference to member sourceMac
                     * @return Reference to member sourceMac
                     */
                    eProsima_user_DllExport std::array<uint8_t, 6>& sourceMac();
                    /*!
                     * @brief This function sets a value in member timestampNs
                     * @param _timestampNs New value for member timestampNs
                     */
                    eProsima_user_DllExport void timestampNs(int64_t _timestampNs);

                    /*!
                     * @brief This function returns the value of member timestampNs
                     * @return Value of member timestampNs
                     */
                    eProsima_user_DllExport int64_t timestampNs() const;

                    /*!
                     * @brief This function returns a reference to member timestampNs
                     * @return Reference to member timestampNs
                     */
                    eProsima_user_DllExport int64_t& timestampNs();
                    /*!
                     * @brief This function sets a value in member status
                     * @param _status New value for member status
                     */
                    eProsima_user_DllExport void status(ib::sim::eth::idl::EthTransmitStatus _status);

                    /*!
                     * @brief This function returns the value of member status
                     * @return Value of member status
                     */
                    eProsima_user_DllExport ib::sim::eth::idl::EthTransmitStatus status() const;

                    /*!
                     * @brief This function returns a reference to member status
                     * @return Reference to member status
                     */
                    eProsima_user_DllExport ib::sim::eth::idl::EthTransmitStatus& status();

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::eth::idl::EthTransmitAcknowledge& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    uint32_t m_transmitId;
                    std::array<uint8_t, 6> m_sourceMac;
                    int64_t m_timestampNs;
                    ib::sim::eth::idl::EthTransmitStatus m_status;
                };
                /*!
                 * @brief This class represents the enumeration EthState defined by the user in the IDL file.
                 * @ingroup ETHERNETTOPICS
                 */
                enum EthState : uint32_t
                {
                    Inactive,
                    LinkDown,
                    LinkUp
                };
                /*!
                 * @brief This class represents the structure EthStatus defined by the user in the IDL file.
                 * @ingroup ETHERNETTOPICS
                 */
                class EthStatus
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport EthStatus();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport virtual ~EthStatus();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::eth::idl::EthStatus that will be copied.
                     */
                    eProsima_user_DllExport EthStatus(const EthStatus &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::eth::idl::EthStatus that will be copied.
                     */
                    eProsima_user_DllExport EthStatus(EthStatus &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::eth::idl::EthStatus that will be copied.
                     */
                    eProsima_user_DllExport EthStatus& operator=(const EthStatus &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::eth::idl::EthStatus that will be copied.
                     */
                    eProsima_user_DllExport EthStatus& operator=(EthStatus &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr);

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr);

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const;

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr();
                    /*!
                     * @brief This function sets a value in member timestampNs
                     * @param _timestampNs New value for member timestampNs
                     */
                    eProsima_user_DllExport void timestampNs(int64_t _timestampNs);

                    /*!
                     * @brief This function returns the value of member timestampNs
                     * @return Value of member timestampNs
                     */
                    eProsima_user_DllExport int64_t timestampNs() const;

                    /*!
                     * @brief This function returns a reference to member timestampNs
                     * @return Reference to member timestampNs
                     */
                    eProsima_user_DllExport int64_t& timestampNs();
                    /*!
                     * @brief This function sets a value in member state
                     * @param _state New value for member state
                     */
                    eProsima_user_DllExport void state(ib::sim::eth::idl::EthState _state);

                    /*!
                     * @brief This function returns the value of member state
                     * @return Value of member state
                     */
                    eProsima_user_DllExport ib::sim::eth::idl::EthState state() const;

                    /*!
                     * @brief This function returns a reference to member state
                     * @return Reference to member state
                     */
                    eProsima_user_DllExport ib::sim::eth::idl::EthState& state();
                    /*!
                     * @brief This function sets a value in member bitRate
                     * @param _bitRate New value for member bitRate
                     */
                    eProsima_user_DllExport void bitRate(uint32_t _bitRate);

                    /*!
                     * @brief This function returns the value of member bitRate
                     * @return Value of member bitRate
                     */
                    eProsima_user_DllExport uint32_t bitRate() const;

                    /*!
                     * @brief This function returns a reference to member bitRate
                     * @return Reference to member bitRate
                     */
                    eProsima_user_DllExport uint32_t& bitRate();

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::eth::idl::EthStatus& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    int64_t m_timestampNs;
                    ib::sim::eth::idl::EthState m_state;
                    uint32_t m_bitRate;
                };
                /*!
                 * @brief This class represents the enumeration EthMode defined by the user in the IDL file.
                 * @ingroup ETHERNETTOPICS
                 */
                enum EthMode : uint32_t
                {
                    ModeInactive,
                    ModeActive
                };
                /*!
                 * @brief This class represents the structure EthSetMode defined by the user in the IDL file.
                 * @ingroup ETHERNETTOPICS
                 */
                class EthSetMode
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport EthSetMode();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport virtual ~EthSetMode();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::eth::idl::EthSetMode that will be copied.
                     */
                    eProsima_user_DllExport EthSetMode(const EthSetMode &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::eth::idl::EthSetMode that will be copied.
                     */
                    eProsima_user_DllExport EthSetMode(EthSetMode &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::eth::idl::EthSetMode that will be copied.
                     */
                    eProsima_user_DllExport EthSetMode& operator=(const EthSetMode &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::eth::idl::EthSetMode that will be copied.
                     */
                    eProsima_user_DllExport EthSetMode& operator=(EthSetMode &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr);

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr);

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const;

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr();
                    /*!
                     * @brief This function sets a value in member mode
                     * @param _mode New value for member mode
                     */
                    eProsima_user_DllExport void mode(ib::sim::eth::idl::EthMode _mode);

                    /*!
                     * @brief This function returns the value of member mode
                     * @return Value of member mode
                     */
                    eProsima_user_DllExport ib::sim::eth::idl::EthMode mode() const;

                    /*!
                     * @brief This function returns a reference to member mode
                     * @return Reference to member mode
                     */
                    eProsima_user_DllExport ib::sim::eth::idl::EthMode& mode();

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::eth::idl::EthSetMode& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    ib::sim::eth::idl::EthMode m_mode;
                };
            }
        }
    }
}

#endif // _IB_SIM_ETH_IDL_ETHERNETTOPICS_H_