// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file FlexRayTopics.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _IB_SIM_FR_IDL_FLEXRAYTOPICS_H_
#define _IB_SIM_FR_IDL_FLEXRAYTOPICS_H_

// TODO Poner en el contexto.
#include "Common.h"

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(FlexRayTopics_SOURCE)
#define FlexRayTopics_DllAPI __declspec( dllexport )
#else
#define FlexRayTopics_DllAPI __declspec( dllimport )
#endif // FlexRayTopics_SOURCE
#else
#define FlexRayTopics_DllAPI
#endif
#else
#define FlexRayTopics_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

namespace ib
{
    namespace sim
    {
        namespace fr
        {
            namespace idl
            {
                /*!
                 * @brief This class represents the enumeration Channel defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                enum Channel : uint32_t
                {
                    None,
                    A,
                    B,
                    AB
                };
                /*!
                 * @brief This class represents the enumeration ClockPeriod defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                enum ClockPeriod : uint32_t
                {
                    T12_5NS,
                    T25NS,
                    T50NS
                };
                /*!
                 * @brief This class represents the structure ClusterParameters defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                class ClusterParameters
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport ClusterParameters();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport virtual ~ClusterParameters();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::fr::idl::ClusterParameters that will be copied.
                     */
                    eProsima_user_DllExport ClusterParameters(const ClusterParameters &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::fr::idl::ClusterParameters that will be copied.
                     */
                    eProsima_user_DllExport ClusterParameters(ClusterParameters &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::fr::idl::ClusterParameters that will be copied.
                     */
                    eProsima_user_DllExport ClusterParameters& operator=(const ClusterParameters &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::fr::idl::ClusterParameters that will be copied.
                     */
                    eProsima_user_DllExport ClusterParameters& operator=(ClusterParameters &&x);

                    /*!
                     * @brief This function sets a value in member gColdstartAttempts
                     * @param _gColdstartAttempts New value for member gColdstartAttempts
                     */
                    eProsima_user_DllExport void gColdstartAttempts(uint8_t _gColdstartAttempts);

                    /*!
                     * @brief This function returns the value of member gColdstartAttempts
                     * @return Value of member gColdstartAttempts
                     */
                    eProsima_user_DllExport uint8_t gColdstartAttempts() const;

                    /*!
                     * @brief This function returns a reference to member gColdstartAttempts
                     * @return Reference to member gColdstartAttempts
                     */
                    eProsima_user_DllExport uint8_t& gColdstartAttempts();
                    /*!
                     * @brief This function sets a value in member gCycleCountMax
                     * @param _gCycleCountMax New value for member gCycleCountMax
                     */
                    eProsima_user_DllExport void gCycleCountMax(uint8_t _gCycleCountMax);

                    /*!
                     * @brief This function returns the value of member gCycleCountMax
                     * @return Value of member gCycleCountMax
                     */
                    eProsima_user_DllExport uint8_t gCycleCountMax() const;

                    /*!
                     * @brief This function returns a reference to member gCycleCountMax
                     * @return Reference to member gCycleCountMax
                     */
                    eProsima_user_DllExport uint8_t& gCycleCountMax();
                    /*!
                     * @brief This function sets a value in member gdActionPointOffset
                     * @param _gdActionPointOffset New value for member gdActionPointOffset
                     */
                    eProsima_user_DllExport void gdActionPointOffset(uint16_t _gdActionPointOffset);

                    /*!
                     * @brief This function returns the value of member gdActionPointOffset
                     * @return Value of member gdActionPointOffset
                     */
                    eProsima_user_DllExport uint16_t gdActionPointOffset() const;

                    /*!
                     * @brief This function returns a reference to member gdActionPointOffset
                     * @return Reference to member gdActionPointOffset
                     */
                    eProsima_user_DllExport uint16_t& gdActionPointOffset();
                    /*!
                     * @brief This function sets a value in member gdDynamicSlotIdlePhase
                     * @param _gdDynamicSlotIdlePhase New value for member gdDynamicSlotIdlePhase
                     */
                    eProsima_user_DllExport void gdDynamicSlotIdlePhase(uint16_t _gdDynamicSlotIdlePhase);

                    /*!
                     * @brief This function returns the value of member gdDynamicSlotIdlePhase
                     * @return Value of member gdDynamicSlotIdlePhase
                     */
                    eProsima_user_DllExport uint16_t gdDynamicSlotIdlePhase() const;

                    /*!
                     * @brief This function returns a reference to member gdDynamicSlotIdlePhase
                     * @return Reference to member gdDynamicSlotIdlePhase
                     */
                    eProsima_user_DllExport uint16_t& gdDynamicSlotIdlePhase();
                    /*!
                     * @brief This function sets a value in member gdMiniSlot
                     * @param _gdMiniSlot New value for member gdMiniSlot
                     */
                    eProsima_user_DllExport void gdMiniSlot(uint16_t _gdMiniSlot);

                    /*!
                     * @brief This function returns the value of member gdMiniSlot
                     * @return Value of member gdMiniSlot
                     */
                    eProsima_user_DllExport uint16_t gdMiniSlot() const;

                    /*!
                     * @brief This function returns a reference to member gdMiniSlot
                     * @return Reference to member gdMiniSlot
                     */
                    eProsima_user_DllExport uint16_t& gdMiniSlot();
                    /*!
                     * @brief This function sets a value in member gdMiniSlotActionPointOffset
                     * @param _gdMiniSlotActionPointOffset New value for member gdMiniSlotActionPointOffset
                     */
                    eProsima_user_DllExport void gdMiniSlotActionPointOffset(uint16_t _gdMiniSlotActionPointOffset);

                    /*!
                     * @brief This function returns the value of member gdMiniSlotActionPointOffset
                     * @return Value of member gdMiniSlotActionPointOffset
                     */
                    eProsima_user_DllExport uint16_t gdMiniSlotActionPointOffset() const;

                    /*!
                     * @brief This function returns a reference to member gdMiniSlotActionPointOffset
                     * @return Reference to member gdMiniSlotActionPointOffset
                     */
                    eProsima_user_DllExport uint16_t& gdMiniSlotActionPointOffset();
                    /*!
                     * @brief This function sets a value in member gdStaticSlot
                     * @param _gdStaticSlot New value for member gdStaticSlot
                     */
                    eProsima_user_DllExport void gdStaticSlot(uint16_t _gdStaticSlot);

                    /*!
                     * @brief This function returns the value of member gdStaticSlot
                     * @return Value of member gdStaticSlot
                     */
                    eProsima_user_DllExport uint16_t gdStaticSlot() const;

                    /*!
                     * @brief This function returns a reference to member gdStaticSlot
                     * @return Reference to member gdStaticSlot
                     */
                    eProsima_user_DllExport uint16_t& gdStaticSlot();
                    /*!
                     * @brief This function sets a value in member gdSymbolWindow
                     * @param _gdSymbolWindow New value for member gdSymbolWindow
                     */
                    eProsima_user_DllExport void gdSymbolWindow(uint16_t _gdSymbolWindow);

                    /*!
                     * @brief This function returns the value of member gdSymbolWindow
                     * @return Value of member gdSymbolWindow
                     */
                    eProsima_user_DllExport uint16_t gdSymbolWindow() const;

                    /*!
                     * @brief This function returns a reference to member gdSymbolWindow
                     * @return Reference to member gdSymbolWindow
                     */
                    eProsima_user_DllExport uint16_t& gdSymbolWindow();
                    /*!
                     * @brief This function sets a value in member gdSymbolWindowActionPointOffset
                     * @param _gdSymbolWindowActionPointOffset New value for member gdSymbolWindowActionPointOffset
                     */
                    eProsima_user_DllExport void gdSymbolWindowActionPointOffset(uint16_t _gdSymbolWindowActionPointOffset);

                    /*!
                     * @brief This function returns the value of member gdSymbolWindowActionPointOffset
                     * @return Value of member gdSymbolWindowActionPointOffset
                     */
                    eProsima_user_DllExport uint16_t gdSymbolWindowActionPointOffset() const;

                    /*!
                     * @brief This function returns a reference to member gdSymbolWindowActionPointOffset
                     * @return Reference to member gdSymbolWindowActionPointOffset
                     */
                    eProsima_user_DllExport uint16_t& gdSymbolWindowActionPointOffset();
                    /*!
                     * @brief This function sets a value in member gdTSSTransmitter
                     * @param _gdTSSTransmitter New value for member gdTSSTransmitter
                     */
                    eProsima_user_DllExport void gdTSSTransmitter(uint16_t _gdTSSTransmitter);

                    /*!
                     * @brief This function returns the value of member gdTSSTransmitter
                     * @return Value of member gdTSSTransmitter
                     */
                    eProsima_user_DllExport uint16_t gdTSSTransmitter() const;

                    /*!
                     * @brief This function returns a reference to member gdTSSTransmitter
                     * @return Reference to member gdTSSTransmitter
                     */
                    eProsima_user_DllExport uint16_t& gdTSSTransmitter();
                    /*!
                     * @brief This function sets a value in member gdWakeupTxActive
                     * @param _gdWakeupTxActive New value for member gdWakeupTxActive
                     */
                    eProsima_user_DllExport void gdWakeupTxActive(uint16_t _gdWakeupTxActive);

                    /*!
                     * @brief This function returns the value of member gdWakeupTxActive
                     * @return Value of member gdWakeupTxActive
                     */
                    eProsima_user_DllExport uint16_t gdWakeupTxActive() const;

                    /*!
                     * @brief This function returns a reference to member gdWakeupTxActive
                     * @return Reference to member gdWakeupTxActive
                     */
                    eProsima_user_DllExport uint16_t& gdWakeupTxActive();
                    /*!
                     * @brief This function sets a value in member gdWakeupTxIdle
                     * @param _gdWakeupTxIdle New value for member gdWakeupTxIdle
                     */
                    eProsima_user_DllExport void gdWakeupTxIdle(uint16_t _gdWakeupTxIdle);

                    /*!
                     * @brief This function returns the value of member gdWakeupTxIdle
                     * @return Value of member gdWakeupTxIdle
                     */
                    eProsima_user_DllExport uint16_t gdWakeupTxIdle() const;

                    /*!
                     * @brief This function returns a reference to member gdWakeupTxIdle
                     * @return Reference to member gdWakeupTxIdle
                     */
                    eProsima_user_DllExport uint16_t& gdWakeupTxIdle();
                    /*!
                     * @brief This function sets a value in member gListenNoise
                     * @param _gListenNoise New value for member gListenNoise
                     */
                    eProsima_user_DllExport void gListenNoise(uint8_t _gListenNoise);

                    /*!
                     * @brief This function returns the value of member gListenNoise
                     * @return Value of member gListenNoise
                     */
                    eProsima_user_DllExport uint8_t gListenNoise() const;

                    /*!
                     * @brief This function returns a reference to member gListenNoise
                     * @return Reference to member gListenNoise
                     */
                    eProsima_user_DllExport uint8_t& gListenNoise();
                    /*!
                     * @brief This function sets a value in member gMacroPerCycle
                     * @param _gMacroPerCycle New value for member gMacroPerCycle
                     */
                    eProsima_user_DllExport void gMacroPerCycle(uint16_t _gMacroPerCycle);

                    /*!
                     * @brief This function returns the value of member gMacroPerCycle
                     * @return Value of member gMacroPerCycle
                     */
                    eProsima_user_DllExport uint16_t gMacroPerCycle() const;

                    /*!
                     * @brief This function returns a reference to member gMacroPerCycle
                     * @return Reference to member gMacroPerCycle
                     */
                    eProsima_user_DllExport uint16_t& gMacroPerCycle();
                    /*!
                     * @brief This function sets a value in member gMaxWithoutClockCorrectionFatal
                     * @param _gMaxWithoutClockCorrectionFatal New value for member gMaxWithoutClockCorrectionFatal
                     */
                    eProsima_user_DllExport void gMaxWithoutClockCorrectionFatal(uint8_t _gMaxWithoutClockCorrectionFatal);

                    /*!
                     * @brief This function returns the value of member gMaxWithoutClockCorrectionFatal
                     * @return Value of member gMaxWithoutClockCorrectionFatal
                     */
                    eProsima_user_DllExport uint8_t gMaxWithoutClockCorrectionFatal() const;

                    /*!
                     * @brief This function returns a reference to member gMaxWithoutClockCorrectionFatal
                     * @return Reference to member gMaxWithoutClockCorrectionFatal
                     */
                    eProsima_user_DllExport uint8_t& gMaxWithoutClockCorrectionFatal();
                    /*!
                     * @brief This function sets a value in member gMaxWithoutClockCorrectionPassive
                     * @param _gMaxWithoutClockCorrectionPassive New value for member gMaxWithoutClockCorrectionPassive
                     */
                    eProsima_user_DllExport void gMaxWithoutClockCorrectionPassive(uint8_t _gMaxWithoutClockCorrectionPassive);

                    /*!
                     * @brief This function returns the value of member gMaxWithoutClockCorrectionPassive
                     * @return Value of member gMaxWithoutClockCorrectionPassive
                     */
                    eProsima_user_DllExport uint8_t gMaxWithoutClockCorrectionPassive() const;

                    /*!
                     * @brief This function returns a reference to member gMaxWithoutClockCorrectionPassive
                     * @return Reference to member gMaxWithoutClockCorrectionPassive
                     */
                    eProsima_user_DllExport uint8_t& gMaxWithoutClockCorrectionPassive();
                    /*!
                     * @brief This function sets a value in member gNumberOfMiniSlots
                     * @param _gNumberOfMiniSlots New value for member gNumberOfMiniSlots
                     */
                    eProsima_user_DllExport void gNumberOfMiniSlots(uint16_t _gNumberOfMiniSlots);

                    /*!
                     * @brief This function returns the value of member gNumberOfMiniSlots
                     * @return Value of member gNumberOfMiniSlots
                     */
                    eProsima_user_DllExport uint16_t gNumberOfMiniSlots() const;

                    /*!
                     * @brief This function returns a reference to member gNumberOfMiniSlots
                     * @return Reference to member gNumberOfMiniSlots
                     */
                    eProsima_user_DllExport uint16_t& gNumberOfMiniSlots();
                    /*!
                     * @brief This function sets a value in member gNumberOfStaticSlots
                     * @param _gNumberOfStaticSlots New value for member gNumberOfStaticSlots
                     */
                    eProsima_user_DllExport void gNumberOfStaticSlots(uint16_t _gNumberOfStaticSlots);

                    /*!
                     * @brief This function returns the value of member gNumberOfStaticSlots
                     * @return Value of member gNumberOfStaticSlots
                     */
                    eProsima_user_DllExport uint16_t gNumberOfStaticSlots() const;

                    /*!
                     * @brief This function returns a reference to member gNumberOfStaticSlots
                     * @return Reference to member gNumberOfStaticSlots
                     */
                    eProsima_user_DllExport uint16_t& gNumberOfStaticSlots();
                    /*!
                     * @brief This function sets a value in member gPayloadLengthStatic
                     * @param _gPayloadLengthStatic New value for member gPayloadLengthStatic
                     */
                    eProsima_user_DllExport void gPayloadLengthStatic(uint16_t _gPayloadLengthStatic);

                    /*!
                     * @brief This function returns the value of member gPayloadLengthStatic
                     * @return Value of member gPayloadLengthStatic
                     */
                    eProsima_user_DllExport uint16_t gPayloadLengthStatic() const;

                    /*!
                     * @brief This function returns a reference to member gPayloadLengthStatic
                     * @return Reference to member gPayloadLengthStatic
                     */
                    eProsima_user_DllExport uint16_t& gPayloadLengthStatic();
                    /*!
                     * @brief This function sets a value in member gSyncFrameIDCountMax
                     * @param _gSyncFrameIDCountMax New value for member gSyncFrameIDCountMax
                     */
                    eProsima_user_DllExport void gSyncFrameIDCountMax(uint8_t _gSyncFrameIDCountMax);

                    /*!
                     * @brief This function returns the value of member gSyncFrameIDCountMax
                     * @return Value of member gSyncFrameIDCountMax
                     */
                    eProsima_user_DllExport uint8_t gSyncFrameIDCountMax() const;

                    /*!
                     * @brief This function returns a reference to member gSyncFrameIDCountMax
                     * @return Reference to member gSyncFrameIDCountMax
                     */
                    eProsima_user_DllExport uint8_t& gSyncFrameIDCountMax();

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::fr::idl::ClusterParameters& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    uint8_t m_gColdstartAttempts;
                    uint8_t m_gCycleCountMax;
                    uint16_t m_gdActionPointOffset;
                    uint16_t m_gdDynamicSlotIdlePhase;
                    uint16_t m_gdMiniSlot;
                    uint16_t m_gdMiniSlotActionPointOffset;
                    uint16_t m_gdStaticSlot;
                    uint16_t m_gdSymbolWindow;
                    uint16_t m_gdSymbolWindowActionPointOffset;
                    uint16_t m_gdTSSTransmitter;
                    uint16_t m_gdWakeupTxActive;
                    uint16_t m_gdWakeupTxIdle;
                    uint8_t m_gListenNoise;
                    uint16_t m_gMacroPerCycle;
                    uint8_t m_gMaxWithoutClockCorrectionFatal;
                    uint8_t m_gMaxWithoutClockCorrectionPassive;
                    uint16_t m_gNumberOfMiniSlots;
                    uint16_t m_gNumberOfStaticSlots;
                    uint16_t m_gPayloadLengthStatic;
                    uint8_t m_gSyncFrameIDCountMax;
                };
                /*!
                 * @brief This class represents the structure NodeParameters defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                class NodeParameters
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport NodeParameters();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport virtual ~NodeParameters();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::fr::idl::NodeParameters that will be copied.
                     */
                    eProsima_user_DllExport NodeParameters(const NodeParameters &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::fr::idl::NodeParameters that will be copied.
                     */
                    eProsima_user_DllExport NodeParameters(NodeParameters &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::fr::idl::NodeParameters that will be copied.
                     */
                    eProsima_user_DllExport NodeParameters& operator=(const NodeParameters &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::fr::idl::NodeParameters that will be copied.
                     */
                    eProsima_user_DllExport NodeParameters& operator=(NodeParameters &&x);

                    /*!
                     * @brief This function sets a value in member pAllowHaltDueToClock
                     * @param _pAllowHaltDueToClock New value for member pAllowHaltDueToClock
                     */
                    eProsima_user_DllExport void pAllowHaltDueToClock(uint8_t _pAllowHaltDueToClock);

                    /*!
                     * @brief This function returns the value of member pAllowHaltDueToClock
                     * @return Value of member pAllowHaltDueToClock
                     */
                    eProsima_user_DllExport uint8_t pAllowHaltDueToClock() const;

                    /*!
                     * @brief This function returns a reference to member pAllowHaltDueToClock
                     * @return Reference to member pAllowHaltDueToClock
                     */
                    eProsima_user_DllExport uint8_t& pAllowHaltDueToClock();
                    /*!
                     * @brief This function sets a value in member pAllowPassiveToActive
                     * @param _pAllowPassiveToActive New value for member pAllowPassiveToActive
                     */
                    eProsima_user_DllExport void pAllowPassiveToActive(uint8_t _pAllowPassiveToActive);

                    /*!
                     * @brief This function returns the value of member pAllowPassiveToActive
                     * @return Value of member pAllowPassiveToActive
                     */
                    eProsima_user_DllExport uint8_t pAllowPassiveToActive() const;

                    /*!
                     * @brief This function returns a reference to member pAllowPassiveToActive
                     * @return Reference to member pAllowPassiveToActive
                     */
                    eProsima_user_DllExport uint8_t& pAllowPassiveToActive();
                    /*!
                     * @brief This function sets a value in member pChannels
                     * @param _pChannels New value for member pChannels
                     */
                    eProsima_user_DllExport void pChannels(ib::sim::fr::idl::Channel _pChannels);

                    /*!
                     * @brief This function returns the value of member pChannels
                     * @return Value of member pChannels
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::Channel pChannels() const;

                    /*!
                     * @brief This function returns a reference to member pChannels
                     * @return Reference to member pChannels
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::Channel& pChannels();
                    /*!
                     * @brief This function sets a value in member pClusterDriftDamping
                     * @param _pClusterDriftDamping New value for member pClusterDriftDamping
                     */
                    eProsima_user_DllExport void pClusterDriftDamping(uint8_t _pClusterDriftDamping);

                    /*!
                     * @brief This function returns the value of member pClusterDriftDamping
                     * @return Value of member pClusterDriftDamping
                     */
                    eProsima_user_DllExport uint8_t pClusterDriftDamping() const;

                    /*!
                     * @brief This function returns a reference to member pClusterDriftDamping
                     * @return Reference to member pClusterDriftDamping
                     */
                    eProsima_user_DllExport uint8_t& pClusterDriftDamping();
                    /*!
                     * @brief This function sets a value in member pdAcceptedStartupRange
                     * @param _pdAcceptedStartupRange New value for member pdAcceptedStartupRange
                     */
                    eProsima_user_DllExport void pdAcceptedStartupRange(int32_t _pdAcceptedStartupRange);

                    /*!
                     * @brief This function returns the value of member pdAcceptedStartupRange
                     * @return Value of member pdAcceptedStartupRange
                     */
                    eProsima_user_DllExport int32_t pdAcceptedStartupRange() const;

                    /*!
                     * @brief This function returns a reference to member pdAcceptedStartupRange
                     * @return Reference to member pdAcceptedStartupRange
                     */
                    eProsima_user_DllExport int32_t& pdAcceptedStartupRange();
                    /*!
                     * @brief This function sets a value in member pdListenTimeout
                     * @param _pdListenTimeout New value for member pdListenTimeout
                     */
                    eProsima_user_DllExport void pdListenTimeout(int32_t _pdListenTimeout);

                    /*!
                     * @brief This function returns the value of member pdListenTimeout
                     * @return Value of member pdListenTimeout
                     */
                    eProsima_user_DllExport int32_t pdListenTimeout() const;

                    /*!
                     * @brief This function returns a reference to member pdListenTimeout
                     * @return Reference to member pdListenTimeout
                     */
                    eProsima_user_DllExport int32_t& pdListenTimeout();
                    /*!
                     * @brief This function sets a value in member pKeySlotId
                     * @param _pKeySlotId New value for member pKeySlotId
                     */
                    eProsima_user_DllExport void pKeySlotId(uint16_t _pKeySlotId);

                    /*!
                     * @brief This function returns the value of member pKeySlotId
                     * @return Value of member pKeySlotId
                     */
                    eProsima_user_DllExport uint16_t pKeySlotId() const;

                    /*!
                     * @brief This function returns a reference to member pKeySlotId
                     * @return Reference to member pKeySlotId
                     */
                    eProsima_user_DllExport uint16_t& pKeySlotId();
                    /*!
                     * @brief This function sets a value in member pKeySlotOnlyEnabled
                     * @param _pKeySlotOnlyEnabled New value for member pKeySlotOnlyEnabled
                     */
                    eProsima_user_DllExport void pKeySlotOnlyEnabled(uint8_t _pKeySlotOnlyEnabled);

                    /*!
                     * @brief This function returns the value of member pKeySlotOnlyEnabled
                     * @return Value of member pKeySlotOnlyEnabled
                     */
                    eProsima_user_DllExport uint8_t pKeySlotOnlyEnabled() const;

                    /*!
                     * @brief This function returns a reference to member pKeySlotOnlyEnabled
                     * @return Reference to member pKeySlotOnlyEnabled
                     */
                    eProsima_user_DllExport uint8_t& pKeySlotOnlyEnabled();
                    /*!
                     * @brief This function sets a value in member pKeySlotUsedForStartup
                     * @param _pKeySlotUsedForStartup New value for member pKeySlotUsedForStartup
                     */
                    eProsima_user_DllExport void pKeySlotUsedForStartup(uint8_t _pKeySlotUsedForStartup);

                    /*!
                     * @brief This function returns the value of member pKeySlotUsedForStartup
                     * @return Value of member pKeySlotUsedForStartup
                     */
                    eProsima_user_DllExport uint8_t pKeySlotUsedForStartup() const;

                    /*!
                     * @brief This function returns a reference to member pKeySlotUsedForStartup
                     * @return Reference to member pKeySlotUsedForStartup
                     */
                    eProsima_user_DllExport uint8_t& pKeySlotUsedForStartup();
                    /*!
                     * @brief This function sets a value in member pKeySlotUsedForSync
                     * @param _pKeySlotUsedForSync New value for member pKeySlotUsedForSync
                     */
                    eProsima_user_DllExport void pKeySlotUsedForSync(uint8_t _pKeySlotUsedForSync);

                    /*!
                     * @brief This function returns the value of member pKeySlotUsedForSync
                     * @return Value of member pKeySlotUsedForSync
                     */
                    eProsima_user_DllExport uint8_t pKeySlotUsedForSync() const;

                    /*!
                     * @brief This function returns a reference to member pKeySlotUsedForSync
                     * @return Reference to member pKeySlotUsedForSync
                     */
                    eProsima_user_DllExport uint8_t& pKeySlotUsedForSync();
                    /*!
                     * @brief This function sets a value in member pLatestTx
                     * @param _pLatestTx New value for member pLatestTx
                     */
                    eProsima_user_DllExport void pLatestTx(uint16_t _pLatestTx);

                    /*!
                     * @brief This function returns the value of member pLatestTx
                     * @return Value of member pLatestTx
                     */
                    eProsima_user_DllExport uint16_t pLatestTx() const;

                    /*!
                     * @brief This function returns a reference to member pLatestTx
                     * @return Reference to member pLatestTx
                     */
                    eProsima_user_DllExport uint16_t& pLatestTx();
                    /*!
                     * @brief This function sets a value in member pMacroInitialOffsetA
                     * @param _pMacroInitialOffsetA New value for member pMacroInitialOffsetA
                     */
                    eProsima_user_DllExport void pMacroInitialOffsetA(uint8_t _pMacroInitialOffsetA);

                    /*!
                     * @brief This function returns the value of member pMacroInitialOffsetA
                     * @return Value of member pMacroInitialOffsetA
                     */
                    eProsima_user_DllExport uint8_t pMacroInitialOffsetA() const;

                    /*!
                     * @brief This function returns a reference to member pMacroInitialOffsetA
                     * @return Reference to member pMacroInitialOffsetA
                     */
                    eProsima_user_DllExport uint8_t& pMacroInitialOffsetA();
                    /*!
                     * @brief This function sets a value in member pMacroInitialOffsetB
                     * @param _pMacroInitialOffsetB New value for member pMacroInitialOffsetB
                     */
                    eProsima_user_DllExport void pMacroInitialOffsetB(uint8_t _pMacroInitialOffsetB);

                    /*!
                     * @brief This function returns the value of member pMacroInitialOffsetB
                     * @return Value of member pMacroInitialOffsetB
                     */
                    eProsima_user_DllExport uint8_t pMacroInitialOffsetB() const;

                    /*!
                     * @brief This function returns a reference to member pMacroInitialOffsetB
                     * @return Reference to member pMacroInitialOffsetB
                     */
                    eProsima_user_DllExport uint8_t& pMacroInitialOffsetB();
                    /*!
                     * @brief This function sets a value in member pMicroInitialOffsetA
                     * @param _pMicroInitialOffsetA New value for member pMicroInitialOffsetA
                     */
                    eProsima_user_DllExport void pMicroInitialOffsetA(int32_t _pMicroInitialOffsetA);

                    /*!
                     * @brief This function returns the value of member pMicroInitialOffsetA
                     * @return Value of member pMicroInitialOffsetA
                     */
                    eProsima_user_DllExport int32_t pMicroInitialOffsetA() const;

                    /*!
                     * @brief This function returns a reference to member pMicroInitialOffsetA
                     * @return Reference to member pMicroInitialOffsetA
                     */
                    eProsima_user_DllExport int32_t& pMicroInitialOffsetA();
                    /*!
                     * @brief This function sets a value in member pMicroInitialOffsetB
                     * @param _pMicroInitialOffsetB New value for member pMicroInitialOffsetB
                     */
                    eProsima_user_DllExport void pMicroInitialOffsetB(int32_t _pMicroInitialOffsetB);

                    /*!
                     * @brief This function returns the value of member pMicroInitialOffsetB
                     * @return Value of member pMicroInitialOffsetB
                     */
                    eProsima_user_DllExport int32_t pMicroInitialOffsetB() const;

                    /*!
                     * @brief This function returns a reference to member pMicroInitialOffsetB
                     * @return Reference to member pMicroInitialOffsetB
                     */
                    eProsima_user_DllExport int32_t& pMicroInitialOffsetB();
                    /*!
                     * @brief This function sets a value in member pMicroPerCycle
                     * @param _pMicroPerCycle New value for member pMicroPerCycle
                     */
                    eProsima_user_DllExport void pMicroPerCycle(int32_t _pMicroPerCycle);

                    /*!
                     * @brief This function returns the value of member pMicroPerCycle
                     * @return Value of member pMicroPerCycle
                     */
                    eProsima_user_DllExport int32_t pMicroPerCycle() const;

                    /*!
                     * @brief This function returns a reference to member pMicroPerCycle
                     * @return Reference to member pMicroPerCycle
                     */
                    eProsima_user_DllExport int32_t& pMicroPerCycle();
                    /*!
                     * @brief This function sets a value in member pOffsetCorrectionOut
                     * @param _pOffsetCorrectionOut New value for member pOffsetCorrectionOut
                     */
                    eProsima_user_DllExport void pOffsetCorrectionOut(int32_t _pOffsetCorrectionOut);

                    /*!
                     * @brief This function returns the value of member pOffsetCorrectionOut
                     * @return Value of member pOffsetCorrectionOut
                     */
                    eProsima_user_DllExport int32_t pOffsetCorrectionOut() const;

                    /*!
                     * @brief This function returns a reference to member pOffsetCorrectionOut
                     * @return Reference to member pOffsetCorrectionOut
                     */
                    eProsima_user_DllExport int32_t& pOffsetCorrectionOut();
                    /*!
                     * @brief This function sets a value in member pOffsetCorrectionStart
                     * @param _pOffsetCorrectionStart New value for member pOffsetCorrectionStart
                     */
                    eProsima_user_DllExport void pOffsetCorrectionStart(uint16_t _pOffsetCorrectionStart);

                    /*!
                     * @brief This function returns the value of member pOffsetCorrectionStart
                     * @return Value of member pOffsetCorrectionStart
                     */
                    eProsima_user_DllExport uint16_t pOffsetCorrectionStart() const;

                    /*!
                     * @brief This function returns a reference to member pOffsetCorrectionStart
                     * @return Reference to member pOffsetCorrectionStart
                     */
                    eProsima_user_DllExport uint16_t& pOffsetCorrectionStart();
                    /*!
                     * @brief This function sets a value in member pRateCorrectionOut
                     * @param _pRateCorrectionOut New value for member pRateCorrectionOut
                     */
                    eProsima_user_DllExport void pRateCorrectionOut(int32_t _pRateCorrectionOut);

                    /*!
                     * @brief This function returns the value of member pRateCorrectionOut
                     * @return Value of member pRateCorrectionOut
                     */
                    eProsima_user_DllExport int32_t pRateCorrectionOut() const;

                    /*!
                     * @brief This function returns a reference to member pRateCorrectionOut
                     * @return Reference to member pRateCorrectionOut
                     */
                    eProsima_user_DllExport int32_t& pRateCorrectionOut();
                    /*!
                     * @brief This function sets a value in member pWakeupChannel
                     * @param _pWakeupChannel New value for member pWakeupChannel
                     */
                    eProsima_user_DllExport void pWakeupChannel(ib::sim::fr::idl::Channel _pWakeupChannel);

                    /*!
                     * @brief This function returns the value of member pWakeupChannel
                     * @return Value of member pWakeupChannel
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::Channel pWakeupChannel() const;

                    /*!
                     * @brief This function returns a reference to member pWakeupChannel
                     * @return Reference to member pWakeupChannel
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::Channel& pWakeupChannel();
                    /*!
                     * @brief This function sets a value in member pWakeupPattern
                     * @param _pWakeupPattern New value for member pWakeupPattern
                     */
                    eProsima_user_DllExport void pWakeupPattern(uint8_t _pWakeupPattern);

                    /*!
                     * @brief This function returns the value of member pWakeupPattern
                     * @return Value of member pWakeupPattern
                     */
                    eProsima_user_DllExport uint8_t pWakeupPattern() const;

                    /*!
                     * @brief This function returns a reference to member pWakeupPattern
                     * @return Reference to member pWakeupPattern
                     */
                    eProsima_user_DllExport uint8_t& pWakeupPattern();
                    /*!
                     * @brief This function sets a value in member pdMicrotick
                     * @param _pdMicrotick New value for member pdMicrotick
                     */
                    eProsima_user_DllExport void pdMicrotick(ib::sim::fr::idl::ClockPeriod _pdMicrotick);

                    /*!
                     * @brief This function returns the value of member pdMicrotick
                     * @return Value of member pdMicrotick
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::ClockPeriod pdMicrotick() const;

                    /*!
                     * @brief This function returns a reference to member pdMicrotick
                     * @return Reference to member pdMicrotick
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::ClockPeriod& pdMicrotick();
                    /*!
                     * @brief This function sets a value in member pSamplesPerMicrotick
                     * @param _pSamplesPerMicrotick New value for member pSamplesPerMicrotick
                     */
                    eProsima_user_DllExport void pSamplesPerMicrotick(uint8_t _pSamplesPerMicrotick);

                    /*!
                     * @brief This function returns the value of member pSamplesPerMicrotick
                     * @return Value of member pSamplesPerMicrotick
                     */
                    eProsima_user_DllExport uint8_t pSamplesPerMicrotick() const;

                    /*!
                     * @brief This function returns a reference to member pSamplesPerMicrotick
                     * @return Reference to member pSamplesPerMicrotick
                     */
                    eProsima_user_DllExport uint8_t& pSamplesPerMicrotick();

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::fr::idl::NodeParameters& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    uint8_t m_pAllowHaltDueToClock;
                    uint8_t m_pAllowPassiveToActive;
                    ib::sim::fr::idl::Channel m_pChannels;
                    uint8_t m_pClusterDriftDamping;
                    int32_t m_pdAcceptedStartupRange;
                    int32_t m_pdListenTimeout;
                    uint16_t m_pKeySlotId;
                    uint8_t m_pKeySlotOnlyEnabled;
                    uint8_t m_pKeySlotUsedForStartup;
                    uint8_t m_pKeySlotUsedForSync;
                    uint16_t m_pLatestTx;
                    uint8_t m_pMacroInitialOffsetA;
                    uint8_t m_pMacroInitialOffsetB;
                    int32_t m_pMicroInitialOffsetA;
                    int32_t m_pMicroInitialOffsetB;
                    int32_t m_pMicroPerCycle;
                    int32_t m_pOffsetCorrectionOut;
                    uint16_t m_pOffsetCorrectionStart;
                    int32_t m_pRateCorrectionOut;
                    ib::sim::fr::idl::Channel m_pWakeupChannel;
                    uint8_t m_pWakeupPattern;
                    ib::sim::fr::idl::ClockPeriod m_pdMicrotick;
                    uint8_t m_pSamplesPerMicrotick;
                };
                /*!
                 * @brief This class represents the enumeration TransmissionMode defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                enum TransmissionMode : uint32_t
                {
                    SingleShot,
                    Continuous
                };
                /*!
                 * @brief This class represents the structure TxBufferConfig defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                class TxBufferConfig
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport TxBufferConfig();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport virtual ~TxBufferConfig();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::fr::idl::TxBufferConfig that will be copied.
                     */
                    eProsima_user_DllExport TxBufferConfig(const TxBufferConfig &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::fr::idl::TxBufferConfig that will be copied.
                     */
                    eProsima_user_DllExport TxBufferConfig(TxBufferConfig &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::fr::idl::TxBufferConfig that will be copied.
                     */
                    eProsima_user_DllExport TxBufferConfig& operator=(const TxBufferConfig &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::fr::idl::TxBufferConfig that will be copied.
                     */
                    eProsima_user_DllExport TxBufferConfig& operator=(TxBufferConfig &&x);

                    /*!
                     * @brief This function sets a value in member channels
                     * @param _channels New value for member channels
                     */
                    eProsima_user_DllExport void channels(ib::sim::fr::idl::Channel _channels);

                    /*!
                     * @brief This function returns the value of member channels
                     * @return Value of member channels
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::Channel channels() const;

                    /*!
                     * @brief This function returns a reference to member channels
                     * @return Reference to member channels
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::Channel& channels();
                    /*!
                     * @brief This function sets a value in member slotId
                     * @param _slotId New value for member slotId
                     */
                    eProsima_user_DllExport void slotId(uint16_t _slotId);

                    /*!
                     * @brief This function returns the value of member slotId
                     * @return Value of member slotId
                     */
                    eProsima_user_DllExport uint16_t slotId() const;

                    /*!
                     * @brief This function returns a reference to member slotId
                     * @return Reference to member slotId
                     */
                    eProsima_user_DllExport uint16_t& slotId();
                    /*!
                     * @brief This function sets a value in member offset
                     * @param _offset New value for member offset
                     */
                    eProsima_user_DllExport void offset(uint8_t _offset);

                    /*!
                     * @brief This function returns the value of member offset
                     * @return Value of member offset
                     */
                    eProsima_user_DllExport uint8_t offset() const;

                    /*!
                     * @brief This function returns a reference to member offset
                     * @return Reference to member offset
                     */
                    eProsima_user_DllExport uint8_t& offset();
                    /*!
                     * @brief This function sets a value in member repetition
                     * @param _repetition New value for member repetition
                     */
                    eProsima_user_DllExport void repetition(uint8_t _repetition);

                    /*!
                     * @brief This function returns the value of member repetition
                     * @return Value of member repetition
                     */
                    eProsima_user_DllExport uint8_t repetition() const;

                    /*!
                     * @brief This function returns a reference to member repetition
                     * @return Reference to member repetition
                     */
                    eProsima_user_DllExport uint8_t& repetition();
                    /*!
                     * @brief This function sets a value in member hasPayloadPreambleIndicator
                     * @param _hasPayloadPreambleIndicator New value for member hasPayloadPreambleIndicator
                     */
                    eProsima_user_DllExport void hasPayloadPreambleIndicator(bool _hasPayloadPreambleIndicator);

                    /*!
                     * @brief This function returns the value of member hasPayloadPreambleIndicator
                     * @return Value of member hasPayloadPreambleIndicator
                     */
                    eProsima_user_DllExport bool hasPayloadPreambleIndicator() const;

                    /*!
                     * @brief This function returns a reference to member hasPayloadPreambleIndicator
                     * @return Reference to member hasPayloadPreambleIndicator
                     */
                    eProsima_user_DllExport bool& hasPayloadPreambleIndicator();
                    /*!
                     * @brief This function sets a value in member headerCrc
                     * @param _headerCrc New value for member headerCrc
                     */
                    eProsima_user_DllExport void headerCrc(uint16_t _headerCrc);

                    /*!
                     * @brief This function returns the value of member headerCrc
                     * @return Value of member headerCrc
                     */
                    eProsima_user_DllExport uint16_t headerCrc() const;

                    /*!
                     * @brief This function returns a reference to member headerCrc
                     * @return Reference to member headerCrc
                     */
                    eProsima_user_DllExport uint16_t& headerCrc();
                    /*!
                     * @brief This function sets a value in member transmissionMode
                     * @param _transmissionMode New value for member transmissionMode
                     */
                    eProsima_user_DllExport void transmissionMode(ib::sim::fr::idl::TransmissionMode _transmissionMode);

                    /*!
                     * @brief This function returns the value of member transmissionMode
                     * @return Value of member transmissionMode
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::TransmissionMode transmissionMode() const;

                    /*!
                     * @brief This function returns a reference to member transmissionMode
                     * @return Reference to member transmissionMode
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::TransmissionMode& transmissionMode();

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::fr::idl::TxBufferConfig& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::sim::fr::idl::Channel m_channels;
                    uint16_t m_slotId;
                    uint8_t m_offset;
                    uint8_t m_repetition;
                    bool m_hasPayloadPreambleIndicator;
                    uint16_t m_headerCrc;
                    ib::sim::fr::idl::TransmissionMode m_transmissionMode;
                };
                /*!
                 * @brief This class represents the structure ControllerConfig defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                class ControllerConfig
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport ControllerConfig();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport virtual ~ControllerConfig();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::fr::idl::ControllerConfig that will be copied.
                     */
                    eProsima_user_DllExport ControllerConfig(const ControllerConfig &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::fr::idl::ControllerConfig that will be copied.
                     */
                    eProsima_user_DllExport ControllerConfig(ControllerConfig &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::fr::idl::ControllerConfig that will be copied.
                     */
                    eProsima_user_DllExport ControllerConfig& operator=(const ControllerConfig &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::fr::idl::ControllerConfig that will be copied.
                     */
                    eProsima_user_DllExport ControllerConfig& operator=(ControllerConfig &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr);

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr);

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const;

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr();
                    /*!
                     * @brief This function copies the value in member clusterParams
                     * @param _clusterParams New value to be copied in member clusterParams
                     */
                    eProsima_user_DllExport void clusterParams(const ib::sim::fr::idl::ClusterParameters &_clusterParams);

                    /*!
                     * @brief This function moves the value in member clusterParams
                     * @param _clusterParams New value to be moved in member clusterParams
                     */
                    eProsima_user_DllExport void clusterParams(ib::sim::fr::idl::ClusterParameters &&_clusterParams);

                    /*!
                     * @brief This function returns a constant reference to member clusterParams
                     * @return Constant reference to member clusterParams
                     */
                    eProsima_user_DllExport const ib::sim::fr::idl::ClusterParameters& clusterParams() const;

                    /*!
                     * @brief This function returns a reference to member clusterParams
                     * @return Reference to member clusterParams
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::ClusterParameters& clusterParams();
                    /*!
                     * @brief This function copies the value in member nodeParams
                     * @param _nodeParams New value to be copied in member nodeParams
                     */
                    eProsima_user_DllExport void nodeParams(const ib::sim::fr::idl::NodeParameters &_nodeParams);

                    /*!
                     * @brief This function moves the value in member nodeParams
                     * @param _nodeParams New value to be moved in member nodeParams
                     */
                    eProsima_user_DllExport void nodeParams(ib::sim::fr::idl::NodeParameters &&_nodeParams);

                    /*!
                     * @brief This function returns a constant reference to member nodeParams
                     * @return Constant reference to member nodeParams
                     */
                    eProsima_user_DllExport const ib::sim::fr::idl::NodeParameters& nodeParams() const;

                    /*!
                     * @brief This function returns a reference to member nodeParams
                     * @return Reference to member nodeParams
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::NodeParameters& nodeParams();
                    /*!
                     * @brief This function copies the value in member bufferConfigs
                     * @param _bufferConfigs New value to be copied in member bufferConfigs
                     */
                    eProsima_user_DllExport void bufferConfigs(const std::vector<ib::sim::fr::idl::TxBufferConfig> &_bufferConfigs);

                    /*!
                     * @brief This function moves the value in member bufferConfigs
                     * @param _bufferConfigs New value to be moved in member bufferConfigs
                     */
                    eProsima_user_DllExport void bufferConfigs(std::vector<ib::sim::fr::idl::TxBufferConfig> &&_bufferConfigs);

                    /*!
                     * @brief This function returns a constant reference to member bufferConfigs
                     * @return Constant reference to member bufferConfigs
                     */
                    eProsima_user_DllExport const std::vector<ib::sim::fr::idl::TxBufferConfig>& bufferConfigs() const;

                    /*!
                     * @brief This function returns a reference to member bufferConfigs
                     * @return Reference to member bufferConfigs
                     */
                    eProsima_user_DllExport std::vector<ib::sim::fr::idl::TxBufferConfig>& bufferConfigs();

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::fr::idl::ControllerConfig& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    ib::sim::fr::idl::ClusterParameters m_clusterParams;
                    ib::sim::fr::idl::NodeParameters m_nodeParams;
                    std::vector<ib::sim::fr::idl::TxBufferConfig> m_bufferConfigs;
                };
                /*!
                 * @brief This class represents the structure TxBufferConfigUpdate defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                class TxBufferConfigUpdate
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport TxBufferConfigUpdate();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport virtual ~TxBufferConfigUpdate();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::fr::idl::TxBufferConfigUpdate that will be copied.
                     */
                    eProsima_user_DllExport TxBufferConfigUpdate(const TxBufferConfigUpdate &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::fr::idl::TxBufferConfigUpdate that will be copied.
                     */
                    eProsima_user_DllExport TxBufferConfigUpdate(TxBufferConfigUpdate &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::fr::idl::TxBufferConfigUpdate that will be copied.
                     */
                    eProsima_user_DllExport TxBufferConfigUpdate& operator=(const TxBufferConfigUpdate &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::fr::idl::TxBufferConfigUpdate that will be copied.
                     */
                    eProsima_user_DllExport TxBufferConfigUpdate& operator=(TxBufferConfigUpdate &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr);

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr);

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const;

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr();
                    /*!
                     * @brief This function sets a value in member txBufferIndex
                     * @param _txBufferIndex New value for member txBufferIndex
                     */
                    eProsima_user_DllExport void txBufferIndex(uint16_t _txBufferIndex);

                    /*!
                     * @brief This function returns the value of member txBufferIndex
                     * @return Value of member txBufferIndex
                     */
                    eProsima_user_DllExport uint16_t txBufferIndex() const;

                    /*!
                     * @brief This function returns a reference to member txBufferIndex
                     * @return Reference to member txBufferIndex
                     */
                    eProsima_user_DllExport uint16_t& txBufferIndex();
                    /*!
                     * @brief This function copies the value in member txBufferConfig
                     * @param _txBufferConfig New value to be copied in member txBufferConfig
                     */
                    eProsima_user_DllExport void txBufferConfig(const ib::sim::fr::idl::TxBufferConfig &_txBufferConfig);

                    /*!
                     * @brief This function moves the value in member txBufferConfig
                     * @param _txBufferConfig New value to be moved in member txBufferConfig
                     */
                    eProsima_user_DllExport void txBufferConfig(ib::sim::fr::idl::TxBufferConfig &&_txBufferConfig);

                    /*!
                     * @brief This function returns a constant reference to member txBufferConfig
                     * @return Constant reference to member txBufferConfig
                     */
                    eProsima_user_DllExport const ib::sim::fr::idl::TxBufferConfig& txBufferConfig() const;

                    /*!
                     * @brief This function returns a reference to member txBufferConfig
                     * @return Reference to member txBufferConfig
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::TxBufferConfig& txBufferConfig();

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::fr::idl::TxBufferConfigUpdate& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    uint16_t m_txBufferIndex;
                    ib::sim::fr::idl::TxBufferConfig m_txBufferConfig;
                };
                /*!
                 * @brief This class represents the structure TxBufferUpdate defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                class TxBufferUpdate
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport TxBufferUpdate();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport virtual ~TxBufferUpdate();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::fr::idl::TxBufferUpdate that will be copied.
                     */
                    eProsima_user_DllExport TxBufferUpdate(const TxBufferUpdate &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::fr::idl::TxBufferUpdate that will be copied.
                     */
                    eProsima_user_DllExport TxBufferUpdate(TxBufferUpdate &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::fr::idl::TxBufferUpdate that will be copied.
                     */
                    eProsima_user_DllExport TxBufferUpdate& operator=(const TxBufferUpdate &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::fr::idl::TxBufferUpdate that will be copied.
                     */
                    eProsima_user_DllExport TxBufferUpdate& operator=(TxBufferUpdate &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr);

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr);

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const;

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr();
                    /*!
                     * @brief This function sets a value in member txBufferIndex
                     * @param _txBufferIndex New value for member txBufferIndex
                     */
                    eProsima_user_DllExport void txBufferIndex(uint16_t _txBufferIndex);

                    /*!
                     * @brief This function returns the value of member txBufferIndex
                     * @return Value of member txBufferIndex
                     */
                    eProsima_user_DllExport uint16_t txBufferIndex() const;

                    /*!
                     * @brief This function returns a reference to member txBufferIndex
                     * @return Reference to member txBufferIndex
                     */
                    eProsima_user_DllExport uint16_t& txBufferIndex();
                    /*!
                     * @brief This function sets a value in member payloadDataValid
                     * @param _payloadDataValid New value for member payloadDataValid
                     */
                    eProsima_user_DllExport void payloadDataValid(bool _payloadDataValid);

                    /*!
                     * @brief This function returns the value of member payloadDataValid
                     * @return Value of member payloadDataValid
                     */
                    eProsima_user_DllExport bool payloadDataValid() const;

                    /*!
                     * @brief This function returns a reference to member payloadDataValid
                     * @return Reference to member payloadDataValid
                     */
                    eProsima_user_DllExport bool& payloadDataValid();
                    /*!
                     * @brief This function copies the value in member payload
                     * @param _payload New value to be copied in member payload
                     */
                    eProsima_user_DllExport void payload(const std::vector<uint8_t> &_payload);

                    /*!
                     * @brief This function moves the value in member payload
                     * @param _payload New value to be moved in member payload
                     */
                    eProsima_user_DllExport void payload(std::vector<uint8_t> &&_payload);

                    /*!
                     * @brief This function returns a constant reference to member payload
                     * @return Constant reference to member payload
                     */
                    eProsima_user_DllExport const std::vector<uint8_t>& payload() const;

                    /*!
                     * @brief This function returns a reference to member payload
                     * @return Reference to member payload
                     */
                    eProsima_user_DllExport std::vector<uint8_t>& payload();

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::fr::idl::TxBufferUpdate& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    uint16_t m_txBufferIndex;
                    bool m_payloadDataValid;
                    std::vector<uint8_t> m_payload;
                };
                /*!
                 * @brief This class represents the enumeration ChiCommand defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                enum ChiCommand : uint32_t
                {
                    RUN,
                    DEFERRED_HALT,
                    FREEZE,
                    ALLOW_COLDSTART,
                    ALL_SLOTS,
                    WAKEUP
                };
                /*!
                 * @brief This class represents the structure HostCommand defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                class HostCommand
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport HostCommand();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport virtual ~HostCommand();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::fr::idl::HostCommand that will be copied.
                     */
                    eProsima_user_DllExport HostCommand(const HostCommand &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::fr::idl::HostCommand that will be copied.
                     */
                    eProsima_user_DllExport HostCommand(HostCommand &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::fr::idl::HostCommand that will be copied.
                     */
                    eProsima_user_DllExport HostCommand& operator=(const HostCommand &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::fr::idl::HostCommand that will be copied.
                     */
                    eProsima_user_DllExport HostCommand& operator=(HostCommand &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr);

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr);

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const;

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr();
                    /*!
                     * @brief This function sets a value in member command
                     * @param _command New value for member command
                     */
                    eProsima_user_DllExport void command(ib::sim::fr::idl::ChiCommand _command);

                    /*!
                     * @brief This function returns the value of member command
                     * @return Value of member command
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::ChiCommand command() const;

                    /*!
                     * @brief This function returns a reference to member command
                     * @return Reference to member command
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::ChiCommand& command();

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::fr::idl::HostCommand& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    ib::sim::fr::idl::ChiCommand m_command;
                };
                /*!
                 * @brief This class represents the structure Header defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                class Header
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport Header();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport virtual ~Header();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::fr::idl::Header that will be copied.
                     */
                    eProsima_user_DllExport Header(const Header &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::fr::idl::Header that will be copied.
                     */
                    eProsima_user_DllExport Header(Header &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::fr::idl::Header that will be copied.
                     */
                    eProsima_user_DllExport Header& operator=(const Header &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::fr::idl::Header that will be copied.
                     */
                    eProsima_user_DllExport Header& operator=(Header &&x);

                    /*!
                     * @brief This function sets a value in member flags
                     * @param _flags New value for member flags
                     */
                    eProsima_user_DllExport void flags(uint8_t _flags);

                    /*!
                     * @brief This function returns the value of member flags
                     * @return Value of member flags
                     */
                    eProsima_user_DllExport uint8_t flags() const;

                    /*!
                     * @brief This function returns a reference to member flags
                     * @return Reference to member flags
                     */
                    eProsima_user_DllExport uint8_t& flags();
                    /*!
                     * @brief This function sets a value in member frameId
                     * @param _frameId New value for member frameId
                     */
                    eProsima_user_DllExport void frameId(uint16_t _frameId);

                    /*!
                     * @brief This function returns the value of member frameId
                     * @return Value of member frameId
                     */
                    eProsima_user_DllExport uint16_t frameId() const;

                    /*!
                     * @brief This function returns a reference to member frameId
                     * @return Reference to member frameId
                     */
                    eProsima_user_DllExport uint16_t& frameId();
                    /*!
                     * @brief This function sets a value in member payloadLength
                     * @param _payloadLength New value for member payloadLength
                     */
                    eProsima_user_DllExport void payloadLength(uint8_t _payloadLength);

                    /*!
                     * @brief This function returns the value of member payloadLength
                     * @return Value of member payloadLength
                     */
                    eProsima_user_DllExport uint8_t payloadLength() const;

                    /*!
                     * @brief This function returns a reference to member payloadLength
                     * @return Reference to member payloadLength
                     */
                    eProsima_user_DllExport uint8_t& payloadLength();
                    /*!
                     * @brief This function sets a value in member headerCrc
                     * @param _headerCrc New value for member headerCrc
                     */
                    eProsima_user_DllExport void headerCrc(uint16_t _headerCrc);

                    /*!
                     * @brief This function returns the value of member headerCrc
                     * @return Value of member headerCrc
                     */
                    eProsima_user_DllExport uint16_t headerCrc() const;

                    /*!
                     * @brief This function returns a reference to member headerCrc
                     * @return Reference to member headerCrc
                     */
                    eProsima_user_DllExport uint16_t& headerCrc();
                    /*!
                     * @brief This function sets a value in member cycleCount
                     * @param _cycleCount New value for member cycleCount
                     */
                    eProsima_user_DllExport void cycleCount(uint8_t _cycleCount);

                    /*!
                     * @brief This function returns the value of member cycleCount
                     * @return Value of member cycleCount
                     */
                    eProsima_user_DllExport uint8_t cycleCount() const;

                    /*!
                     * @brief This function returns a reference to member cycleCount
                     * @return Reference to member cycleCount
                     */
                    eProsima_user_DllExport uint8_t& cycleCount();

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::fr::idl::Header& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    uint8_t m_flags;
                    uint16_t m_frameId;
                    uint8_t m_payloadLength;
                    uint16_t m_headerCrc;
                    uint8_t m_cycleCount;
                };
                /*!
                 * @brief This class represents the structure Frame defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                class Frame
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport Frame();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport virtual ~Frame();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::fr::idl::Frame that will be copied.
                     */
                    eProsima_user_DllExport Frame(const Frame &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::fr::idl::Frame that will be copied.
                     */
                    eProsima_user_DllExport Frame(Frame &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::fr::idl::Frame that will be copied.
                     */
                    eProsima_user_DllExport Frame& operator=(const Frame &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::fr::idl::Frame that will be copied.
                     */
                    eProsima_user_DllExport Frame& operator=(Frame &&x);

                    /*!
                     * @brief This function copies the value in member header
                     * @param _header New value to be copied in member header
                     */
                    eProsima_user_DllExport void header(const ib::sim::fr::idl::Header &_header);

                    /*!
                     * @brief This function moves the value in member header
                     * @param _header New value to be moved in member header
                     */
                    eProsima_user_DllExport void header(ib::sim::fr::idl::Header &&_header);

                    /*!
                     * @brief This function returns a constant reference to member header
                     * @return Constant reference to member header
                     */
                    eProsima_user_DllExport const ib::sim::fr::idl::Header& header() const;

                    /*!
                     * @brief This function returns a reference to member header
                     * @return Reference to member header
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::Header& header();
                    /*!
                     * @brief This function copies the value in member payload
                     * @param _payload New value to be copied in member payload
                     */
                    eProsima_user_DllExport void payload(const std::vector<uint8_t> &_payload);

                    /*!
                     * @brief This function moves the value in member payload
                     * @param _payload New value to be moved in member payload
                     */
                    eProsima_user_DllExport void payload(std::vector<uint8_t> &&_payload);

                    /*!
                     * @brief This function returns a constant reference to member payload
                     * @return Constant reference to member payload
                     */
                    eProsima_user_DllExport const std::vector<uint8_t>& payload() const;

                    /*!
                     * @brief This function returns a reference to member payload
                     * @return Reference to member payload
                     */
                    eProsima_user_DllExport std::vector<uint8_t>& payload();

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::fr::idl::Frame& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::sim::fr::idl::Header m_header;
                    std::vector<uint8_t> m_payload;
                };
                /*!
                 * @brief This class represents the structure FrMessage defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                class FrMessage
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport FrMessage();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport virtual ~FrMessage();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::fr::idl::FrMessage that will be copied.
                     */
                    eProsima_user_DllExport FrMessage(const FrMessage &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::fr::idl::FrMessage that will be copied.
                     */
                    eProsima_user_DllExport FrMessage(FrMessage &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::fr::idl::FrMessage that will be copied.
                     */
                    eProsima_user_DllExport FrMessage& operator=(const FrMessage &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::fr::idl::FrMessage that will be copied.
                     */
                    eProsima_user_DllExport FrMessage& operator=(FrMessage &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr);

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr);

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const;

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr();
                    /*!
                     * @brief This function sets a value in member timeNs
                     * @param _timeNs New value for member timeNs
                     */
                    eProsima_user_DllExport void timeNs(int64_t _timeNs);

                    /*!
                     * @brief This function returns the value of member timeNs
                     * @return Value of member timeNs
                     */
                    eProsima_user_DllExport int64_t timeNs() const;

                    /*!
                     * @brief This function returns a reference to member timeNs
                     * @return Reference to member timeNs
                     */
                    eProsima_user_DllExport int64_t& timeNs();
                    /*!
                     * @brief This function sets a value in member channel
                     * @param _channel New value for member channel
                     */
                    eProsima_user_DllExport void channel(ib::sim::fr::idl::Channel _channel);

                    /*!
                     * @brief This function returns the value of member channel
                     * @return Value of member channel
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::Channel channel() const;

                    /*!
                     * @brief This function returns a reference to member channel
                     * @return Reference to member channel
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::Channel& channel();
                    /*!
                     * @brief This function copies the value in member frame
                     * @param _frame New value to be copied in member frame
                     */
                    eProsima_user_DllExport void frame(const ib::sim::fr::idl::Frame &_frame);

                    /*!
                     * @brief This function moves the value in member frame
                     * @param _frame New value to be moved in member frame
                     */
                    eProsima_user_DllExport void frame(ib::sim::fr::idl::Frame &&_frame);

                    /*!
                     * @brief This function returns a constant reference to member frame
                     * @return Constant reference to member frame
                     */
                    eProsima_user_DllExport const ib::sim::fr::idl::Frame& frame() const;

                    /*!
                     * @brief This function returns a reference to member frame
                     * @return Reference to member frame
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::Frame& frame();

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::fr::idl::FrMessage& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    int64_t m_timeNs;
                    ib::sim::fr::idl::Channel m_channel;
                    ib::sim::fr::idl::Frame m_frame;
                };
                /*!
                 * @brief This class represents the structure FrMessageAck defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                class FrMessageAck
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport FrMessageAck();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport virtual ~FrMessageAck();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::fr::idl::FrMessageAck that will be copied.
                     */
                    eProsima_user_DllExport FrMessageAck(const FrMessageAck &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::fr::idl::FrMessageAck that will be copied.
                     */
                    eProsima_user_DllExport FrMessageAck(FrMessageAck &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::fr::idl::FrMessageAck that will be copied.
                     */
                    eProsima_user_DllExport FrMessageAck& operator=(const FrMessageAck &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::fr::idl::FrMessageAck that will be copied.
                     */
                    eProsima_user_DllExport FrMessageAck& operator=(FrMessageAck &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr);

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr);

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const;

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr();
                    /*!
                     * @brief This function sets a value in member timeNs
                     * @param _timeNs New value for member timeNs
                     */
                    eProsima_user_DllExport void timeNs(int64_t _timeNs);

                    /*!
                     * @brief This function returns the value of member timeNs
                     * @return Value of member timeNs
                     */
                    eProsima_user_DllExport int64_t timeNs() const;

                    /*!
                     * @brief This function returns a reference to member timeNs
                     * @return Reference to member timeNs
                     */
                    eProsima_user_DllExport int64_t& timeNs();
                    /*!
                     * @brief This function sets a value in member txBufferIndex
                     * @param _txBufferIndex New value for member txBufferIndex
                     */
                    eProsima_user_DllExport void txBufferIndex(uint16_t _txBufferIndex);

                    /*!
                     * @brief This function returns the value of member txBufferIndex
                     * @return Value of member txBufferIndex
                     */
                    eProsima_user_DllExport uint16_t txBufferIndex() const;

                    /*!
                     * @brief This function returns a reference to member txBufferIndex
                     * @return Reference to member txBufferIndex
                     */
                    eProsima_user_DllExport uint16_t& txBufferIndex();
                    /*!
                     * @brief This function sets a value in member channel
                     * @param _channel New value for member channel
                     */
                    eProsima_user_DllExport void channel(ib::sim::fr::idl::Channel _channel);

                    /*!
                     * @brief This function returns the value of member channel
                     * @return Value of member channel
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::Channel channel() const;

                    /*!
                     * @brief This function returns a reference to member channel
                     * @return Reference to member channel
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::Channel& channel();
                    /*!
                     * @brief This function copies the value in member frame
                     * @param _frame New value to be copied in member frame
                     */
                    eProsima_user_DllExport void frame(const ib::sim::fr::idl::Frame &_frame);

                    /*!
                     * @brief This function moves the value in member frame
                     * @param _frame New value to be moved in member frame
                     */
                    eProsima_user_DllExport void frame(ib::sim::fr::idl::Frame &&_frame);

                    /*!
                     * @brief This function returns a constant reference to member frame
                     * @return Constant reference to member frame
                     */
                    eProsima_user_DllExport const ib::sim::fr::idl::Frame& frame() const;

                    /*!
                     * @brief This function returns a reference to member frame
                     * @return Reference to member frame
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::Frame& frame();

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::fr::idl::FrMessageAck& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    int64_t m_timeNs;
                    uint16_t m_txBufferIndex;
                    ib::sim::fr::idl::Channel m_channel;
                    ib::sim::fr::idl::Frame m_frame;
                };
                /*!
                 * @brief This class represents the enumeration SymbolPattern defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                enum SymbolPattern : uint32_t
                {
                    CasMts,
                    Wus,
                    Wudop
                };
                /*!
                 * @brief This class represents the structure FrSymbol defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                class FrSymbol
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport FrSymbol();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport virtual ~FrSymbol();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::fr::idl::FrSymbol that will be copied.
                     */
                    eProsima_user_DllExport FrSymbol(const FrSymbol &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::fr::idl::FrSymbol that will be copied.
                     */
                    eProsima_user_DllExport FrSymbol(FrSymbol &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::fr::idl::FrSymbol that will be copied.
                     */
                    eProsima_user_DllExport FrSymbol& operator=(const FrSymbol &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::fr::idl::FrSymbol that will be copied.
                     */
                    eProsima_user_DllExport FrSymbol& operator=(FrSymbol &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr);

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr);

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const;

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr();
                    /*!
                     * @brief This function sets a value in member timeNs
                     * @param _timeNs New value for member timeNs
                     */
                    eProsima_user_DllExport void timeNs(int64_t _timeNs);

                    /*!
                     * @brief This function returns the value of member timeNs
                     * @return Value of member timeNs
                     */
                    eProsima_user_DllExport int64_t timeNs() const;

                    /*!
                     * @brief This function returns a reference to member timeNs
                     * @return Reference to member timeNs
                     */
                    eProsima_user_DllExport int64_t& timeNs();
                    /*!
                     * @brief This function sets a value in member channel
                     * @param _channel New value for member channel
                     */
                    eProsima_user_DllExport void channel(ib::sim::fr::idl::Channel _channel);

                    /*!
                     * @brief This function returns the value of member channel
                     * @return Value of member channel
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::Channel channel() const;

                    /*!
                     * @brief This function returns a reference to member channel
                     * @return Reference to member channel
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::Channel& channel();
                    /*!
                     * @brief This function sets a value in member pattern
                     * @param _pattern New value for member pattern
                     */
                    eProsima_user_DllExport void pattern(ib::sim::fr::idl::SymbolPattern _pattern);

                    /*!
                     * @brief This function returns the value of member pattern
                     * @return Value of member pattern
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::SymbolPattern pattern() const;

                    /*!
                     * @brief This function returns a reference to member pattern
                     * @return Reference to member pattern
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::SymbolPattern& pattern();

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::fr::idl::FrSymbol& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    int64_t m_timeNs;
                    ib::sim::fr::idl::Channel m_channel;
                    ib::sim::fr::idl::SymbolPattern m_pattern;
                };
                /*!
                 * @brief This class represents the structure FrSymbolAck defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                class FrSymbolAck
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport FrSymbolAck();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport virtual ~FrSymbolAck();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::fr::idl::FrSymbolAck that will be copied.
                     */
                    eProsima_user_DllExport FrSymbolAck(const FrSymbolAck &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::fr::idl::FrSymbolAck that will be copied.
                     */
                    eProsima_user_DllExport FrSymbolAck(FrSymbolAck &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::fr::idl::FrSymbolAck that will be copied.
                     */
                    eProsima_user_DllExport FrSymbolAck& operator=(const FrSymbolAck &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::fr::idl::FrSymbolAck that will be copied.
                     */
                    eProsima_user_DllExport FrSymbolAck& operator=(FrSymbolAck &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr);

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr);

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const;

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr();
                    /*!
                     * @brief This function copies the value in member symbol
                     * @param _symbol New value to be copied in member symbol
                     */
                    eProsima_user_DllExport void symbol(const ib::sim::fr::idl::FrSymbol &_symbol);

                    /*!
                     * @brief This function moves the value in member symbol
                     * @param _symbol New value to be moved in member symbol
                     */
                    eProsima_user_DllExport void symbol(ib::sim::fr::idl::FrSymbol &&_symbol);

                    /*!
                     * @brief This function returns a constant reference to member symbol
                     * @return Constant reference to member symbol
                     */
                    eProsima_user_DllExport const ib::sim::fr::idl::FrSymbol& symbol() const;

                    /*!
                     * @brief This function returns a reference to member symbol
                     * @return Reference to member symbol
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::FrSymbol& symbol();

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::fr::idl::FrSymbolAck& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    ib::sim::fr::idl::FrSymbol m_symbol;
                };
                /*!
                 * @brief This class represents the structure CycleStart defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                class CycleStart
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport CycleStart();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport virtual ~CycleStart();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::fr::idl::CycleStart that will be copied.
                     */
                    eProsima_user_DllExport CycleStart(const CycleStart &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::fr::idl::CycleStart that will be copied.
                     */
                    eProsima_user_DllExport CycleStart(CycleStart &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::fr::idl::CycleStart that will be copied.
                     */
                    eProsima_user_DllExport CycleStart& operator=(const CycleStart &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::fr::idl::CycleStart that will be copied.
                     */
                    eProsima_user_DllExport CycleStart& operator=(CycleStart &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr);

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr);

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const;

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr();
                    /*!
                     * @brief This function sets a value in member timeNs
                     * @param _timeNs New value for member timeNs
                     */
                    eProsima_user_DllExport void timeNs(int64_t _timeNs);

                    /*!
                     * @brief This function returns the value of member timeNs
                     * @return Value of member timeNs
                     */
                    eProsima_user_DllExport int64_t timeNs() const;

                    /*!
                     * @brief This function returns a reference to member timeNs
                     * @return Reference to member timeNs
                     */
                    eProsima_user_DllExport int64_t& timeNs();
                    /*!
                     * @brief This function sets a value in member cycleCounter
                     * @param _cycleCounter New value for member cycleCounter
                     */
                    eProsima_user_DllExport void cycleCounter(uint8_t _cycleCounter);

                    /*!
                     * @brief This function returns the value of member cycleCounter
                     * @return Value of member cycleCounter
                     */
                    eProsima_user_DllExport uint8_t cycleCounter() const;

                    /*!
                     * @brief This function returns a reference to member cycleCounter
                     * @return Reference to member cycleCounter
                     */
                    eProsima_user_DllExport uint8_t& cycleCounter();

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::fr::idl::CycleStart& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    int64_t m_timeNs;
                    uint8_t m_cycleCounter;
                };
                /*!
                 * @brief This class represents the enumeration PocState defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                enum PocState : uint32_t
                {
                    DefaultConfig,
                    Config,
                    Ready,
                    Startup,
                    Wakeup,
                    NormalActive,
                    NormalPassive,
                    Halt
                };
                /*!
                 * @brief This class represents the structure ControllerStatus defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                class ControllerStatus
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport ControllerStatus();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport virtual ~ControllerStatus();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::fr::idl::ControllerStatus that will be copied.
                     */
                    eProsima_user_DllExport ControllerStatus(const ControllerStatus &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::fr::idl::ControllerStatus that will be copied.
                     */
                    eProsima_user_DllExport ControllerStatus(ControllerStatus &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::fr::idl::ControllerStatus that will be copied.
                     */
                    eProsima_user_DllExport ControllerStatus& operator=(const ControllerStatus &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::fr::idl::ControllerStatus that will be copied.
                     */
                    eProsima_user_DllExport ControllerStatus& operator=(ControllerStatus &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr);

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr);

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const;

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr();
                    /*!
                     * @brief This function sets a value in member timeNs
                     * @param _timeNs New value for member timeNs
                     */
                    eProsima_user_DllExport void timeNs(int64_t _timeNs);

                    /*!
                     * @brief This function returns the value of member timeNs
                     * @return Value of member timeNs
                     */
                    eProsima_user_DllExport int64_t timeNs() const;

                    /*!
                     * @brief This function returns a reference to member timeNs
                     * @return Reference to member timeNs
                     */
                    eProsima_user_DllExport int64_t& timeNs();
                    /*!
                     * @brief This function sets a value in member pocState
                     * @param _pocState New value for member pocState
                     */
                    eProsima_user_DllExport void pocState(ib::sim::fr::idl::PocState _pocState);

                    /*!
                     * @brief This function returns the value of member pocState
                     * @return Value of member pocState
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::PocState pocState() const;

                    /*!
                     * @brief This function returns a reference to member pocState
                     * @return Reference to member pocState
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::PocState& pocState();

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::fr::idl::ControllerStatus& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    int64_t m_timeNs;
                    ib::sim::fr::idl::PocState m_pocState;
                };
                /*!
                 * @brief This class represents the enumeration SlotModeType defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                enum SlotModeType : uint32_t
                {
                    KeySlot,
                    AllPending,
                    All
                };
                /*!
                 * @brief This class represents the enumeration ErrorModeType defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                enum ErrorModeType : uint32_t
                {
                    Active,
                    Passive,
                    CommHalt
                };
                /*!
                 * @brief This class represents the enumeration StartupStateType defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                enum StartupStateType : uint32_t
                {
                    Undefined,
                    ColdStartListen,
                    IntegrationColdstartCheck,
                    ColdStartJoin,
                    ColdStartCollisionResolution,
                    ColdStartConsistencyCheck,
                    IntegrationListen,
                    InitializeSchedule,
                    IntegrationConsistencyCheck,
                    ColdStartGap,
                    ExternalStartup
                };
                /*!
                 * @brief This class represents the enumeration WakeupStatusType defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                enum WakeupStatusType : uint32_t
                {
                    UndefinedWakeupStatus,
                    ReceivedHeader,
                    ReceivedWup,
                    CollisionHeader,
                    CollisionWup,
                    CollisionUnknown,
                    Transmitted
                };
                /*!
                 * @brief This class represents the structure PocStatus defined by the user in the IDL file.
                 * @ingroup FLEXRAYTOPICS
                 */
                class PocStatus
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport PocStatus();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport virtual ~PocStatus();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::fr::idl::PocStatus that will be copied.
                     */
                    eProsima_user_DllExport PocStatus(const PocStatus &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::fr::idl::PocStatus that will be copied.
                     */
                    eProsima_user_DllExport PocStatus(PocStatus &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::fr::idl::PocStatus that will be copied.
                     */
                    eProsima_user_DllExport PocStatus& operator=(const PocStatus &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::fr::idl::PocStatus that will be copied.
                     */
                    eProsima_user_DllExport PocStatus& operator=(PocStatus &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr);

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr);

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const;

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr();
                    /*!
                     * @brief This function sets a value in member timeNs
                     * @param _timeNs New value for member timeNs
                     */
                    eProsima_user_DllExport void timeNs(int64_t _timeNs);

                    /*!
                     * @brief This function returns the value of member timeNs
                     * @return Value of member timeNs
                     */
                    eProsima_user_DllExport int64_t timeNs() const;

                    /*!
                     * @brief This function returns a reference to member timeNs
                     * @return Reference to member timeNs
                     */
                    eProsima_user_DllExport int64_t& timeNs();
                    /*!
                     * @brief This function sets a value in member state
                     * @param _state New value for member state
                     */
                    eProsima_user_DllExport void state(ib::sim::fr::idl::PocState _state);

                    /*!
                     * @brief This function returns the value of member state
                     * @return Value of member state
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::PocState state() const;

                    /*!
                     * @brief This function returns a reference to member state
                     * @return Reference to member state
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::PocState& state();
                    /*!
                     * @brief This function sets a value in member chiHaltRequest
                     * @param _chiHaltRequest New value for member chiHaltRequest
                     */
                    eProsima_user_DllExport void chiHaltRequest(bool _chiHaltRequest);

                    /*!
                     * @brief This function returns the value of member chiHaltRequest
                     * @return Value of member chiHaltRequest
                     */
                    eProsima_user_DllExport bool chiHaltRequest() const;

                    /*!
                     * @brief This function returns a reference to member chiHaltRequest
                     * @return Reference to member chiHaltRequest
                     */
                    eProsima_user_DllExport bool& chiHaltRequest();
                    /*!
                     * @brief This function sets a value in member coldstartNoise
                     * @param _coldstartNoise New value for member coldstartNoise
                     */
                    eProsima_user_DllExport void coldstartNoise(bool _coldstartNoise);

                    /*!
                     * @brief This function returns the value of member coldstartNoise
                     * @return Value of member coldstartNoise
                     */
                    eProsima_user_DllExport bool coldstartNoise() const;

                    /*!
                     * @brief This function returns a reference to member coldstartNoise
                     * @return Reference to member coldstartNoise
                     */
                    eProsima_user_DllExport bool& coldstartNoise();
                    /*!
                     * @brief This function sets a value in member freeze
                     * @param _freeze New value for member freeze
                     */
                    eProsima_user_DllExport void freeze(bool _freeze);

                    /*!
                     * @brief This function returns the value of member freeze
                     * @return Value of member freeze
                     */
                    eProsima_user_DllExport bool freeze() const;

                    /*!
                     * @brief This function returns a reference to member freeze
                     * @return Reference to member freeze
                     */
                    eProsima_user_DllExport bool& freeze();
                    /*!
                     * @brief This function sets a value in member chiReadyRequest
                     * @param _chiReadyRequest New value for member chiReadyRequest
                     */
                    eProsima_user_DllExport void chiReadyRequest(bool _chiReadyRequest);

                    /*!
                     * @brief This function returns the value of member chiReadyRequest
                     * @return Value of member chiReadyRequest
                     */
                    eProsima_user_DllExport bool chiReadyRequest() const;

                    /*!
                     * @brief This function returns a reference to member chiReadyRequest
                     * @return Reference to member chiReadyRequest
                     */
                    eProsima_user_DllExport bool& chiReadyRequest();
                    /*!
                     * @brief This function sets a value in member errorMode
                     * @param _errorMode New value for member errorMode
                     */
                    eProsima_user_DllExport void errorMode(ib::sim::fr::idl::ErrorModeType _errorMode);

                    /*!
                     * @brief This function returns the value of member errorMode
                     * @return Value of member errorMode
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::ErrorModeType errorMode() const;

                    /*!
                     * @brief This function returns a reference to member errorMode
                     * @return Reference to member errorMode
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::ErrorModeType& errorMode();
                    /*!
                     * @brief This function sets a value in member slotMode
                     * @param _slotMode New value for member slotMode
                     */
                    eProsima_user_DllExport void slotMode(ib::sim::fr::idl::SlotModeType _slotMode);

                    /*!
                     * @brief This function returns the value of member slotMode
                     * @return Value of member slotMode
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::SlotModeType slotMode() const;

                    /*!
                     * @brief This function returns a reference to member slotMode
                     * @return Reference to member slotMode
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::SlotModeType& slotMode();
                    /*!
                     * @brief This function sets a value in member startupState
                     * @param _startupState New value for member startupState
                     */
                    eProsima_user_DllExport void startupState(ib::sim::fr::idl::StartupStateType _startupState);

                    /*!
                     * @brief This function returns the value of member startupState
                     * @return Value of member startupState
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::StartupStateType startupState() const;

                    /*!
                     * @brief This function returns a reference to member startupState
                     * @return Reference to member startupState
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::StartupStateType& startupState();
                    /*!
                     * @brief This function sets a value in member wakeupStatus
                     * @param _wakeupStatus New value for member wakeupStatus
                     */
                    eProsima_user_DllExport void wakeupStatus(ib::sim::fr::idl::WakeupStatusType _wakeupStatus);

                    /*!
                     * @brief This function returns the value of member wakeupStatus
                     * @return Value of member wakeupStatus
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::WakeupStatusType wakeupStatus() const;

                    /*!
                     * @brief This function returns a reference to member wakeupStatus
                     * @return Reference to member wakeupStatus
                     */
                    eProsima_user_DllExport ib::sim::fr::idl::WakeupStatusType& wakeupStatus();

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::fr::idl::PocStatus& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    int64_t m_timeNs;
                    ib::sim::fr::idl::PocState m_state;
                    bool m_chiHaltRequest;
                    bool m_coldstartNoise;
                    bool m_freeze;
                    bool m_chiReadyRequest;
                    ib::sim::fr::idl::ErrorModeType m_errorMode;
                    ib::sim::fr::idl::SlotModeType m_slotMode;
                    ib::sim::fr::idl::StartupStateType m_startupState;
                    ib::sim::fr::idl::WakeupStatusType m_wakeupStatus;
                };
            }
        }
    }
}

#endif // _IB_SIM_FR_IDL_FLEXRAYTOPICS_H_