// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file LoggingTopics.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _IB_MW_LOGGING_IDL_LOGGINGTOPICS_H_
#define _IB_MW_LOGGING_IDL_LOGGINGTOPICS_H_

// TODO Poner en el contexto.
#include "Common.h"

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(LoggingTopics_SOURCE)
#define LoggingTopics_DllAPI __declspec( dllexport )
#else
#define LoggingTopics_DllAPI __declspec( dllimport )
#endif // LoggingTopics_SOURCE
#else
#define LoggingTopics_DllAPI
#endif
#else
#define LoggingTopics_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

namespace ib
{
    namespace mw
    {
        namespace logging
        {
            namespace idl
            {
                namespace level
                {
                    /*!
                     * @brief This class represents the enumeration level_enum defined by the user in the IDL file.
                     * @ingroup LOGGINGTOPICS
                     */
                    enum level_enum : uint32_t
                    {
                        trace,
                        debug,
                        info,
                        warn,
                        err,
                        critical,
                        off
                    };
                }
                /*!
                 * @brief This class represents the structure SourceLoc defined by the user in the IDL file.
                 * @ingroup LOGGINGTOPICS
                 */
                class SourceLoc
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport SourceLoc();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~SourceLoc();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::mw::logging::idl::SourceLoc that will be copied.
                     */
                    eProsima_user_DllExport SourceLoc(const SourceLoc &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::mw::logging::idl::SourceLoc that will be copied.
                     */
                    eProsima_user_DllExport SourceLoc(SourceLoc &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::mw::logging::idl::SourceLoc that will be copied.
                     */
                    eProsima_user_DllExport SourceLoc& operator=(const SourceLoc &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::mw::logging::idl::SourceLoc that will be copied.
                     */
                    eProsima_user_DllExport SourceLoc& operator=(SourceLoc &&x);

                    /*!
                     * @brief This function copies the value in member filename
                     * @param _filename New value to be copied in member filename
                     */
                    inline eProsima_user_DllExport void filename(const std::string &_filename)
                    {
                        m_filename = _filename;
                    }

                    /*!
                     * @brief This function moves the value in member filename
                     * @param _filename New value to be moved in member filename
                     */
                    inline eProsima_user_DllExport void filename(std::string &&_filename)
                    {
                        m_filename = std::move(_filename);
                    }

                    /*!
                     * @brief This function returns a constant reference to member filename
                     * @return Constant reference to member filename
                     */
                    inline eProsima_user_DllExport const std::string& filename() const
                    {
                        return m_filename;
                    }

                    /*!
                     * @brief This function returns a reference to member filename
                     * @return Reference to member filename
                     */
                    inline eProsima_user_DllExport std::string& filename()
                    {
                        return m_filename;
                    }
                    /*!
                     * @brief This function sets a value in member line
                     * @param _line New value for member line
                     */
                    inline eProsima_user_DllExport void line(uint32_t _line)
                    {
                        m_line = _line;
                    }

                    /*!
                     * @brief This function returns the value of member line
                     * @return Value of member line
                     */
                    inline eProsima_user_DllExport uint32_t line() const
                    {
                        return m_line;
                    }

                    /*!
                     * @brief This function returns a reference to member line
                     * @return Reference to member line
                     */
                    inline eProsima_user_DllExport uint32_t& line()
                    {
                        return m_line;
                    }
                    /*!
                     * @brief This function copies the value in member funcname
                     * @param _funcname New value to be copied in member funcname
                     */
                    inline eProsima_user_DllExport void funcname(const std::string &_funcname)
                    {
                        m_funcname = _funcname;
                    }

                    /*!
                     * @brief This function moves the value in member funcname
                     * @param _funcname New value to be moved in member funcname
                     */
                    inline eProsima_user_DllExport void funcname(std::string &&_funcname)
                    {
                        m_funcname = std::move(_funcname);
                    }

                    /*!
                     * @brief This function returns a constant reference to member funcname
                     * @return Constant reference to member funcname
                     */
                    inline eProsima_user_DllExport const std::string& funcname() const
                    {
                        return m_funcname;
                    }

                    /*!
                     * @brief This function returns a reference to member funcname
                     * @return Reference to member funcname
                     */
                    inline eProsima_user_DllExport std::string& funcname()
                    {
                        return m_funcname;
                    }

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::mw::logging::idl::SourceLoc& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    std::string m_filename;
                    uint32_t m_line;
                    std::string m_funcname;
                };
                /*!
                 * @brief This class represents the structure LogMsg defined by the user in the IDL file.
                 * @ingroup LOGGINGTOPICS
                 */
                class LogMsg
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport LogMsg();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~LogMsg();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::mw::logging::idl::LogMsg that will be copied.
                     */
                    eProsima_user_DllExport LogMsg(const LogMsg &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::mw::logging::idl::LogMsg that will be copied.
                     */
                    eProsima_user_DllExport LogMsg(LogMsg &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::mw::logging::idl::LogMsg that will be copied.
                     */
                    eProsima_user_DllExport LogMsg& operator=(const LogMsg &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::mw::logging::idl::LogMsg that will be copied.
                     */
                    eProsima_user_DllExport LogMsg& operator=(LogMsg &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
                    {
                        m_senderAddr = _senderAddr;
                    }

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
                    {
                        m_senderAddr = std::move(_senderAddr);
                    }

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    inline eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const
                    {
                        return m_senderAddr;
                    }

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    inline eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr()
                    {
                        return m_senderAddr;
                    }
                    /*!
                     * @brief This function copies the value in member logger_name
                     * @param _logger_name New value to be copied in member logger_name
                     */
                    inline eProsima_user_DllExport void logger_name(const std::string &_logger_name)
                    {
                        m_logger_name = _logger_name;
                    }

                    /*!
                     * @brief This function moves the value in member logger_name
                     * @param _logger_name New value to be moved in member logger_name
                     */
                    inline eProsima_user_DllExport void logger_name(std::string &&_logger_name)
                    {
                        m_logger_name = std::move(_logger_name);
                    }

                    /*!
                     * @brief This function returns a constant reference to member logger_name
                     * @return Constant reference to member logger_name
                     */
                    inline eProsima_user_DllExport const std::string& logger_name() const
                    {
                        return m_logger_name;
                    }

                    /*!
                     * @brief This function returns a reference to member logger_name
                     * @return Reference to member logger_name
                     */
                    inline eProsima_user_DllExport std::string& logger_name()
                    {
                        return m_logger_name;
                    }
                    /*!
                     * @brief This function sets a value in member level
                     * @param _level New value for member level
                     */
                    inline eProsima_user_DllExport void level(ib::mw::logging::idl::level::level_enum _level)
                    {
                        m_level = _level;
                    }

                    /*!
                     * @brief This function returns the value of member level
                     * @return Value of member level
                     */
                    inline eProsima_user_DllExport ib::mw::logging::idl::level::level_enum level() const
                    {
                        return m_level;
                    }

                    /*!
                     * @brief This function returns a reference to member level
                     * @return Reference to member level
                     */
                    inline eProsima_user_DllExport ib::mw::logging::idl::level::level_enum& level()
                    {
                        return m_level;
                    }
                    /*!
                     * @brief This function sets a value in member timeUs
                     * @param _timeUs New value for member timeUs
                     */
                    inline eProsima_user_DllExport void timeUs(int64_t _timeUs)
                    {
                        m_timeUs = _timeUs;
                    }

                    /*!
                     * @brief This function returns the value of member timeUs
                     * @return Value of member timeUs
                     */
                    inline eProsima_user_DllExport int64_t timeUs() const
                    {
                        return m_timeUs;
                    }

                    /*!
                     * @brief This function returns a reference to member timeUs
                     * @return Reference to member timeUs
                     */
                    inline eProsima_user_DllExport int64_t& timeUs()
                    {
                        return m_timeUs;
                    }
                    /*!
                     * @brief This function sets a value in member thread_id
                     * @param _thread_id New value for member thread_id
                     */
                    inline eProsima_user_DllExport void thread_id(uint64_t _thread_id)
                    {
                        m_thread_id = _thread_id;
                    }

                    /*!
                     * @brief This function returns the value of member thread_id
                     * @return Value of member thread_id
                     */
                    inline eProsima_user_DllExport uint64_t thread_id() const
                    {
                        return m_thread_id;
                    }

                    /*!
                     * @brief This function returns a reference to member thread_id
                     * @return Reference to member thread_id
                     */
                    inline eProsima_user_DllExport uint64_t& thread_id()
                    {
                        return m_thread_id;
                    }
                    /*!
                     * @brief This function sets a value in member msg_id
                     * @param _msg_id New value for member msg_id
                     */
                    inline eProsima_user_DllExport void msg_id(uint64_t _msg_id)
                    {
                        m_msg_id = _msg_id;
                    }

                    /*!
                     * @brief This function returns the value of member msg_id
                     * @return Value of member msg_id
                     */
                    inline eProsima_user_DllExport uint64_t msg_id() const
                    {
                        return m_msg_id;
                    }

                    /*!
                     * @brief This function returns a reference to member msg_id
                     * @return Reference to member msg_id
                     */
                    inline eProsima_user_DllExport uint64_t& msg_id()
                    {
                        return m_msg_id;
                    }
                    /*!
                     * @brief This function copies the value in member source
                     * @param _source New value to be copied in member source
                     */
                    inline eProsima_user_DllExport void source(const ib::mw::logging::idl::SourceLoc &_source)
                    {
                        m_source = _source;
                    }

                    /*!
                     * @brief This function moves the value in member source
                     * @param _source New value to be moved in member source
                     */
                    inline eProsima_user_DllExport void source(ib::mw::logging::idl::SourceLoc &&_source)
                    {
                        m_source = std::move(_source);
                    }

                    /*!
                     * @brief This function returns a constant reference to member source
                     * @return Constant reference to member source
                     */
                    inline eProsima_user_DllExport const ib::mw::logging::idl::SourceLoc& source() const
                    {
                        return m_source;
                    }

                    /*!
                     * @brief This function returns a reference to member source
                     * @return Reference to member source
                     */
                    inline eProsima_user_DllExport ib::mw::logging::idl::SourceLoc& source()
                    {
                        return m_source;
                    }
                    /*!
                     * @brief This function copies the value in member payload
                     * @param _payload New value to be copied in member payload
                     */
                    inline eProsima_user_DllExport void payload(const std::string &_payload)
                    {
                        m_payload = _payload;
                    }

                    /*!
                     * @brief This function moves the value in member payload
                     * @param _payload New value to be moved in member payload
                     */
                    inline eProsima_user_DllExport void payload(std::string &&_payload)
                    {
                        m_payload = std::move(_payload);
                    }

                    /*!
                     * @brief This function returns a constant reference to member payload
                     * @return Constant reference to member payload
                     */
                    inline eProsima_user_DllExport const std::string& payload() const
                    {
                        return m_payload;
                    }

                    /*!
                     * @brief This function returns a reference to member payload
                     * @return Reference to member payload
                     */
                    inline eProsima_user_DllExport std::string& payload()
                    {
                        return m_payload;
                    }

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::mw::logging::idl::LogMsg& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    std::string m_logger_name;
                    ib::mw::logging::idl::level::level_enum m_level;
                    int64_t m_timeUs;
                    uint64_t m_thread_id;
                    uint64_t m_msg_id;
                    ib::mw::logging::idl::SourceLoc m_source;
                    std::string m_payload;
                };
            }
        }
    }
}

#endif // _IB_MW_LOGGING_IDL_LOGGINGTOPICS_H_