// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file GenericTopics.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "GenericTopics.h"

#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

ib::sim::generic::idl::GenericMessage::GenericMessage()
{


}

ib::sim::generic::idl::GenericMessage::~GenericMessage()
{
}

ib::sim::generic::idl::GenericMessage::GenericMessage(const GenericMessage &x)
{
    m_senderAddr = x.m_senderAddr;
    m_data = x.m_data;
}

ib::sim::generic::idl::GenericMessage::GenericMessage(GenericMessage &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_data = std::move(x.m_data);
}

ib::sim::generic::idl::GenericMessage& ib::sim::generic::idl::GenericMessage::operator=(const GenericMessage &x)
{
    m_senderAddr = x.m_senderAddr;
    m_data = x.m_data;
    
    return *this;
}

ib::sim::generic::idl::GenericMessage& ib::sim::generic::idl::GenericMessage::operator=(GenericMessage &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_data = std::move(x.m_data);
    
    return *this;
}

size_t ib::sim::generic::idl::GenericMessage::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    current_alignment += (100 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t ib::sim::generic::idl::GenericMessage::getCdrSerializedSize(const ib::sim::generic::idl::GenericMessage& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += ib::mw::idl::EndpointAddress::getCdrSerializedSize(data.senderAddr(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    current_alignment += (data.data().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void ib::sim::generic::idl::GenericMessage::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_senderAddr;
    scdr << m_data;
}

void ib::sim::generic::idl::GenericMessage::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_senderAddr;
    dcdr >> m_data;
}

size_t ib::sim::generic::idl::GenericMessage::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            
     current_align += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_align); 


    return current_align;
}

bool ib::sim::generic::idl::GenericMessage::isKeyDefined()
{
    return true;
}

void ib::sim::generic::idl::GenericMessage::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 scdr << m_senderAddr;  
	 
}



