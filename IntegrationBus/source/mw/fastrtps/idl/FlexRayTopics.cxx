// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file FlexRayTopics.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "FlexRayTopics.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>



ib::sim::fr::idl::ClusterParameters::ClusterParameters()
{
    m_gColdstartAttempts = 0;
    m_gCycleCountMax = 0;
    m_gdActionPointOffset = 0;
    m_gdDynamicSlotIdlePhase = 0;
    m_gdMiniSlot = 0;
    m_gdMiniSlotActionPointOffset = 0;
    m_gdStaticSlot = 0;
    m_gdSymbolWindow = 0;
    m_gdSymbolWindowActionPointOffset = 0;
    m_gdTSSTransmitter = 0;
    m_gdWakeupTxActive = 0;
    m_gdWakeupTxIdle = 0;
    m_gListenNoise = 0;
    m_gMacroPerCycle = 0;
    m_gMaxWithoutClockCorrectionFatal = 0;
    m_gMaxWithoutClockCorrectionPassive = 0;
    m_gNumberOfMiniSlots = 0;
    m_gNumberOfStaticSlots = 0;
    m_gPayloadLengthStatic = 0;
    m_gSyncFrameIDCountMax = 0;

}

ib::sim::fr::idl::ClusterParameters::~ClusterParameters()
{




















}

ib::sim::fr::idl::ClusterParameters::ClusterParameters(const ClusterParameters &x)
{
    m_gColdstartAttempts = x.m_gColdstartAttempts;
    m_gCycleCountMax = x.m_gCycleCountMax;
    m_gdActionPointOffset = x.m_gdActionPointOffset;
    m_gdDynamicSlotIdlePhase = x.m_gdDynamicSlotIdlePhase;
    m_gdMiniSlot = x.m_gdMiniSlot;
    m_gdMiniSlotActionPointOffset = x.m_gdMiniSlotActionPointOffset;
    m_gdStaticSlot = x.m_gdStaticSlot;
    m_gdSymbolWindow = x.m_gdSymbolWindow;
    m_gdSymbolWindowActionPointOffset = x.m_gdSymbolWindowActionPointOffset;
    m_gdTSSTransmitter = x.m_gdTSSTransmitter;
    m_gdWakeupTxActive = x.m_gdWakeupTxActive;
    m_gdWakeupTxIdle = x.m_gdWakeupTxIdle;
    m_gListenNoise = x.m_gListenNoise;
    m_gMacroPerCycle = x.m_gMacroPerCycle;
    m_gMaxWithoutClockCorrectionFatal = x.m_gMaxWithoutClockCorrectionFatal;
    m_gMaxWithoutClockCorrectionPassive = x.m_gMaxWithoutClockCorrectionPassive;
    m_gNumberOfMiniSlots = x.m_gNumberOfMiniSlots;
    m_gNumberOfStaticSlots = x.m_gNumberOfStaticSlots;
    m_gPayloadLengthStatic = x.m_gPayloadLengthStatic;
    m_gSyncFrameIDCountMax = x.m_gSyncFrameIDCountMax;
}

ib::sim::fr::idl::ClusterParameters::ClusterParameters(ClusterParameters &&x)
{
    m_gColdstartAttempts = x.m_gColdstartAttempts;
    m_gCycleCountMax = x.m_gCycleCountMax;
    m_gdActionPointOffset = x.m_gdActionPointOffset;
    m_gdDynamicSlotIdlePhase = x.m_gdDynamicSlotIdlePhase;
    m_gdMiniSlot = x.m_gdMiniSlot;
    m_gdMiniSlotActionPointOffset = x.m_gdMiniSlotActionPointOffset;
    m_gdStaticSlot = x.m_gdStaticSlot;
    m_gdSymbolWindow = x.m_gdSymbolWindow;
    m_gdSymbolWindowActionPointOffset = x.m_gdSymbolWindowActionPointOffset;
    m_gdTSSTransmitter = x.m_gdTSSTransmitter;
    m_gdWakeupTxActive = x.m_gdWakeupTxActive;
    m_gdWakeupTxIdle = x.m_gdWakeupTxIdle;
    m_gListenNoise = x.m_gListenNoise;
    m_gMacroPerCycle = x.m_gMacroPerCycle;
    m_gMaxWithoutClockCorrectionFatal = x.m_gMaxWithoutClockCorrectionFatal;
    m_gMaxWithoutClockCorrectionPassive = x.m_gMaxWithoutClockCorrectionPassive;
    m_gNumberOfMiniSlots = x.m_gNumberOfMiniSlots;
    m_gNumberOfStaticSlots = x.m_gNumberOfStaticSlots;
    m_gPayloadLengthStatic = x.m_gPayloadLengthStatic;
    m_gSyncFrameIDCountMax = x.m_gSyncFrameIDCountMax;
}

ib::sim::fr::idl::ClusterParameters& ib::sim::fr::idl::ClusterParameters::operator=(const ClusterParameters &x)
{

    m_gColdstartAttempts = x.m_gColdstartAttempts;
    m_gCycleCountMax = x.m_gCycleCountMax;
    m_gdActionPointOffset = x.m_gdActionPointOffset;
    m_gdDynamicSlotIdlePhase = x.m_gdDynamicSlotIdlePhase;
    m_gdMiniSlot = x.m_gdMiniSlot;
    m_gdMiniSlotActionPointOffset = x.m_gdMiniSlotActionPointOffset;
    m_gdStaticSlot = x.m_gdStaticSlot;
    m_gdSymbolWindow = x.m_gdSymbolWindow;
    m_gdSymbolWindowActionPointOffset = x.m_gdSymbolWindowActionPointOffset;
    m_gdTSSTransmitter = x.m_gdTSSTransmitter;
    m_gdWakeupTxActive = x.m_gdWakeupTxActive;
    m_gdWakeupTxIdle = x.m_gdWakeupTxIdle;
    m_gListenNoise = x.m_gListenNoise;
    m_gMacroPerCycle = x.m_gMacroPerCycle;
    m_gMaxWithoutClockCorrectionFatal = x.m_gMaxWithoutClockCorrectionFatal;
    m_gMaxWithoutClockCorrectionPassive = x.m_gMaxWithoutClockCorrectionPassive;
    m_gNumberOfMiniSlots = x.m_gNumberOfMiniSlots;
    m_gNumberOfStaticSlots = x.m_gNumberOfStaticSlots;
    m_gPayloadLengthStatic = x.m_gPayloadLengthStatic;
    m_gSyncFrameIDCountMax = x.m_gSyncFrameIDCountMax;

    return *this;
}

ib::sim::fr::idl::ClusterParameters& ib::sim::fr::idl::ClusterParameters::operator=(ClusterParameters &&x)
{

    m_gColdstartAttempts = x.m_gColdstartAttempts;
    m_gCycleCountMax = x.m_gCycleCountMax;
    m_gdActionPointOffset = x.m_gdActionPointOffset;
    m_gdDynamicSlotIdlePhase = x.m_gdDynamicSlotIdlePhase;
    m_gdMiniSlot = x.m_gdMiniSlot;
    m_gdMiniSlotActionPointOffset = x.m_gdMiniSlotActionPointOffset;
    m_gdStaticSlot = x.m_gdStaticSlot;
    m_gdSymbolWindow = x.m_gdSymbolWindow;
    m_gdSymbolWindowActionPointOffset = x.m_gdSymbolWindowActionPointOffset;
    m_gdTSSTransmitter = x.m_gdTSSTransmitter;
    m_gdWakeupTxActive = x.m_gdWakeupTxActive;
    m_gdWakeupTxIdle = x.m_gdWakeupTxIdle;
    m_gListenNoise = x.m_gListenNoise;
    m_gMacroPerCycle = x.m_gMacroPerCycle;
    m_gMaxWithoutClockCorrectionFatal = x.m_gMaxWithoutClockCorrectionFatal;
    m_gMaxWithoutClockCorrectionPassive = x.m_gMaxWithoutClockCorrectionPassive;
    m_gNumberOfMiniSlots = x.m_gNumberOfMiniSlots;
    m_gNumberOfStaticSlots = x.m_gNumberOfStaticSlots;
    m_gPayloadLengthStatic = x.m_gPayloadLengthStatic;
    m_gSyncFrameIDCountMax = x.m_gSyncFrameIDCountMax;

    return *this;
}

size_t ib::sim::fr::idl::ClusterParameters::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t ib::sim::fr::idl::ClusterParameters::getCdrSerializedSize(const ib::sim::fr::idl::ClusterParameters& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void ib::sim::fr::idl::ClusterParameters::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_gColdstartAttempts;
    scdr << m_gCycleCountMax;
    scdr << m_gdActionPointOffset;
    scdr << m_gdDynamicSlotIdlePhase;
    scdr << m_gdMiniSlot;
    scdr << m_gdMiniSlotActionPointOffset;
    scdr << m_gdStaticSlot;
    scdr << m_gdSymbolWindow;
    scdr << m_gdSymbolWindowActionPointOffset;
    scdr << m_gdTSSTransmitter;
    scdr << m_gdWakeupTxActive;
    scdr << m_gdWakeupTxIdle;
    scdr << m_gListenNoise;
    scdr << m_gMacroPerCycle;
    scdr << m_gMaxWithoutClockCorrectionFatal;
    scdr << m_gMaxWithoutClockCorrectionPassive;
    scdr << m_gNumberOfMiniSlots;
    scdr << m_gNumberOfStaticSlots;
    scdr << m_gPayloadLengthStatic;
    scdr << m_gSyncFrameIDCountMax;
}

void ib::sim::fr::idl::ClusterParameters::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_gColdstartAttempts;
    dcdr >> m_gCycleCountMax;
    dcdr >> m_gdActionPointOffset;
    dcdr >> m_gdDynamicSlotIdlePhase;
    dcdr >> m_gdMiniSlot;
    dcdr >> m_gdMiniSlotActionPointOffset;
    dcdr >> m_gdStaticSlot;
    dcdr >> m_gdSymbolWindow;
    dcdr >> m_gdSymbolWindowActionPointOffset;
    dcdr >> m_gdTSSTransmitter;
    dcdr >> m_gdWakeupTxActive;
    dcdr >> m_gdWakeupTxIdle;
    dcdr >> m_gListenNoise;
    dcdr >> m_gMacroPerCycle;
    dcdr >> m_gMaxWithoutClockCorrectionFatal;
    dcdr >> m_gMaxWithoutClockCorrectionPassive;
    dcdr >> m_gNumberOfMiniSlots;
    dcdr >> m_gNumberOfStaticSlots;
    dcdr >> m_gPayloadLengthStatic;
    dcdr >> m_gSyncFrameIDCountMax;
}

/*!
 * @brief This function sets a value in member gColdstartAttempts
 * @param _gColdstartAttempts New value for member gColdstartAttempts
 */
void ib::sim::fr::idl::ClusterParameters::gColdstartAttempts(uint8_t _gColdstartAttempts)
{
m_gColdstartAttempts = _gColdstartAttempts;
}

/*!
 * @brief This function returns the value of member gColdstartAttempts
 * @return Value of member gColdstartAttempts
 */
uint8_t ib::sim::fr::idl::ClusterParameters::gColdstartAttempts() const
{
    return m_gColdstartAttempts;
}

/*!
 * @brief This function returns a reference to member gColdstartAttempts
 * @return Reference to member gColdstartAttempts
 */
uint8_t& ib::sim::fr::idl::ClusterParameters::gColdstartAttempts()
{
    return m_gColdstartAttempts;
}
/*!
 * @brief This function sets a value in member gCycleCountMax
 * @param _gCycleCountMax New value for member gCycleCountMax
 */
void ib::sim::fr::idl::ClusterParameters::gCycleCountMax(uint8_t _gCycleCountMax)
{
m_gCycleCountMax = _gCycleCountMax;
}

/*!
 * @brief This function returns the value of member gCycleCountMax
 * @return Value of member gCycleCountMax
 */
uint8_t ib::sim::fr::idl::ClusterParameters::gCycleCountMax() const
{
    return m_gCycleCountMax;
}

/*!
 * @brief This function returns a reference to member gCycleCountMax
 * @return Reference to member gCycleCountMax
 */
uint8_t& ib::sim::fr::idl::ClusterParameters::gCycleCountMax()
{
    return m_gCycleCountMax;
}
/*!
 * @brief This function sets a value in member gdActionPointOffset
 * @param _gdActionPointOffset New value for member gdActionPointOffset
 */
void ib::sim::fr::idl::ClusterParameters::gdActionPointOffset(uint16_t _gdActionPointOffset)
{
m_gdActionPointOffset = _gdActionPointOffset;
}

/*!
 * @brief This function returns the value of member gdActionPointOffset
 * @return Value of member gdActionPointOffset
 */
uint16_t ib::sim::fr::idl::ClusterParameters::gdActionPointOffset() const
{
    return m_gdActionPointOffset;
}

/*!
 * @brief This function returns a reference to member gdActionPointOffset
 * @return Reference to member gdActionPointOffset
 */
uint16_t& ib::sim::fr::idl::ClusterParameters::gdActionPointOffset()
{
    return m_gdActionPointOffset;
}
/*!
 * @brief This function sets a value in member gdDynamicSlotIdlePhase
 * @param _gdDynamicSlotIdlePhase New value for member gdDynamicSlotIdlePhase
 */
void ib::sim::fr::idl::ClusterParameters::gdDynamicSlotIdlePhase(uint16_t _gdDynamicSlotIdlePhase)
{
m_gdDynamicSlotIdlePhase = _gdDynamicSlotIdlePhase;
}

/*!
 * @brief This function returns the value of member gdDynamicSlotIdlePhase
 * @return Value of member gdDynamicSlotIdlePhase
 */
uint16_t ib::sim::fr::idl::ClusterParameters::gdDynamicSlotIdlePhase() const
{
    return m_gdDynamicSlotIdlePhase;
}

/*!
 * @brief This function returns a reference to member gdDynamicSlotIdlePhase
 * @return Reference to member gdDynamicSlotIdlePhase
 */
uint16_t& ib::sim::fr::idl::ClusterParameters::gdDynamicSlotIdlePhase()
{
    return m_gdDynamicSlotIdlePhase;
}
/*!
 * @brief This function sets a value in member gdMiniSlot
 * @param _gdMiniSlot New value for member gdMiniSlot
 */
void ib::sim::fr::idl::ClusterParameters::gdMiniSlot(uint16_t _gdMiniSlot)
{
m_gdMiniSlot = _gdMiniSlot;
}

/*!
 * @brief This function returns the value of member gdMiniSlot
 * @return Value of member gdMiniSlot
 */
uint16_t ib::sim::fr::idl::ClusterParameters::gdMiniSlot() const
{
    return m_gdMiniSlot;
}

/*!
 * @brief This function returns a reference to member gdMiniSlot
 * @return Reference to member gdMiniSlot
 */
uint16_t& ib::sim::fr::idl::ClusterParameters::gdMiniSlot()
{
    return m_gdMiniSlot;
}
/*!
 * @brief This function sets a value in member gdMiniSlotActionPointOffset
 * @param _gdMiniSlotActionPointOffset New value for member gdMiniSlotActionPointOffset
 */
void ib::sim::fr::idl::ClusterParameters::gdMiniSlotActionPointOffset(uint16_t _gdMiniSlotActionPointOffset)
{
m_gdMiniSlotActionPointOffset = _gdMiniSlotActionPointOffset;
}

/*!
 * @brief This function returns the value of member gdMiniSlotActionPointOffset
 * @return Value of member gdMiniSlotActionPointOffset
 */
uint16_t ib::sim::fr::idl::ClusterParameters::gdMiniSlotActionPointOffset() const
{
    return m_gdMiniSlotActionPointOffset;
}

/*!
 * @brief This function returns a reference to member gdMiniSlotActionPointOffset
 * @return Reference to member gdMiniSlotActionPointOffset
 */
uint16_t& ib::sim::fr::idl::ClusterParameters::gdMiniSlotActionPointOffset()
{
    return m_gdMiniSlotActionPointOffset;
}
/*!
 * @brief This function sets a value in member gdStaticSlot
 * @param _gdStaticSlot New value for member gdStaticSlot
 */
void ib::sim::fr::idl::ClusterParameters::gdStaticSlot(uint16_t _gdStaticSlot)
{
m_gdStaticSlot = _gdStaticSlot;
}

/*!
 * @brief This function returns the value of member gdStaticSlot
 * @return Value of member gdStaticSlot
 */
uint16_t ib::sim::fr::idl::ClusterParameters::gdStaticSlot() const
{
    return m_gdStaticSlot;
}

/*!
 * @brief This function returns a reference to member gdStaticSlot
 * @return Reference to member gdStaticSlot
 */
uint16_t& ib::sim::fr::idl::ClusterParameters::gdStaticSlot()
{
    return m_gdStaticSlot;
}
/*!
 * @brief This function sets a value in member gdSymbolWindow
 * @param _gdSymbolWindow New value for member gdSymbolWindow
 */
void ib::sim::fr::idl::ClusterParameters::gdSymbolWindow(uint16_t _gdSymbolWindow)
{
m_gdSymbolWindow = _gdSymbolWindow;
}

/*!
 * @brief This function returns the value of member gdSymbolWindow
 * @return Value of member gdSymbolWindow
 */
uint16_t ib::sim::fr::idl::ClusterParameters::gdSymbolWindow() const
{
    return m_gdSymbolWindow;
}

/*!
 * @brief This function returns a reference to member gdSymbolWindow
 * @return Reference to member gdSymbolWindow
 */
uint16_t& ib::sim::fr::idl::ClusterParameters::gdSymbolWindow()
{
    return m_gdSymbolWindow;
}
/*!
 * @brief This function sets a value in member gdSymbolWindowActionPointOffset
 * @param _gdSymbolWindowActionPointOffset New value for member gdSymbolWindowActionPointOffset
 */
void ib::sim::fr::idl::ClusterParameters::gdSymbolWindowActionPointOffset(uint16_t _gdSymbolWindowActionPointOffset)
{
m_gdSymbolWindowActionPointOffset = _gdSymbolWindowActionPointOffset;
}

/*!
 * @brief This function returns the value of member gdSymbolWindowActionPointOffset
 * @return Value of member gdSymbolWindowActionPointOffset
 */
uint16_t ib::sim::fr::idl::ClusterParameters::gdSymbolWindowActionPointOffset() const
{
    return m_gdSymbolWindowActionPointOffset;
}

/*!
 * @brief This function returns a reference to member gdSymbolWindowActionPointOffset
 * @return Reference to member gdSymbolWindowActionPointOffset
 */
uint16_t& ib::sim::fr::idl::ClusterParameters::gdSymbolWindowActionPointOffset()
{
    return m_gdSymbolWindowActionPointOffset;
}
/*!
 * @brief This function sets a value in member gdTSSTransmitter
 * @param _gdTSSTransmitter New value for member gdTSSTransmitter
 */
void ib::sim::fr::idl::ClusterParameters::gdTSSTransmitter(uint16_t _gdTSSTransmitter)
{
m_gdTSSTransmitter = _gdTSSTransmitter;
}

/*!
 * @brief This function returns the value of member gdTSSTransmitter
 * @return Value of member gdTSSTransmitter
 */
uint16_t ib::sim::fr::idl::ClusterParameters::gdTSSTransmitter() const
{
    return m_gdTSSTransmitter;
}

/*!
 * @brief This function returns a reference to member gdTSSTransmitter
 * @return Reference to member gdTSSTransmitter
 */
uint16_t& ib::sim::fr::idl::ClusterParameters::gdTSSTransmitter()
{
    return m_gdTSSTransmitter;
}
/*!
 * @brief This function sets a value in member gdWakeupTxActive
 * @param _gdWakeupTxActive New value for member gdWakeupTxActive
 */
void ib::sim::fr::idl::ClusterParameters::gdWakeupTxActive(uint16_t _gdWakeupTxActive)
{
m_gdWakeupTxActive = _gdWakeupTxActive;
}

/*!
 * @brief This function returns the value of member gdWakeupTxActive
 * @return Value of member gdWakeupTxActive
 */
uint16_t ib::sim::fr::idl::ClusterParameters::gdWakeupTxActive() const
{
    return m_gdWakeupTxActive;
}

/*!
 * @brief This function returns a reference to member gdWakeupTxActive
 * @return Reference to member gdWakeupTxActive
 */
uint16_t& ib::sim::fr::idl::ClusterParameters::gdWakeupTxActive()
{
    return m_gdWakeupTxActive;
}
/*!
 * @brief This function sets a value in member gdWakeupTxIdle
 * @param _gdWakeupTxIdle New value for member gdWakeupTxIdle
 */
void ib::sim::fr::idl::ClusterParameters::gdWakeupTxIdle(uint16_t _gdWakeupTxIdle)
{
m_gdWakeupTxIdle = _gdWakeupTxIdle;
}

/*!
 * @brief This function returns the value of member gdWakeupTxIdle
 * @return Value of member gdWakeupTxIdle
 */
uint16_t ib::sim::fr::idl::ClusterParameters::gdWakeupTxIdle() const
{
    return m_gdWakeupTxIdle;
}

/*!
 * @brief This function returns a reference to member gdWakeupTxIdle
 * @return Reference to member gdWakeupTxIdle
 */
uint16_t& ib::sim::fr::idl::ClusterParameters::gdWakeupTxIdle()
{
    return m_gdWakeupTxIdle;
}
/*!
 * @brief This function sets a value in member gListenNoise
 * @param _gListenNoise New value for member gListenNoise
 */
void ib::sim::fr::idl::ClusterParameters::gListenNoise(uint8_t _gListenNoise)
{
m_gListenNoise = _gListenNoise;
}

/*!
 * @brief This function returns the value of member gListenNoise
 * @return Value of member gListenNoise
 */
uint8_t ib::sim::fr::idl::ClusterParameters::gListenNoise() const
{
    return m_gListenNoise;
}

/*!
 * @brief This function returns a reference to member gListenNoise
 * @return Reference to member gListenNoise
 */
uint8_t& ib::sim::fr::idl::ClusterParameters::gListenNoise()
{
    return m_gListenNoise;
}
/*!
 * @brief This function sets a value in member gMacroPerCycle
 * @param _gMacroPerCycle New value for member gMacroPerCycle
 */
void ib::sim::fr::idl::ClusterParameters::gMacroPerCycle(uint16_t _gMacroPerCycle)
{
m_gMacroPerCycle = _gMacroPerCycle;
}

/*!
 * @brief This function returns the value of member gMacroPerCycle
 * @return Value of member gMacroPerCycle
 */
uint16_t ib::sim::fr::idl::ClusterParameters::gMacroPerCycle() const
{
    return m_gMacroPerCycle;
}

/*!
 * @brief This function returns a reference to member gMacroPerCycle
 * @return Reference to member gMacroPerCycle
 */
uint16_t& ib::sim::fr::idl::ClusterParameters::gMacroPerCycle()
{
    return m_gMacroPerCycle;
}
/*!
 * @brief This function sets a value in member gMaxWithoutClockCorrectionFatal
 * @param _gMaxWithoutClockCorrectionFatal New value for member gMaxWithoutClockCorrectionFatal
 */
void ib::sim::fr::idl::ClusterParameters::gMaxWithoutClockCorrectionFatal(uint8_t _gMaxWithoutClockCorrectionFatal)
{
m_gMaxWithoutClockCorrectionFatal = _gMaxWithoutClockCorrectionFatal;
}

/*!
 * @brief This function returns the value of member gMaxWithoutClockCorrectionFatal
 * @return Value of member gMaxWithoutClockCorrectionFatal
 */
uint8_t ib::sim::fr::idl::ClusterParameters::gMaxWithoutClockCorrectionFatal() const
{
    return m_gMaxWithoutClockCorrectionFatal;
}

/*!
 * @brief This function returns a reference to member gMaxWithoutClockCorrectionFatal
 * @return Reference to member gMaxWithoutClockCorrectionFatal
 */
uint8_t& ib::sim::fr::idl::ClusterParameters::gMaxWithoutClockCorrectionFatal()
{
    return m_gMaxWithoutClockCorrectionFatal;
}
/*!
 * @brief This function sets a value in member gMaxWithoutClockCorrectionPassive
 * @param _gMaxWithoutClockCorrectionPassive New value for member gMaxWithoutClockCorrectionPassive
 */
void ib::sim::fr::idl::ClusterParameters::gMaxWithoutClockCorrectionPassive(uint8_t _gMaxWithoutClockCorrectionPassive)
{
m_gMaxWithoutClockCorrectionPassive = _gMaxWithoutClockCorrectionPassive;
}

/*!
 * @brief This function returns the value of member gMaxWithoutClockCorrectionPassive
 * @return Value of member gMaxWithoutClockCorrectionPassive
 */
uint8_t ib::sim::fr::idl::ClusterParameters::gMaxWithoutClockCorrectionPassive() const
{
    return m_gMaxWithoutClockCorrectionPassive;
}

/*!
 * @brief This function returns a reference to member gMaxWithoutClockCorrectionPassive
 * @return Reference to member gMaxWithoutClockCorrectionPassive
 */
uint8_t& ib::sim::fr::idl::ClusterParameters::gMaxWithoutClockCorrectionPassive()
{
    return m_gMaxWithoutClockCorrectionPassive;
}
/*!
 * @brief This function sets a value in member gNumberOfMiniSlots
 * @param _gNumberOfMiniSlots New value for member gNumberOfMiniSlots
 */
void ib::sim::fr::idl::ClusterParameters::gNumberOfMiniSlots(uint16_t _gNumberOfMiniSlots)
{
m_gNumberOfMiniSlots = _gNumberOfMiniSlots;
}

/*!
 * @brief This function returns the value of member gNumberOfMiniSlots
 * @return Value of member gNumberOfMiniSlots
 */
uint16_t ib::sim::fr::idl::ClusterParameters::gNumberOfMiniSlots() const
{
    return m_gNumberOfMiniSlots;
}

/*!
 * @brief This function returns a reference to member gNumberOfMiniSlots
 * @return Reference to member gNumberOfMiniSlots
 */
uint16_t& ib::sim::fr::idl::ClusterParameters::gNumberOfMiniSlots()
{
    return m_gNumberOfMiniSlots;
}
/*!
 * @brief This function sets a value in member gNumberOfStaticSlots
 * @param _gNumberOfStaticSlots New value for member gNumberOfStaticSlots
 */
void ib::sim::fr::idl::ClusterParameters::gNumberOfStaticSlots(uint16_t _gNumberOfStaticSlots)
{
m_gNumberOfStaticSlots = _gNumberOfStaticSlots;
}

/*!
 * @brief This function returns the value of member gNumberOfStaticSlots
 * @return Value of member gNumberOfStaticSlots
 */
uint16_t ib::sim::fr::idl::ClusterParameters::gNumberOfStaticSlots() const
{
    return m_gNumberOfStaticSlots;
}

/*!
 * @brief This function returns a reference to member gNumberOfStaticSlots
 * @return Reference to member gNumberOfStaticSlots
 */
uint16_t& ib::sim::fr::idl::ClusterParameters::gNumberOfStaticSlots()
{
    return m_gNumberOfStaticSlots;
}
/*!
 * @brief This function sets a value in member gPayloadLengthStatic
 * @param _gPayloadLengthStatic New value for member gPayloadLengthStatic
 */
void ib::sim::fr::idl::ClusterParameters::gPayloadLengthStatic(uint16_t _gPayloadLengthStatic)
{
m_gPayloadLengthStatic = _gPayloadLengthStatic;
}

/*!
 * @brief This function returns the value of member gPayloadLengthStatic
 * @return Value of member gPayloadLengthStatic
 */
uint16_t ib::sim::fr::idl::ClusterParameters::gPayloadLengthStatic() const
{
    return m_gPayloadLengthStatic;
}

/*!
 * @brief This function returns a reference to member gPayloadLengthStatic
 * @return Reference to member gPayloadLengthStatic
 */
uint16_t& ib::sim::fr::idl::ClusterParameters::gPayloadLengthStatic()
{
    return m_gPayloadLengthStatic;
}
/*!
 * @brief This function sets a value in member gSyncFrameIDCountMax
 * @param _gSyncFrameIDCountMax New value for member gSyncFrameIDCountMax
 */
void ib::sim::fr::idl::ClusterParameters::gSyncFrameIDCountMax(uint8_t _gSyncFrameIDCountMax)
{
m_gSyncFrameIDCountMax = _gSyncFrameIDCountMax;
}

/*!
 * @brief This function returns the value of member gSyncFrameIDCountMax
 * @return Value of member gSyncFrameIDCountMax
 */
uint8_t ib::sim::fr::idl::ClusterParameters::gSyncFrameIDCountMax() const
{
    return m_gSyncFrameIDCountMax;
}

/*!
 * @brief This function returns a reference to member gSyncFrameIDCountMax
 * @return Reference to member gSyncFrameIDCountMax
 */
uint8_t& ib::sim::fr::idl::ClusterParameters::gSyncFrameIDCountMax()
{
    return m_gSyncFrameIDCountMax;
}

size_t ib::sim::fr::idl::ClusterParameters::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;























    return current_align;
}

bool ib::sim::fr::idl::ClusterParameters::isKeyDefined()
{
   return false;
}

void ib::sim::fr::idl::ClusterParameters::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
}

ib::sim::fr::idl::NodeParameters::NodeParameters()
{
    m_pAllowHaltDueToClock = 0;
    m_pAllowPassiveToActive = 0;
    m_pChannels = ib::sim::fr::idl::None;
    m_pClusterDriftDamping = 0;
    m_pdAcceptedStartupRange = 0;
    m_pdListenTimeout = 0;
    m_pKeySlotId = 0;
    m_pKeySlotOnlyEnabled = 0;
    m_pKeySlotUsedForStartup = 0;
    m_pKeySlotUsedForSync = 0;
    m_pLatestTx = 0;
    m_pMacroInitialOffsetA = 0;
    m_pMacroInitialOffsetB = 0;
    m_pMicroInitialOffsetA = 0;
    m_pMicroInitialOffsetB = 0;
    m_pMicroPerCycle = 0;
    m_pOffsetCorrectionOut = 0;
    m_pOffsetCorrectionStart = 0;
    m_pRateCorrectionOut = 0;
    m_pWakeupChannel = ib::sim::fr::idl::None;
    m_pWakeupPattern = 0;
    m_pdMicrotick = ib::sim::fr::idl::T12_5NS;
    m_pSamplesPerMicrotick = 0;

}

ib::sim::fr::idl::NodeParameters::~NodeParameters()
{























}

ib::sim::fr::idl::NodeParameters::NodeParameters(const NodeParameters &x)
{
    m_pAllowHaltDueToClock = x.m_pAllowHaltDueToClock;
    m_pAllowPassiveToActive = x.m_pAllowPassiveToActive;
    m_pChannels = x.m_pChannels;
    m_pClusterDriftDamping = x.m_pClusterDriftDamping;
    m_pdAcceptedStartupRange = x.m_pdAcceptedStartupRange;
    m_pdListenTimeout = x.m_pdListenTimeout;
    m_pKeySlotId = x.m_pKeySlotId;
    m_pKeySlotOnlyEnabled = x.m_pKeySlotOnlyEnabled;
    m_pKeySlotUsedForStartup = x.m_pKeySlotUsedForStartup;
    m_pKeySlotUsedForSync = x.m_pKeySlotUsedForSync;
    m_pLatestTx = x.m_pLatestTx;
    m_pMacroInitialOffsetA = x.m_pMacroInitialOffsetA;
    m_pMacroInitialOffsetB = x.m_pMacroInitialOffsetB;
    m_pMicroInitialOffsetA = x.m_pMicroInitialOffsetA;
    m_pMicroInitialOffsetB = x.m_pMicroInitialOffsetB;
    m_pMicroPerCycle = x.m_pMicroPerCycle;
    m_pOffsetCorrectionOut = x.m_pOffsetCorrectionOut;
    m_pOffsetCorrectionStart = x.m_pOffsetCorrectionStart;
    m_pRateCorrectionOut = x.m_pRateCorrectionOut;
    m_pWakeupChannel = x.m_pWakeupChannel;
    m_pWakeupPattern = x.m_pWakeupPattern;
    m_pdMicrotick = x.m_pdMicrotick;
    m_pSamplesPerMicrotick = x.m_pSamplesPerMicrotick;
}

ib::sim::fr::idl::NodeParameters::NodeParameters(NodeParameters &&x)
{
    m_pAllowHaltDueToClock = x.m_pAllowHaltDueToClock;
    m_pAllowPassiveToActive = x.m_pAllowPassiveToActive;
    m_pChannels = x.m_pChannels;
    m_pClusterDriftDamping = x.m_pClusterDriftDamping;
    m_pdAcceptedStartupRange = x.m_pdAcceptedStartupRange;
    m_pdListenTimeout = x.m_pdListenTimeout;
    m_pKeySlotId = x.m_pKeySlotId;
    m_pKeySlotOnlyEnabled = x.m_pKeySlotOnlyEnabled;
    m_pKeySlotUsedForStartup = x.m_pKeySlotUsedForStartup;
    m_pKeySlotUsedForSync = x.m_pKeySlotUsedForSync;
    m_pLatestTx = x.m_pLatestTx;
    m_pMacroInitialOffsetA = x.m_pMacroInitialOffsetA;
    m_pMacroInitialOffsetB = x.m_pMacroInitialOffsetB;
    m_pMicroInitialOffsetA = x.m_pMicroInitialOffsetA;
    m_pMicroInitialOffsetB = x.m_pMicroInitialOffsetB;
    m_pMicroPerCycle = x.m_pMicroPerCycle;
    m_pOffsetCorrectionOut = x.m_pOffsetCorrectionOut;
    m_pOffsetCorrectionStart = x.m_pOffsetCorrectionStart;
    m_pRateCorrectionOut = x.m_pRateCorrectionOut;
    m_pWakeupChannel = x.m_pWakeupChannel;
    m_pWakeupPattern = x.m_pWakeupPattern;
    m_pdMicrotick = x.m_pdMicrotick;
    m_pSamplesPerMicrotick = x.m_pSamplesPerMicrotick;
}

ib::sim::fr::idl::NodeParameters& ib::sim::fr::idl::NodeParameters::operator=(const NodeParameters &x)
{

    m_pAllowHaltDueToClock = x.m_pAllowHaltDueToClock;
    m_pAllowPassiveToActive = x.m_pAllowPassiveToActive;
    m_pChannels = x.m_pChannels;
    m_pClusterDriftDamping = x.m_pClusterDriftDamping;
    m_pdAcceptedStartupRange = x.m_pdAcceptedStartupRange;
    m_pdListenTimeout = x.m_pdListenTimeout;
    m_pKeySlotId = x.m_pKeySlotId;
    m_pKeySlotOnlyEnabled = x.m_pKeySlotOnlyEnabled;
    m_pKeySlotUsedForStartup = x.m_pKeySlotUsedForStartup;
    m_pKeySlotUsedForSync = x.m_pKeySlotUsedForSync;
    m_pLatestTx = x.m_pLatestTx;
    m_pMacroInitialOffsetA = x.m_pMacroInitialOffsetA;
    m_pMacroInitialOffsetB = x.m_pMacroInitialOffsetB;
    m_pMicroInitialOffsetA = x.m_pMicroInitialOffsetA;
    m_pMicroInitialOffsetB = x.m_pMicroInitialOffsetB;
    m_pMicroPerCycle = x.m_pMicroPerCycle;
    m_pOffsetCorrectionOut = x.m_pOffsetCorrectionOut;
    m_pOffsetCorrectionStart = x.m_pOffsetCorrectionStart;
    m_pRateCorrectionOut = x.m_pRateCorrectionOut;
    m_pWakeupChannel = x.m_pWakeupChannel;
    m_pWakeupPattern = x.m_pWakeupPattern;
    m_pdMicrotick = x.m_pdMicrotick;
    m_pSamplesPerMicrotick = x.m_pSamplesPerMicrotick;

    return *this;
}

ib::sim::fr::idl::NodeParameters& ib::sim::fr::idl::NodeParameters::operator=(NodeParameters &&x)
{

    m_pAllowHaltDueToClock = x.m_pAllowHaltDueToClock;
    m_pAllowPassiveToActive = x.m_pAllowPassiveToActive;
    m_pChannels = x.m_pChannels;
    m_pClusterDriftDamping = x.m_pClusterDriftDamping;
    m_pdAcceptedStartupRange = x.m_pdAcceptedStartupRange;
    m_pdListenTimeout = x.m_pdListenTimeout;
    m_pKeySlotId = x.m_pKeySlotId;
    m_pKeySlotOnlyEnabled = x.m_pKeySlotOnlyEnabled;
    m_pKeySlotUsedForStartup = x.m_pKeySlotUsedForStartup;
    m_pKeySlotUsedForSync = x.m_pKeySlotUsedForSync;
    m_pLatestTx = x.m_pLatestTx;
    m_pMacroInitialOffsetA = x.m_pMacroInitialOffsetA;
    m_pMacroInitialOffsetB = x.m_pMacroInitialOffsetB;
    m_pMicroInitialOffsetA = x.m_pMicroInitialOffsetA;
    m_pMicroInitialOffsetB = x.m_pMicroInitialOffsetB;
    m_pMicroPerCycle = x.m_pMicroPerCycle;
    m_pOffsetCorrectionOut = x.m_pOffsetCorrectionOut;
    m_pOffsetCorrectionStart = x.m_pOffsetCorrectionStart;
    m_pRateCorrectionOut = x.m_pRateCorrectionOut;
    m_pWakeupChannel = x.m_pWakeupChannel;
    m_pWakeupPattern = x.m_pWakeupPattern;
    m_pdMicrotick = x.m_pdMicrotick;
    m_pSamplesPerMicrotick = x.m_pSamplesPerMicrotick;

    return *this;
}

size_t ib::sim::fr::idl::NodeParameters::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t ib::sim::fr::idl::NodeParameters::getCdrSerializedSize(const ib::sim::fr::idl::NodeParameters& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void ib::sim::fr::idl::NodeParameters::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_pAllowHaltDueToClock;
    scdr << m_pAllowPassiveToActive;
    scdr << (uint32_t)m_pChannels;
    scdr << m_pClusterDriftDamping;
    scdr << m_pdAcceptedStartupRange;
    scdr << m_pdListenTimeout;
    scdr << m_pKeySlotId;
    scdr << m_pKeySlotOnlyEnabled;
    scdr << m_pKeySlotUsedForStartup;
    scdr << m_pKeySlotUsedForSync;
    scdr << m_pLatestTx;
    scdr << m_pMacroInitialOffsetA;
    scdr << m_pMacroInitialOffsetB;
    scdr << m_pMicroInitialOffsetA;
    scdr << m_pMicroInitialOffsetB;
    scdr << m_pMicroPerCycle;
    scdr << m_pOffsetCorrectionOut;
    scdr << m_pOffsetCorrectionStart;
    scdr << m_pRateCorrectionOut;
    scdr << (uint32_t)m_pWakeupChannel;
    scdr << m_pWakeupPattern;
    scdr << (uint32_t)m_pdMicrotick;
    scdr << m_pSamplesPerMicrotick;
}

void ib::sim::fr::idl::NodeParameters::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_pAllowHaltDueToClock;
    dcdr >> m_pAllowPassiveToActive;
    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_pChannels = (ib::sim::fr::idl::Channel)enum_value;
    }

    dcdr >> m_pClusterDriftDamping;
    dcdr >> m_pdAcceptedStartupRange;
    dcdr >> m_pdListenTimeout;
    dcdr >> m_pKeySlotId;
    dcdr >> m_pKeySlotOnlyEnabled;
    dcdr >> m_pKeySlotUsedForStartup;
    dcdr >> m_pKeySlotUsedForSync;
    dcdr >> m_pLatestTx;
    dcdr >> m_pMacroInitialOffsetA;
    dcdr >> m_pMacroInitialOffsetB;
    dcdr >> m_pMicroInitialOffsetA;
    dcdr >> m_pMicroInitialOffsetB;
    dcdr >> m_pMicroPerCycle;
    dcdr >> m_pOffsetCorrectionOut;
    dcdr >> m_pOffsetCorrectionStart;
    dcdr >> m_pRateCorrectionOut;
    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_pWakeupChannel = (ib::sim::fr::idl::Channel)enum_value;
    }

    dcdr >> m_pWakeupPattern;
    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_pdMicrotick = (ib::sim::fr::idl::ClockPeriod)enum_value;
    }

    dcdr >> m_pSamplesPerMicrotick;
}

/*!
 * @brief This function sets a value in member pAllowHaltDueToClock
 * @param _pAllowHaltDueToClock New value for member pAllowHaltDueToClock
 */
void ib::sim::fr::idl::NodeParameters::pAllowHaltDueToClock(uint8_t _pAllowHaltDueToClock)
{
m_pAllowHaltDueToClock = _pAllowHaltDueToClock;
}

/*!
 * @brief This function returns the value of member pAllowHaltDueToClock
 * @return Value of member pAllowHaltDueToClock
 */
uint8_t ib::sim::fr::idl::NodeParameters::pAllowHaltDueToClock() const
{
    return m_pAllowHaltDueToClock;
}

/*!
 * @brief This function returns a reference to member pAllowHaltDueToClock
 * @return Reference to member pAllowHaltDueToClock
 */
uint8_t& ib::sim::fr::idl::NodeParameters::pAllowHaltDueToClock()
{
    return m_pAllowHaltDueToClock;
}
/*!
 * @brief This function sets a value in member pAllowPassiveToActive
 * @param _pAllowPassiveToActive New value for member pAllowPassiveToActive
 */
void ib::sim::fr::idl::NodeParameters::pAllowPassiveToActive(uint8_t _pAllowPassiveToActive)
{
m_pAllowPassiveToActive = _pAllowPassiveToActive;
}

/*!
 * @brief This function returns the value of member pAllowPassiveToActive
 * @return Value of member pAllowPassiveToActive
 */
uint8_t ib::sim::fr::idl::NodeParameters::pAllowPassiveToActive() const
{
    return m_pAllowPassiveToActive;
}

/*!
 * @brief This function returns a reference to member pAllowPassiveToActive
 * @return Reference to member pAllowPassiveToActive
 */
uint8_t& ib::sim::fr::idl::NodeParameters::pAllowPassiveToActive()
{
    return m_pAllowPassiveToActive;
}
/*!
 * @brief This function sets a value in member pChannels
 * @param _pChannels New value for member pChannels
 */
void ib::sim::fr::idl::NodeParameters::pChannels(ib::sim::fr::idl::Channel _pChannels)
{
m_pChannels = _pChannels;
}

/*!
 * @brief This function returns the value of member pChannels
 * @return Value of member pChannels
 */
ib::sim::fr::idl::Channel ib::sim::fr::idl::NodeParameters::pChannels() const
{
    return m_pChannels;
}

/*!
 * @brief This function returns a reference to member pChannels
 * @return Reference to member pChannels
 */
ib::sim::fr::idl::Channel& ib::sim::fr::idl::NodeParameters::pChannels()
{
    return m_pChannels;
}
/*!
 * @brief This function sets a value in member pClusterDriftDamping
 * @param _pClusterDriftDamping New value for member pClusterDriftDamping
 */
void ib::sim::fr::idl::NodeParameters::pClusterDriftDamping(uint8_t _pClusterDriftDamping)
{
m_pClusterDriftDamping = _pClusterDriftDamping;
}

/*!
 * @brief This function returns the value of member pClusterDriftDamping
 * @return Value of member pClusterDriftDamping
 */
uint8_t ib::sim::fr::idl::NodeParameters::pClusterDriftDamping() const
{
    return m_pClusterDriftDamping;
}

/*!
 * @brief This function returns a reference to member pClusterDriftDamping
 * @return Reference to member pClusterDriftDamping
 */
uint8_t& ib::sim::fr::idl::NodeParameters::pClusterDriftDamping()
{
    return m_pClusterDriftDamping;
}
/*!
 * @brief This function sets a value in member pdAcceptedStartupRange
 * @param _pdAcceptedStartupRange New value for member pdAcceptedStartupRange
 */
void ib::sim::fr::idl::NodeParameters::pdAcceptedStartupRange(int32_t _pdAcceptedStartupRange)
{
m_pdAcceptedStartupRange = _pdAcceptedStartupRange;
}

/*!
 * @brief This function returns the value of member pdAcceptedStartupRange
 * @return Value of member pdAcceptedStartupRange
 */
int32_t ib::sim::fr::idl::NodeParameters::pdAcceptedStartupRange() const
{
    return m_pdAcceptedStartupRange;
}

/*!
 * @brief This function returns a reference to member pdAcceptedStartupRange
 * @return Reference to member pdAcceptedStartupRange
 */
int32_t& ib::sim::fr::idl::NodeParameters::pdAcceptedStartupRange()
{
    return m_pdAcceptedStartupRange;
}
/*!
 * @brief This function sets a value in member pdListenTimeout
 * @param _pdListenTimeout New value for member pdListenTimeout
 */
void ib::sim::fr::idl::NodeParameters::pdListenTimeout(int32_t _pdListenTimeout)
{
m_pdListenTimeout = _pdListenTimeout;
}

/*!
 * @brief This function returns the value of member pdListenTimeout
 * @return Value of member pdListenTimeout
 */
int32_t ib::sim::fr::idl::NodeParameters::pdListenTimeout() const
{
    return m_pdListenTimeout;
}

/*!
 * @brief This function returns a reference to member pdListenTimeout
 * @return Reference to member pdListenTimeout
 */
int32_t& ib::sim::fr::idl::NodeParameters::pdListenTimeout()
{
    return m_pdListenTimeout;
}
/*!
 * @brief This function sets a value in member pKeySlotId
 * @param _pKeySlotId New value for member pKeySlotId
 */
void ib::sim::fr::idl::NodeParameters::pKeySlotId(uint16_t _pKeySlotId)
{
m_pKeySlotId = _pKeySlotId;
}

/*!
 * @brief This function returns the value of member pKeySlotId
 * @return Value of member pKeySlotId
 */
uint16_t ib::sim::fr::idl::NodeParameters::pKeySlotId() const
{
    return m_pKeySlotId;
}

/*!
 * @brief This function returns a reference to member pKeySlotId
 * @return Reference to member pKeySlotId
 */
uint16_t& ib::sim::fr::idl::NodeParameters::pKeySlotId()
{
    return m_pKeySlotId;
}
/*!
 * @brief This function sets a value in member pKeySlotOnlyEnabled
 * @param _pKeySlotOnlyEnabled New value for member pKeySlotOnlyEnabled
 */
void ib::sim::fr::idl::NodeParameters::pKeySlotOnlyEnabled(uint8_t _pKeySlotOnlyEnabled)
{
m_pKeySlotOnlyEnabled = _pKeySlotOnlyEnabled;
}

/*!
 * @brief This function returns the value of member pKeySlotOnlyEnabled
 * @return Value of member pKeySlotOnlyEnabled
 */
uint8_t ib::sim::fr::idl::NodeParameters::pKeySlotOnlyEnabled() const
{
    return m_pKeySlotOnlyEnabled;
}

/*!
 * @brief This function returns a reference to member pKeySlotOnlyEnabled
 * @return Reference to member pKeySlotOnlyEnabled
 */
uint8_t& ib::sim::fr::idl::NodeParameters::pKeySlotOnlyEnabled()
{
    return m_pKeySlotOnlyEnabled;
}
/*!
 * @brief This function sets a value in member pKeySlotUsedForStartup
 * @param _pKeySlotUsedForStartup New value for member pKeySlotUsedForStartup
 */
void ib::sim::fr::idl::NodeParameters::pKeySlotUsedForStartup(uint8_t _pKeySlotUsedForStartup)
{
m_pKeySlotUsedForStartup = _pKeySlotUsedForStartup;
}

/*!
 * @brief This function returns the value of member pKeySlotUsedForStartup
 * @return Value of member pKeySlotUsedForStartup
 */
uint8_t ib::sim::fr::idl::NodeParameters::pKeySlotUsedForStartup() const
{
    return m_pKeySlotUsedForStartup;
}

/*!
 * @brief This function returns a reference to member pKeySlotUsedForStartup
 * @return Reference to member pKeySlotUsedForStartup
 */
uint8_t& ib::sim::fr::idl::NodeParameters::pKeySlotUsedForStartup()
{
    return m_pKeySlotUsedForStartup;
}
/*!
 * @brief This function sets a value in member pKeySlotUsedForSync
 * @param _pKeySlotUsedForSync New value for member pKeySlotUsedForSync
 */
void ib::sim::fr::idl::NodeParameters::pKeySlotUsedForSync(uint8_t _pKeySlotUsedForSync)
{
m_pKeySlotUsedForSync = _pKeySlotUsedForSync;
}

/*!
 * @brief This function returns the value of member pKeySlotUsedForSync
 * @return Value of member pKeySlotUsedForSync
 */
uint8_t ib::sim::fr::idl::NodeParameters::pKeySlotUsedForSync() const
{
    return m_pKeySlotUsedForSync;
}

/*!
 * @brief This function returns a reference to member pKeySlotUsedForSync
 * @return Reference to member pKeySlotUsedForSync
 */
uint8_t& ib::sim::fr::idl::NodeParameters::pKeySlotUsedForSync()
{
    return m_pKeySlotUsedForSync;
}
/*!
 * @brief This function sets a value in member pLatestTx
 * @param _pLatestTx New value for member pLatestTx
 */
void ib::sim::fr::idl::NodeParameters::pLatestTx(uint16_t _pLatestTx)
{
m_pLatestTx = _pLatestTx;
}

/*!
 * @brief This function returns the value of member pLatestTx
 * @return Value of member pLatestTx
 */
uint16_t ib::sim::fr::idl::NodeParameters::pLatestTx() const
{
    return m_pLatestTx;
}

/*!
 * @brief This function returns a reference to member pLatestTx
 * @return Reference to member pLatestTx
 */
uint16_t& ib::sim::fr::idl::NodeParameters::pLatestTx()
{
    return m_pLatestTx;
}
/*!
 * @brief This function sets a value in member pMacroInitialOffsetA
 * @param _pMacroInitialOffsetA New value for member pMacroInitialOffsetA
 */
void ib::sim::fr::idl::NodeParameters::pMacroInitialOffsetA(uint8_t _pMacroInitialOffsetA)
{
m_pMacroInitialOffsetA = _pMacroInitialOffsetA;
}

/*!
 * @brief This function returns the value of member pMacroInitialOffsetA
 * @return Value of member pMacroInitialOffsetA
 */
uint8_t ib::sim::fr::idl::NodeParameters::pMacroInitialOffsetA() const
{
    return m_pMacroInitialOffsetA;
}

/*!
 * @brief This function returns a reference to member pMacroInitialOffsetA
 * @return Reference to member pMacroInitialOffsetA
 */
uint8_t& ib::sim::fr::idl::NodeParameters::pMacroInitialOffsetA()
{
    return m_pMacroInitialOffsetA;
}
/*!
 * @brief This function sets a value in member pMacroInitialOffsetB
 * @param _pMacroInitialOffsetB New value for member pMacroInitialOffsetB
 */
void ib::sim::fr::idl::NodeParameters::pMacroInitialOffsetB(uint8_t _pMacroInitialOffsetB)
{
m_pMacroInitialOffsetB = _pMacroInitialOffsetB;
}

/*!
 * @brief This function returns the value of member pMacroInitialOffsetB
 * @return Value of member pMacroInitialOffsetB
 */
uint8_t ib::sim::fr::idl::NodeParameters::pMacroInitialOffsetB() const
{
    return m_pMacroInitialOffsetB;
}

/*!
 * @brief This function returns a reference to member pMacroInitialOffsetB
 * @return Reference to member pMacroInitialOffsetB
 */
uint8_t& ib::sim::fr::idl::NodeParameters::pMacroInitialOffsetB()
{
    return m_pMacroInitialOffsetB;
}
/*!
 * @brief This function sets a value in member pMicroInitialOffsetA
 * @param _pMicroInitialOffsetA New value for member pMicroInitialOffsetA
 */
void ib::sim::fr::idl::NodeParameters::pMicroInitialOffsetA(int32_t _pMicroInitialOffsetA)
{
m_pMicroInitialOffsetA = _pMicroInitialOffsetA;
}

/*!
 * @brief This function returns the value of member pMicroInitialOffsetA
 * @return Value of member pMicroInitialOffsetA
 */
int32_t ib::sim::fr::idl::NodeParameters::pMicroInitialOffsetA() const
{
    return m_pMicroInitialOffsetA;
}

/*!
 * @brief This function returns a reference to member pMicroInitialOffsetA
 * @return Reference to member pMicroInitialOffsetA
 */
int32_t& ib::sim::fr::idl::NodeParameters::pMicroInitialOffsetA()
{
    return m_pMicroInitialOffsetA;
}
/*!
 * @brief This function sets a value in member pMicroInitialOffsetB
 * @param _pMicroInitialOffsetB New value for member pMicroInitialOffsetB
 */
void ib::sim::fr::idl::NodeParameters::pMicroInitialOffsetB(int32_t _pMicroInitialOffsetB)
{
m_pMicroInitialOffsetB = _pMicroInitialOffsetB;
}

/*!
 * @brief This function returns the value of member pMicroInitialOffsetB
 * @return Value of member pMicroInitialOffsetB
 */
int32_t ib::sim::fr::idl::NodeParameters::pMicroInitialOffsetB() const
{
    return m_pMicroInitialOffsetB;
}

/*!
 * @brief This function returns a reference to member pMicroInitialOffsetB
 * @return Reference to member pMicroInitialOffsetB
 */
int32_t& ib::sim::fr::idl::NodeParameters::pMicroInitialOffsetB()
{
    return m_pMicroInitialOffsetB;
}
/*!
 * @brief This function sets a value in member pMicroPerCycle
 * @param _pMicroPerCycle New value for member pMicroPerCycle
 */
void ib::sim::fr::idl::NodeParameters::pMicroPerCycle(int32_t _pMicroPerCycle)
{
m_pMicroPerCycle = _pMicroPerCycle;
}

/*!
 * @brief This function returns the value of member pMicroPerCycle
 * @return Value of member pMicroPerCycle
 */
int32_t ib::sim::fr::idl::NodeParameters::pMicroPerCycle() const
{
    return m_pMicroPerCycle;
}

/*!
 * @brief This function returns a reference to member pMicroPerCycle
 * @return Reference to member pMicroPerCycle
 */
int32_t& ib::sim::fr::idl::NodeParameters::pMicroPerCycle()
{
    return m_pMicroPerCycle;
}
/*!
 * @brief This function sets a value in member pOffsetCorrectionOut
 * @param _pOffsetCorrectionOut New value for member pOffsetCorrectionOut
 */
void ib::sim::fr::idl::NodeParameters::pOffsetCorrectionOut(int32_t _pOffsetCorrectionOut)
{
m_pOffsetCorrectionOut = _pOffsetCorrectionOut;
}

/*!
 * @brief This function returns the value of member pOffsetCorrectionOut
 * @return Value of member pOffsetCorrectionOut
 */
int32_t ib::sim::fr::idl::NodeParameters::pOffsetCorrectionOut() const
{
    return m_pOffsetCorrectionOut;
}

/*!
 * @brief This function returns a reference to member pOffsetCorrectionOut
 * @return Reference to member pOffsetCorrectionOut
 */
int32_t& ib::sim::fr::idl::NodeParameters::pOffsetCorrectionOut()
{
    return m_pOffsetCorrectionOut;
}
/*!
 * @brief This function sets a value in member pOffsetCorrectionStart
 * @param _pOffsetCorrectionStart New value for member pOffsetCorrectionStart
 */
void ib::sim::fr::idl::NodeParameters::pOffsetCorrectionStart(uint16_t _pOffsetCorrectionStart)
{
m_pOffsetCorrectionStart = _pOffsetCorrectionStart;
}

/*!
 * @brief This function returns the value of member pOffsetCorrectionStart
 * @return Value of member pOffsetCorrectionStart
 */
uint16_t ib::sim::fr::idl::NodeParameters::pOffsetCorrectionStart() const
{
    return m_pOffsetCorrectionStart;
}

/*!
 * @brief This function returns a reference to member pOffsetCorrectionStart
 * @return Reference to member pOffsetCorrectionStart
 */
uint16_t& ib::sim::fr::idl::NodeParameters::pOffsetCorrectionStart()
{
    return m_pOffsetCorrectionStart;
}
/*!
 * @brief This function sets a value in member pRateCorrectionOut
 * @param _pRateCorrectionOut New value for member pRateCorrectionOut
 */
void ib::sim::fr::idl::NodeParameters::pRateCorrectionOut(int32_t _pRateCorrectionOut)
{
m_pRateCorrectionOut = _pRateCorrectionOut;
}

/*!
 * @brief This function returns the value of member pRateCorrectionOut
 * @return Value of member pRateCorrectionOut
 */
int32_t ib::sim::fr::idl::NodeParameters::pRateCorrectionOut() const
{
    return m_pRateCorrectionOut;
}

/*!
 * @brief This function returns a reference to member pRateCorrectionOut
 * @return Reference to member pRateCorrectionOut
 */
int32_t& ib::sim::fr::idl::NodeParameters::pRateCorrectionOut()
{
    return m_pRateCorrectionOut;
}
/*!
 * @brief This function sets a value in member pWakeupChannel
 * @param _pWakeupChannel New value for member pWakeupChannel
 */
void ib::sim::fr::idl::NodeParameters::pWakeupChannel(ib::sim::fr::idl::Channel _pWakeupChannel)
{
m_pWakeupChannel = _pWakeupChannel;
}

/*!
 * @brief This function returns the value of member pWakeupChannel
 * @return Value of member pWakeupChannel
 */
ib::sim::fr::idl::Channel ib::sim::fr::idl::NodeParameters::pWakeupChannel() const
{
    return m_pWakeupChannel;
}

/*!
 * @brief This function returns a reference to member pWakeupChannel
 * @return Reference to member pWakeupChannel
 */
ib::sim::fr::idl::Channel& ib::sim::fr::idl::NodeParameters::pWakeupChannel()
{
    return m_pWakeupChannel;
}
/*!
 * @brief This function sets a value in member pWakeupPattern
 * @param _pWakeupPattern New value for member pWakeupPattern
 */
void ib::sim::fr::idl::NodeParameters::pWakeupPattern(uint8_t _pWakeupPattern)
{
m_pWakeupPattern = _pWakeupPattern;
}

/*!
 * @brief This function returns the value of member pWakeupPattern
 * @return Value of member pWakeupPattern
 */
uint8_t ib::sim::fr::idl::NodeParameters::pWakeupPattern() const
{
    return m_pWakeupPattern;
}

/*!
 * @brief This function returns a reference to member pWakeupPattern
 * @return Reference to member pWakeupPattern
 */
uint8_t& ib::sim::fr::idl::NodeParameters::pWakeupPattern()
{
    return m_pWakeupPattern;
}
/*!
 * @brief This function sets a value in member pdMicrotick
 * @param _pdMicrotick New value for member pdMicrotick
 */
void ib::sim::fr::idl::NodeParameters::pdMicrotick(ib::sim::fr::idl::ClockPeriod _pdMicrotick)
{
m_pdMicrotick = _pdMicrotick;
}

/*!
 * @brief This function returns the value of member pdMicrotick
 * @return Value of member pdMicrotick
 */
ib::sim::fr::idl::ClockPeriod ib::sim::fr::idl::NodeParameters::pdMicrotick() const
{
    return m_pdMicrotick;
}

/*!
 * @brief This function returns a reference to member pdMicrotick
 * @return Reference to member pdMicrotick
 */
ib::sim::fr::idl::ClockPeriod& ib::sim::fr::idl::NodeParameters::pdMicrotick()
{
    return m_pdMicrotick;
}
/*!
 * @brief This function sets a value in member pSamplesPerMicrotick
 * @param _pSamplesPerMicrotick New value for member pSamplesPerMicrotick
 */
void ib::sim::fr::idl::NodeParameters::pSamplesPerMicrotick(uint8_t _pSamplesPerMicrotick)
{
m_pSamplesPerMicrotick = _pSamplesPerMicrotick;
}

/*!
 * @brief This function returns the value of member pSamplesPerMicrotick
 * @return Value of member pSamplesPerMicrotick
 */
uint8_t ib::sim::fr::idl::NodeParameters::pSamplesPerMicrotick() const
{
    return m_pSamplesPerMicrotick;
}

/*!
 * @brief This function returns a reference to member pSamplesPerMicrotick
 * @return Reference to member pSamplesPerMicrotick
 */
uint8_t& ib::sim::fr::idl::NodeParameters::pSamplesPerMicrotick()
{
    return m_pSamplesPerMicrotick;
}

size_t ib::sim::fr::idl::NodeParameters::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;


























    return current_align;
}

bool ib::sim::fr::idl::NodeParameters::isKeyDefined()
{
   return false;
}

void ib::sim::fr::idl::NodeParameters::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
}


ib::sim::fr::idl::TxBufferConfig::TxBufferConfig()
{
    m_channels = ib::sim::fr::idl::None;
    m_slotId = 0;
    m_offset = 0;
    m_repetition = 0;
    m_hasPayloadPreambleIndicator = false;
    m_headerCrc = 0;
    m_transmissionMode = ib::sim::fr::idl::SingleShot;

}

ib::sim::fr::idl::TxBufferConfig::~TxBufferConfig()
{







}

ib::sim::fr::idl::TxBufferConfig::TxBufferConfig(const TxBufferConfig &x)
{
    m_channels = x.m_channels;
    m_slotId = x.m_slotId;
    m_offset = x.m_offset;
    m_repetition = x.m_repetition;
    m_hasPayloadPreambleIndicator = x.m_hasPayloadPreambleIndicator;
    m_headerCrc = x.m_headerCrc;
    m_transmissionMode = x.m_transmissionMode;
}

ib::sim::fr::idl::TxBufferConfig::TxBufferConfig(TxBufferConfig &&x)
{
    m_channels = x.m_channels;
    m_slotId = x.m_slotId;
    m_offset = x.m_offset;
    m_repetition = x.m_repetition;
    m_hasPayloadPreambleIndicator = x.m_hasPayloadPreambleIndicator;
    m_headerCrc = x.m_headerCrc;
    m_transmissionMode = x.m_transmissionMode;
}

ib::sim::fr::idl::TxBufferConfig& ib::sim::fr::idl::TxBufferConfig::operator=(const TxBufferConfig &x)
{

    m_channels = x.m_channels;
    m_slotId = x.m_slotId;
    m_offset = x.m_offset;
    m_repetition = x.m_repetition;
    m_hasPayloadPreambleIndicator = x.m_hasPayloadPreambleIndicator;
    m_headerCrc = x.m_headerCrc;
    m_transmissionMode = x.m_transmissionMode;

    return *this;
}

ib::sim::fr::idl::TxBufferConfig& ib::sim::fr::idl::TxBufferConfig::operator=(TxBufferConfig &&x)
{

    m_channels = x.m_channels;
    m_slotId = x.m_slotId;
    m_offset = x.m_offset;
    m_repetition = x.m_repetition;
    m_hasPayloadPreambleIndicator = x.m_hasPayloadPreambleIndicator;
    m_headerCrc = x.m_headerCrc;
    m_transmissionMode = x.m_transmissionMode;

    return *this;
}

size_t ib::sim::fr::idl::TxBufferConfig::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t ib::sim::fr::idl::TxBufferConfig::getCdrSerializedSize(const ib::sim::fr::idl::TxBufferConfig& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void ib::sim::fr::idl::TxBufferConfig::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << (uint32_t)m_channels;
    scdr << m_slotId;
    scdr << m_offset;
    scdr << m_repetition;
    scdr << m_hasPayloadPreambleIndicator;
    scdr << m_headerCrc;
    scdr << (uint32_t)m_transmissionMode;
}

void ib::sim::fr::idl::TxBufferConfig::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_channels = (ib::sim::fr::idl::Channel)enum_value;
    }

    dcdr >> m_slotId;
    dcdr >> m_offset;
    dcdr >> m_repetition;
    dcdr >> m_hasPayloadPreambleIndicator;
    dcdr >> m_headerCrc;
    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_transmissionMode = (ib::sim::fr::idl::TransmissionMode)enum_value;
    }

}

/*!
 * @brief This function sets a value in member channels
 * @param _channels New value for member channels
 */
void ib::sim::fr::idl::TxBufferConfig::channels(ib::sim::fr::idl::Channel _channels)
{
m_channels = _channels;
}

/*!
 * @brief This function returns the value of member channels
 * @return Value of member channels
 */
ib::sim::fr::idl::Channel ib::sim::fr::idl::TxBufferConfig::channels() const
{
    return m_channels;
}

/*!
 * @brief This function returns a reference to member channels
 * @return Reference to member channels
 */
ib::sim::fr::idl::Channel& ib::sim::fr::idl::TxBufferConfig::channels()
{
    return m_channels;
}
/*!
 * @brief This function sets a value in member slotId
 * @param _slotId New value for member slotId
 */
void ib::sim::fr::idl::TxBufferConfig::slotId(uint16_t _slotId)
{
m_slotId = _slotId;
}

/*!
 * @brief This function returns the value of member slotId
 * @return Value of member slotId
 */
uint16_t ib::sim::fr::idl::TxBufferConfig::slotId() const
{
    return m_slotId;
}

/*!
 * @brief This function returns a reference to member slotId
 * @return Reference to member slotId
 */
uint16_t& ib::sim::fr::idl::TxBufferConfig::slotId()
{
    return m_slotId;
}
/*!
 * @brief This function sets a value in member offset
 * @param _offset New value for member offset
 */
void ib::sim::fr::idl::TxBufferConfig::offset(uint8_t _offset)
{
m_offset = _offset;
}

/*!
 * @brief This function returns the value of member offset
 * @return Value of member offset
 */
uint8_t ib::sim::fr::idl::TxBufferConfig::offset() const
{
    return m_offset;
}

/*!
 * @brief This function returns a reference to member offset
 * @return Reference to member offset
 */
uint8_t& ib::sim::fr::idl::TxBufferConfig::offset()
{
    return m_offset;
}
/*!
 * @brief This function sets a value in member repetition
 * @param _repetition New value for member repetition
 */
void ib::sim::fr::idl::TxBufferConfig::repetition(uint8_t _repetition)
{
m_repetition = _repetition;
}

/*!
 * @brief This function returns the value of member repetition
 * @return Value of member repetition
 */
uint8_t ib::sim::fr::idl::TxBufferConfig::repetition() const
{
    return m_repetition;
}

/*!
 * @brief This function returns a reference to member repetition
 * @return Reference to member repetition
 */
uint8_t& ib::sim::fr::idl::TxBufferConfig::repetition()
{
    return m_repetition;
}
/*!
 * @brief This function sets a value in member hasPayloadPreambleIndicator
 * @param _hasPayloadPreambleIndicator New value for member hasPayloadPreambleIndicator
 */
void ib::sim::fr::idl::TxBufferConfig::hasPayloadPreambleIndicator(bool _hasPayloadPreambleIndicator)
{
m_hasPayloadPreambleIndicator = _hasPayloadPreambleIndicator;
}

/*!
 * @brief This function returns the value of member hasPayloadPreambleIndicator
 * @return Value of member hasPayloadPreambleIndicator
 */
bool ib::sim::fr::idl::TxBufferConfig::hasPayloadPreambleIndicator() const
{
    return m_hasPayloadPreambleIndicator;
}

/*!
 * @brief This function returns a reference to member hasPayloadPreambleIndicator
 * @return Reference to member hasPayloadPreambleIndicator
 */
bool& ib::sim::fr::idl::TxBufferConfig::hasPayloadPreambleIndicator()
{
    return m_hasPayloadPreambleIndicator;
}
/*!
 * @brief This function sets a value in member headerCrc
 * @param _headerCrc New value for member headerCrc
 */
void ib::sim::fr::idl::TxBufferConfig::headerCrc(uint16_t _headerCrc)
{
m_headerCrc = _headerCrc;
}

/*!
 * @brief This function returns the value of member headerCrc
 * @return Value of member headerCrc
 */
uint16_t ib::sim::fr::idl::TxBufferConfig::headerCrc() const
{
    return m_headerCrc;
}

/*!
 * @brief This function returns a reference to member headerCrc
 * @return Reference to member headerCrc
 */
uint16_t& ib::sim::fr::idl::TxBufferConfig::headerCrc()
{
    return m_headerCrc;
}
/*!
 * @brief This function sets a value in member transmissionMode
 * @param _transmissionMode New value for member transmissionMode
 */
void ib::sim::fr::idl::TxBufferConfig::transmissionMode(ib::sim::fr::idl::TransmissionMode _transmissionMode)
{
m_transmissionMode = _transmissionMode;
}

/*!
 * @brief This function returns the value of member transmissionMode
 * @return Value of member transmissionMode
 */
ib::sim::fr::idl::TransmissionMode ib::sim::fr::idl::TxBufferConfig::transmissionMode() const
{
    return m_transmissionMode;
}

/*!
 * @brief This function returns a reference to member transmissionMode
 * @return Reference to member transmissionMode
 */
ib::sim::fr::idl::TransmissionMode& ib::sim::fr::idl::TxBufferConfig::transmissionMode()
{
    return m_transmissionMode;
}

size_t ib::sim::fr::idl::TxBufferConfig::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;










    return current_align;
}

bool ib::sim::fr::idl::TxBufferConfig::isKeyDefined()
{
   return false;
}

void ib::sim::fr::idl::TxBufferConfig::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
	 
	 
	 
	 
	 
}

ib::sim::fr::idl::ControllerConfig::ControllerConfig()
{





}

ib::sim::fr::idl::ControllerConfig::~ControllerConfig()
{




}

ib::sim::fr::idl::ControllerConfig::ControllerConfig(const ControllerConfig &x)
{
    m_senderAddr = x.m_senderAddr;
    m_clusterParams = x.m_clusterParams;
    m_nodeParams = x.m_nodeParams;
    m_bufferConfigs = x.m_bufferConfigs;
}

ib::sim::fr::idl::ControllerConfig::ControllerConfig(ControllerConfig &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_clusterParams = std::move(x.m_clusterParams);
    m_nodeParams = std::move(x.m_nodeParams);
    m_bufferConfigs = std::move(x.m_bufferConfigs);
}

ib::sim::fr::idl::ControllerConfig& ib::sim::fr::idl::ControllerConfig::operator=(const ControllerConfig &x)
{

    m_senderAddr = x.m_senderAddr;
    m_clusterParams = x.m_clusterParams;
    m_nodeParams = x.m_nodeParams;
    m_bufferConfigs = x.m_bufferConfigs;

    return *this;
}

ib::sim::fr::idl::ControllerConfig& ib::sim::fr::idl::ControllerConfig::operator=(ControllerConfig &&x)
{

    m_senderAddr = std::move(x.m_senderAddr);
    m_clusterParams = std::move(x.m_clusterParams);
    m_nodeParams = std::move(x.m_nodeParams);
    m_bufferConfigs = std::move(x.m_bufferConfigs);

    return *this;
}

size_t ib::sim::fr::idl::ControllerConfig::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_alignment);
    current_alignment += ib::sim::fr::idl::ClusterParameters::getMaxCdrSerializedSize(current_alignment);
    current_alignment += ib::sim::fr::idl::NodeParameters::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < 0; ++a)
    {
        current_alignment += ib::sim::fr::idl::TxBufferConfig::getMaxCdrSerializedSize(current_alignment);}


    return current_alignment - initial_alignment;
}

size_t ib::sim::fr::idl::ControllerConfig::getCdrSerializedSize(const ib::sim::fr::idl::ControllerConfig& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getCdrSerializedSize(data.senderAddr(), current_alignment);
    current_alignment += ib::sim::fr::idl::ClusterParameters::getCdrSerializedSize(data.clusterParams(), current_alignment);
    current_alignment += ib::sim::fr::idl::NodeParameters::getCdrSerializedSize(data.nodeParams(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    for(size_t a = 0; a < data.bufferConfigs().size(); ++a)
    {
        current_alignment += ib::sim::fr::idl::TxBufferConfig::getCdrSerializedSize(data.bufferConfigs().at(a), current_alignment);}


    return current_alignment - initial_alignment;
}

void ib::sim::fr::idl::ControllerConfig::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_senderAddr;
    scdr << m_clusterParams;
    scdr << m_nodeParams;
    scdr << m_bufferConfigs;
}

void ib::sim::fr::idl::ControllerConfig::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_senderAddr;
    dcdr >> m_clusterParams;
    dcdr >> m_nodeParams;
    dcdr >> m_bufferConfigs;
}

/*!
 * @brief This function copies the value in member senderAddr
 * @param _senderAddr New value to be copied in member senderAddr
 */
void ib::sim::fr::idl::ControllerConfig::senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
{
m_senderAddr = _senderAddr;
}

/*!
 * @brief This function moves the value in member senderAddr
 * @param _senderAddr New value to be moved in member senderAddr
 */
void ib::sim::fr::idl::ControllerConfig::senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
{
m_senderAddr = std::move(_senderAddr);
}

/*!
 * @brief This function returns a constant reference to member senderAddr
 * @return Constant reference to member senderAddr
 */
const ib::mw::idl::EndpointAddress& ib::sim::fr::idl::ControllerConfig::senderAddr() const
{
    return m_senderAddr;
}

/*!
 * @brief This function returns a reference to member senderAddr
 * @return Reference to member senderAddr
 */
ib::mw::idl::EndpointAddress& ib::sim::fr::idl::ControllerConfig::senderAddr()
{
    return m_senderAddr;
}
/*!
 * @brief This function copies the value in member clusterParams
 * @param _clusterParams New value to be copied in member clusterParams
 */
void ib::sim::fr::idl::ControllerConfig::clusterParams(const ib::sim::fr::idl::ClusterParameters &_clusterParams)
{
m_clusterParams = _clusterParams;
}

/*!
 * @brief This function moves the value in member clusterParams
 * @param _clusterParams New value to be moved in member clusterParams
 */
void ib::sim::fr::idl::ControllerConfig::clusterParams(ib::sim::fr::idl::ClusterParameters &&_clusterParams)
{
m_clusterParams = std::move(_clusterParams);
}

/*!
 * @brief This function returns a constant reference to member clusterParams
 * @return Constant reference to member clusterParams
 */
const ib::sim::fr::idl::ClusterParameters& ib::sim::fr::idl::ControllerConfig::clusterParams() const
{
    return m_clusterParams;
}

/*!
 * @brief This function returns a reference to member clusterParams
 * @return Reference to member clusterParams
 */
ib::sim::fr::idl::ClusterParameters& ib::sim::fr::idl::ControllerConfig::clusterParams()
{
    return m_clusterParams;
}
/*!
 * @brief This function copies the value in member nodeParams
 * @param _nodeParams New value to be copied in member nodeParams
 */
void ib::sim::fr::idl::ControllerConfig::nodeParams(const ib::sim::fr::idl::NodeParameters &_nodeParams)
{
m_nodeParams = _nodeParams;
}

/*!
 * @brief This function moves the value in member nodeParams
 * @param _nodeParams New value to be moved in member nodeParams
 */
void ib::sim::fr::idl::ControllerConfig::nodeParams(ib::sim::fr::idl::NodeParameters &&_nodeParams)
{
m_nodeParams = std::move(_nodeParams);
}

/*!
 * @brief This function returns a constant reference to member nodeParams
 * @return Constant reference to member nodeParams
 */
const ib::sim::fr::idl::NodeParameters& ib::sim::fr::idl::ControllerConfig::nodeParams() const
{
    return m_nodeParams;
}

/*!
 * @brief This function returns a reference to member nodeParams
 * @return Reference to member nodeParams
 */
ib::sim::fr::idl::NodeParameters& ib::sim::fr::idl::ControllerConfig::nodeParams()
{
    return m_nodeParams;
}
/*!
 * @brief This function copies the value in member bufferConfigs
 * @param _bufferConfigs New value to be copied in member bufferConfigs
 */
void ib::sim::fr::idl::ControllerConfig::bufferConfigs(const std::vector<ib::sim::fr::idl::TxBufferConfig> &_bufferConfigs)
{
m_bufferConfigs = _bufferConfigs;
}

/*!
 * @brief This function moves the value in member bufferConfigs
 * @param _bufferConfigs New value to be moved in member bufferConfigs
 */
void ib::sim::fr::idl::ControllerConfig::bufferConfigs(std::vector<ib::sim::fr::idl::TxBufferConfig> &&_bufferConfigs)
{
m_bufferConfigs = std::move(_bufferConfigs);
}

/*!
 * @brief This function returns a constant reference to member bufferConfigs
 * @return Constant reference to member bufferConfigs
 */
const std::vector<ib::sim::fr::idl::TxBufferConfig>& ib::sim::fr::idl::ControllerConfig::bufferConfigs() const
{
    return m_bufferConfigs;
}

/*!
 * @brief This function returns a reference to member bufferConfigs
 * @return Reference to member bufferConfigs
 */
std::vector<ib::sim::fr::idl::TxBufferConfig>& ib::sim::fr::idl::ControllerConfig::bufferConfigs()
{
    return m_bufferConfigs;
}

size_t ib::sim::fr::idl::ControllerConfig::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;


     current_align += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_align); 




    return current_align;
}

bool ib::sim::fr::idl::ControllerConfig::isKeyDefined()
{
   return true;
}

void ib::sim::fr::idl::ControllerConfig::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 scdr << m_senderAddr;  
	 
	 
	 
}

ib::sim::fr::idl::TxBufferConfigUpdate::TxBufferConfigUpdate()
{

    m_txBufferIndex = 0;


}

ib::sim::fr::idl::TxBufferConfigUpdate::~TxBufferConfigUpdate()
{



}

ib::sim::fr::idl::TxBufferConfigUpdate::TxBufferConfigUpdate(const TxBufferConfigUpdate &x)
{
    m_senderAddr = x.m_senderAddr;
    m_txBufferIndex = x.m_txBufferIndex;
    m_txBufferConfig = x.m_txBufferConfig;
}

ib::sim::fr::idl::TxBufferConfigUpdate::TxBufferConfigUpdate(TxBufferConfigUpdate &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_txBufferIndex = x.m_txBufferIndex;
    m_txBufferConfig = std::move(x.m_txBufferConfig);
}

ib::sim::fr::idl::TxBufferConfigUpdate& ib::sim::fr::idl::TxBufferConfigUpdate::operator=(const TxBufferConfigUpdate &x)
{

    m_senderAddr = x.m_senderAddr;
    m_txBufferIndex = x.m_txBufferIndex;
    m_txBufferConfig = x.m_txBufferConfig;

    return *this;
}

ib::sim::fr::idl::TxBufferConfigUpdate& ib::sim::fr::idl::TxBufferConfigUpdate::operator=(TxBufferConfigUpdate &&x)
{

    m_senderAddr = std::move(x.m_senderAddr);
    m_txBufferIndex = x.m_txBufferIndex;
    m_txBufferConfig = std::move(x.m_txBufferConfig);

    return *this;
}

size_t ib::sim::fr::idl::TxBufferConfigUpdate::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += ib::sim::fr::idl::TxBufferConfig::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t ib::sim::fr::idl::TxBufferConfigUpdate::getCdrSerializedSize(const ib::sim::fr::idl::TxBufferConfigUpdate& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getCdrSerializedSize(data.senderAddr(), current_alignment);
    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += ib::sim::fr::idl::TxBufferConfig::getCdrSerializedSize(data.txBufferConfig(), current_alignment);

    return current_alignment - initial_alignment;
}

void ib::sim::fr::idl::TxBufferConfigUpdate::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_senderAddr;
    scdr << m_txBufferIndex;
    scdr << m_txBufferConfig;
}

void ib::sim::fr::idl::TxBufferConfigUpdate::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_senderAddr;
    dcdr >> m_txBufferIndex;
    dcdr >> m_txBufferConfig;
}

/*!
 * @brief This function copies the value in member senderAddr
 * @param _senderAddr New value to be copied in member senderAddr
 */
void ib::sim::fr::idl::TxBufferConfigUpdate::senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
{
m_senderAddr = _senderAddr;
}

/*!
 * @brief This function moves the value in member senderAddr
 * @param _senderAddr New value to be moved in member senderAddr
 */
void ib::sim::fr::idl::TxBufferConfigUpdate::senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
{
m_senderAddr = std::move(_senderAddr);
}

/*!
 * @brief This function returns a constant reference to member senderAddr
 * @return Constant reference to member senderAddr
 */
const ib::mw::idl::EndpointAddress& ib::sim::fr::idl::TxBufferConfigUpdate::senderAddr() const
{
    return m_senderAddr;
}

/*!
 * @brief This function returns a reference to member senderAddr
 * @return Reference to member senderAddr
 */
ib::mw::idl::EndpointAddress& ib::sim::fr::idl::TxBufferConfigUpdate::senderAddr()
{
    return m_senderAddr;
}
/*!
 * @brief This function sets a value in member txBufferIndex
 * @param _txBufferIndex New value for member txBufferIndex
 */
void ib::sim::fr::idl::TxBufferConfigUpdate::txBufferIndex(uint16_t _txBufferIndex)
{
m_txBufferIndex = _txBufferIndex;
}

/*!
 * @brief This function returns the value of member txBufferIndex
 * @return Value of member txBufferIndex
 */
uint16_t ib::sim::fr::idl::TxBufferConfigUpdate::txBufferIndex() const
{
    return m_txBufferIndex;
}

/*!
 * @brief This function returns a reference to member txBufferIndex
 * @return Reference to member txBufferIndex
 */
uint16_t& ib::sim::fr::idl::TxBufferConfigUpdate::txBufferIndex()
{
    return m_txBufferIndex;
}
/*!
 * @brief This function copies the value in member txBufferConfig
 * @param _txBufferConfig New value to be copied in member txBufferConfig
 */
void ib::sim::fr::idl::TxBufferConfigUpdate::txBufferConfig(const ib::sim::fr::idl::TxBufferConfig &_txBufferConfig)
{
m_txBufferConfig = _txBufferConfig;
}

/*!
 * @brief This function moves the value in member txBufferConfig
 * @param _txBufferConfig New value to be moved in member txBufferConfig
 */
void ib::sim::fr::idl::TxBufferConfigUpdate::txBufferConfig(ib::sim::fr::idl::TxBufferConfig &&_txBufferConfig)
{
m_txBufferConfig = std::move(_txBufferConfig);
}

/*!
 * @brief This function returns a constant reference to member txBufferConfig
 * @return Constant reference to member txBufferConfig
 */
const ib::sim::fr::idl::TxBufferConfig& ib::sim::fr::idl::TxBufferConfigUpdate::txBufferConfig() const
{
    return m_txBufferConfig;
}

/*!
 * @brief This function returns a reference to member txBufferConfig
 * @return Reference to member txBufferConfig
 */
ib::sim::fr::idl::TxBufferConfig& ib::sim::fr::idl::TxBufferConfigUpdate::txBufferConfig()
{
    return m_txBufferConfig;
}

size_t ib::sim::fr::idl::TxBufferConfigUpdate::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;


     current_align += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_align); 



    return current_align;
}

bool ib::sim::fr::idl::TxBufferConfigUpdate::isKeyDefined()
{
   return true;
}

void ib::sim::fr::idl::TxBufferConfigUpdate::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 scdr << m_senderAddr;  
	 
	 
}

ib::sim::fr::idl::TxBufferUpdate::TxBufferUpdate()
{

    m_txBufferIndex = 0;
    m_payloadDataValid = false;


}

ib::sim::fr::idl::TxBufferUpdate::~TxBufferUpdate()
{




}

ib::sim::fr::idl::TxBufferUpdate::TxBufferUpdate(const TxBufferUpdate &x)
{
    m_senderAddr = x.m_senderAddr;
    m_txBufferIndex = x.m_txBufferIndex;
    m_payloadDataValid = x.m_payloadDataValid;
    m_payload = x.m_payload;
}

ib::sim::fr::idl::TxBufferUpdate::TxBufferUpdate(TxBufferUpdate &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_txBufferIndex = x.m_txBufferIndex;
    m_payloadDataValid = x.m_payloadDataValid;
    m_payload = std::move(x.m_payload);
}

ib::sim::fr::idl::TxBufferUpdate& ib::sim::fr::idl::TxBufferUpdate::operator=(const TxBufferUpdate &x)
{

    m_senderAddr = x.m_senderAddr;
    m_txBufferIndex = x.m_txBufferIndex;
    m_payloadDataValid = x.m_payloadDataValid;
    m_payload = x.m_payload;

    return *this;
}

ib::sim::fr::idl::TxBufferUpdate& ib::sim::fr::idl::TxBufferUpdate::operator=(TxBufferUpdate &&x)
{

    m_senderAddr = std::move(x.m_senderAddr);
    m_txBufferIndex = x.m_txBufferIndex;
    m_payloadDataValid = x.m_payloadDataValid;
    m_payload = std::move(x.m_payload);

    return *this;
}

size_t ib::sim::fr::idl::TxBufferUpdate::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (0 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);




    return current_alignment - initial_alignment;
}

size_t ib::sim::fr::idl::TxBufferUpdate::getCdrSerializedSize(const ib::sim::fr::idl::TxBufferUpdate& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getCdrSerializedSize(data.senderAddr(), current_alignment);
    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (data.payload().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);




    return current_alignment - initial_alignment;
}

void ib::sim::fr::idl::TxBufferUpdate::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_senderAddr;
    scdr << m_txBufferIndex;
    scdr << m_payloadDataValid;
    scdr << m_payload;
}

void ib::sim::fr::idl::TxBufferUpdate::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_senderAddr;
    dcdr >> m_txBufferIndex;
    dcdr >> m_payloadDataValid;
    dcdr >> m_payload;
}

/*!
 * @brief This function copies the value in member senderAddr
 * @param _senderAddr New value to be copied in member senderAddr
 */
void ib::sim::fr::idl::TxBufferUpdate::senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
{
m_senderAddr = _senderAddr;
}

/*!
 * @brief This function moves the value in member senderAddr
 * @param _senderAddr New value to be moved in member senderAddr
 */
void ib::sim::fr::idl::TxBufferUpdate::senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
{
m_senderAddr = std::move(_senderAddr);
}

/*!
 * @brief This function returns a constant reference to member senderAddr
 * @return Constant reference to member senderAddr
 */
const ib::mw::idl::EndpointAddress& ib::sim::fr::idl::TxBufferUpdate::senderAddr() const
{
    return m_senderAddr;
}

/*!
 * @brief This function returns a reference to member senderAddr
 * @return Reference to member senderAddr
 */
ib::mw::idl::EndpointAddress& ib::sim::fr::idl::TxBufferUpdate::senderAddr()
{
    return m_senderAddr;
}
/*!
 * @brief This function sets a value in member txBufferIndex
 * @param _txBufferIndex New value for member txBufferIndex
 */
void ib::sim::fr::idl::TxBufferUpdate::txBufferIndex(uint16_t _txBufferIndex)
{
m_txBufferIndex = _txBufferIndex;
}

/*!
 * @brief This function returns the value of member txBufferIndex
 * @return Value of member txBufferIndex
 */
uint16_t ib::sim::fr::idl::TxBufferUpdate::txBufferIndex() const
{
    return m_txBufferIndex;
}

/*!
 * @brief This function returns a reference to member txBufferIndex
 * @return Reference to member txBufferIndex
 */
uint16_t& ib::sim::fr::idl::TxBufferUpdate::txBufferIndex()
{
    return m_txBufferIndex;
}
/*!
 * @brief This function sets a value in member payloadDataValid
 * @param _payloadDataValid New value for member payloadDataValid
 */
void ib::sim::fr::idl::TxBufferUpdate::payloadDataValid(bool _payloadDataValid)
{
m_payloadDataValid = _payloadDataValid;
}

/*!
 * @brief This function returns the value of member payloadDataValid
 * @return Value of member payloadDataValid
 */
bool ib::sim::fr::idl::TxBufferUpdate::payloadDataValid() const
{
    return m_payloadDataValid;
}

/*!
 * @brief This function returns a reference to member payloadDataValid
 * @return Reference to member payloadDataValid
 */
bool& ib::sim::fr::idl::TxBufferUpdate::payloadDataValid()
{
    return m_payloadDataValid;
}
/*!
 * @brief This function copies the value in member payload
 * @param _payload New value to be copied in member payload
 */
void ib::sim::fr::idl::TxBufferUpdate::payload(const std::vector<uint8_t> &_payload)
{
m_payload = _payload;
}

/*!
 * @brief This function moves the value in member payload
 * @param _payload New value to be moved in member payload
 */
void ib::sim::fr::idl::TxBufferUpdate::payload(std::vector<uint8_t> &&_payload)
{
m_payload = std::move(_payload);
}

/*!
 * @brief This function returns a constant reference to member payload
 * @return Constant reference to member payload
 */
const std::vector<uint8_t>& ib::sim::fr::idl::TxBufferUpdate::payload() const
{
    return m_payload;
}

/*!
 * @brief This function returns a reference to member payload
 * @return Reference to member payload
 */
std::vector<uint8_t>& ib::sim::fr::idl::TxBufferUpdate::payload()
{
    return m_payload;
}

size_t ib::sim::fr::idl::TxBufferUpdate::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;


     current_align += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_align); 




    return current_align;
}

bool ib::sim::fr::idl::TxBufferUpdate::isKeyDefined()
{
   return true;
}

void ib::sim::fr::idl::TxBufferUpdate::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 scdr << m_senderAddr;  
	 
	 
	 
}


ib::sim::fr::idl::HostCommand::HostCommand()
{

    m_command = ib::sim::fr::idl::RUN;

}

ib::sim::fr::idl::HostCommand::~HostCommand()
{


}

ib::sim::fr::idl::HostCommand::HostCommand(const HostCommand &x)
{
    m_senderAddr = x.m_senderAddr;
    m_command = x.m_command;
}

ib::sim::fr::idl::HostCommand::HostCommand(HostCommand &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_command = x.m_command;
}

ib::sim::fr::idl::HostCommand& ib::sim::fr::idl::HostCommand::operator=(const HostCommand &x)
{

    m_senderAddr = x.m_senderAddr;
    m_command = x.m_command;

    return *this;
}

ib::sim::fr::idl::HostCommand& ib::sim::fr::idl::HostCommand::operator=(HostCommand &&x)
{

    m_senderAddr = std::move(x.m_senderAddr);
    m_command = x.m_command;

    return *this;
}

size_t ib::sim::fr::idl::HostCommand::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t ib::sim::fr::idl::HostCommand::getCdrSerializedSize(const ib::sim::fr::idl::HostCommand& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getCdrSerializedSize(data.senderAddr(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void ib::sim::fr::idl::HostCommand::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_senderAddr;
    scdr << (uint32_t)m_command;
}

void ib::sim::fr::idl::HostCommand::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_senderAddr;
    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_command = (ib::sim::fr::idl::ChiCommand)enum_value;
    }

}

/*!
 * @brief This function copies the value in member senderAddr
 * @param _senderAddr New value to be copied in member senderAddr
 */
void ib::sim::fr::idl::HostCommand::senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
{
m_senderAddr = _senderAddr;
}

/*!
 * @brief This function moves the value in member senderAddr
 * @param _senderAddr New value to be moved in member senderAddr
 */
void ib::sim::fr::idl::HostCommand::senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
{
m_senderAddr = std::move(_senderAddr);
}

/*!
 * @brief This function returns a constant reference to member senderAddr
 * @return Constant reference to member senderAddr
 */
const ib::mw::idl::EndpointAddress& ib::sim::fr::idl::HostCommand::senderAddr() const
{
    return m_senderAddr;
}

/*!
 * @brief This function returns a reference to member senderAddr
 * @return Reference to member senderAddr
 */
ib::mw::idl::EndpointAddress& ib::sim::fr::idl::HostCommand::senderAddr()
{
    return m_senderAddr;
}
/*!
 * @brief This function sets a value in member command
 * @param _command New value for member command
 */
void ib::sim::fr::idl::HostCommand::command(ib::sim::fr::idl::ChiCommand _command)
{
m_command = _command;
}

/*!
 * @brief This function returns the value of member command
 * @return Value of member command
 */
ib::sim::fr::idl::ChiCommand ib::sim::fr::idl::HostCommand::command() const
{
    return m_command;
}

/*!
 * @brief This function returns a reference to member command
 * @return Reference to member command
 */
ib::sim::fr::idl::ChiCommand& ib::sim::fr::idl::HostCommand::command()
{
    return m_command;
}

size_t ib::sim::fr::idl::HostCommand::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;


     current_align += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_align); 


    return current_align;
}

bool ib::sim::fr::idl::HostCommand::isKeyDefined()
{
   return true;
}

void ib::sim::fr::idl::HostCommand::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 scdr << m_senderAddr;  
	 
}

ib::sim::fr::idl::Header::Header()
{
    m_flags = 0;
    m_frameId = 0;
    m_payloadLength = 0;
    m_headerCrc = 0;
    m_cycleCount = 0;

}

ib::sim::fr::idl::Header::~Header()
{





}

ib::sim::fr::idl::Header::Header(const Header &x)
{
    m_flags = x.m_flags;
    m_frameId = x.m_frameId;
    m_payloadLength = x.m_payloadLength;
    m_headerCrc = x.m_headerCrc;
    m_cycleCount = x.m_cycleCount;
}

ib::sim::fr::idl::Header::Header(Header &&x)
{
    m_flags = x.m_flags;
    m_frameId = x.m_frameId;
    m_payloadLength = x.m_payloadLength;
    m_headerCrc = x.m_headerCrc;
    m_cycleCount = x.m_cycleCount;
}

ib::sim::fr::idl::Header& ib::sim::fr::idl::Header::operator=(const Header &x)
{

    m_flags = x.m_flags;
    m_frameId = x.m_frameId;
    m_payloadLength = x.m_payloadLength;
    m_headerCrc = x.m_headerCrc;
    m_cycleCount = x.m_cycleCount;

    return *this;
}

ib::sim::fr::idl::Header& ib::sim::fr::idl::Header::operator=(Header &&x)
{

    m_flags = x.m_flags;
    m_frameId = x.m_frameId;
    m_payloadLength = x.m_payloadLength;
    m_headerCrc = x.m_headerCrc;
    m_cycleCount = x.m_cycleCount;

    return *this;
}

size_t ib::sim::fr::idl::Header::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t ib::sim::fr::idl::Header::getCdrSerializedSize(const ib::sim::fr::idl::Header& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void ib::sim::fr::idl::Header::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_flags;
    scdr << m_frameId;
    scdr << m_payloadLength;
    scdr << m_headerCrc;
    scdr << m_cycleCount;
}

void ib::sim::fr::idl::Header::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_flags;
    dcdr >> m_frameId;
    dcdr >> m_payloadLength;
    dcdr >> m_headerCrc;
    dcdr >> m_cycleCount;
}

/*!
 * @brief This function sets a value in member flags
 * @param _flags New value for member flags
 */
void ib::sim::fr::idl::Header::flags(uint8_t _flags)
{
m_flags = _flags;
}

/*!
 * @brief This function returns the value of member flags
 * @return Value of member flags
 */
uint8_t ib::sim::fr::idl::Header::flags() const
{
    return m_flags;
}

/*!
 * @brief This function returns a reference to member flags
 * @return Reference to member flags
 */
uint8_t& ib::sim::fr::idl::Header::flags()
{
    return m_flags;
}
/*!
 * @brief This function sets a value in member frameId
 * @param _frameId New value for member frameId
 */
void ib::sim::fr::idl::Header::frameId(uint16_t _frameId)
{
m_frameId = _frameId;
}

/*!
 * @brief This function returns the value of member frameId
 * @return Value of member frameId
 */
uint16_t ib::sim::fr::idl::Header::frameId() const
{
    return m_frameId;
}

/*!
 * @brief This function returns a reference to member frameId
 * @return Reference to member frameId
 */
uint16_t& ib::sim::fr::idl::Header::frameId()
{
    return m_frameId;
}
/*!
 * @brief This function sets a value in member payloadLength
 * @param _payloadLength New value for member payloadLength
 */
void ib::sim::fr::idl::Header::payloadLength(uint8_t _payloadLength)
{
m_payloadLength = _payloadLength;
}

/*!
 * @brief This function returns the value of member payloadLength
 * @return Value of member payloadLength
 */
uint8_t ib::sim::fr::idl::Header::payloadLength() const
{
    return m_payloadLength;
}

/*!
 * @brief This function returns a reference to member payloadLength
 * @return Reference to member payloadLength
 */
uint8_t& ib::sim::fr::idl::Header::payloadLength()
{
    return m_payloadLength;
}
/*!
 * @brief This function sets a value in member headerCrc
 * @param _headerCrc New value for member headerCrc
 */
void ib::sim::fr::idl::Header::headerCrc(uint16_t _headerCrc)
{
m_headerCrc = _headerCrc;
}

/*!
 * @brief This function returns the value of member headerCrc
 * @return Value of member headerCrc
 */
uint16_t ib::sim::fr::idl::Header::headerCrc() const
{
    return m_headerCrc;
}

/*!
 * @brief This function returns a reference to member headerCrc
 * @return Reference to member headerCrc
 */
uint16_t& ib::sim::fr::idl::Header::headerCrc()
{
    return m_headerCrc;
}
/*!
 * @brief This function sets a value in member cycleCount
 * @param _cycleCount New value for member cycleCount
 */
void ib::sim::fr::idl::Header::cycleCount(uint8_t _cycleCount)
{
m_cycleCount = _cycleCount;
}

/*!
 * @brief This function returns the value of member cycleCount
 * @return Value of member cycleCount
 */
uint8_t ib::sim::fr::idl::Header::cycleCount() const
{
    return m_cycleCount;
}

/*!
 * @brief This function returns a reference to member cycleCount
 * @return Reference to member cycleCount
 */
uint8_t& ib::sim::fr::idl::Header::cycleCount()
{
    return m_cycleCount;
}

size_t ib::sim::fr::idl::Header::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;








    return current_align;
}

bool ib::sim::fr::idl::Header::isKeyDefined()
{
   return false;
}

void ib::sim::fr::idl::Header::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
	 
	 
	 
}

ib::sim::fr::idl::Frame::Frame()
{



}

ib::sim::fr::idl::Frame::~Frame()
{


}

ib::sim::fr::idl::Frame::Frame(const Frame &x)
{
    m_header = x.m_header;
    m_payload = x.m_payload;
}

ib::sim::fr::idl::Frame::Frame(Frame &&x)
{
    m_header = std::move(x.m_header);
    m_payload = std::move(x.m_payload);
}

ib::sim::fr::idl::Frame& ib::sim::fr::idl::Frame::operator=(const Frame &x)
{

    m_header = x.m_header;
    m_payload = x.m_payload;

    return *this;
}

ib::sim::fr::idl::Frame& ib::sim::fr::idl::Frame::operator=(Frame &&x)
{

    m_header = std::move(x.m_header);
    m_payload = std::move(x.m_payload);

    return *this;
}

size_t ib::sim::fr::idl::Frame::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += ib::sim::fr::idl::Header::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (254 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);




    return current_alignment - initial_alignment;
}

size_t ib::sim::fr::idl::Frame::getCdrSerializedSize(const ib::sim::fr::idl::Frame& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += ib::sim::fr::idl::Header::getCdrSerializedSize(data.header(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);

    current_alignment += (data.payload().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);




    return current_alignment - initial_alignment;
}

void ib::sim::fr::idl::Frame::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_header;
    scdr << m_payload;
}

void ib::sim::fr::idl::Frame::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_header;
    dcdr >> m_payload;
}

/*!
 * @brief This function copies the value in member header
 * @param _header New value to be copied in member header
 */
void ib::sim::fr::idl::Frame::header(const ib::sim::fr::idl::Header &_header)
{
m_header = _header;
}

/*!
 * @brief This function moves the value in member header
 * @param _header New value to be moved in member header
 */
void ib::sim::fr::idl::Frame::header(ib::sim::fr::idl::Header &&_header)
{
m_header = std::move(_header);
}

/*!
 * @brief This function returns a constant reference to member header
 * @return Constant reference to member header
 */
const ib::sim::fr::idl::Header& ib::sim::fr::idl::Frame::header() const
{
    return m_header;
}

/*!
 * @brief This function returns a reference to member header
 * @return Reference to member header
 */
ib::sim::fr::idl::Header& ib::sim::fr::idl::Frame::header()
{
    return m_header;
}
/*!
 * @brief This function copies the value in member payload
 * @param _payload New value to be copied in member payload
 */
void ib::sim::fr::idl::Frame::payload(const std::vector<uint8_t> &_payload)
{
m_payload = _payload;
}

/*!
 * @brief This function moves the value in member payload
 * @param _payload New value to be moved in member payload
 */
void ib::sim::fr::idl::Frame::payload(std::vector<uint8_t> &&_payload)
{
m_payload = std::move(_payload);
}

/*!
 * @brief This function returns a constant reference to member payload
 * @return Constant reference to member payload
 */
const std::vector<uint8_t>& ib::sim::fr::idl::Frame::payload() const
{
    return m_payload;
}

/*!
 * @brief This function returns a reference to member payload
 * @return Reference to member payload
 */
std::vector<uint8_t>& ib::sim::fr::idl::Frame::payload()
{
    return m_payload;
}

size_t ib::sim::fr::idl::Frame::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;





    return current_align;
}

bool ib::sim::fr::idl::Frame::isKeyDefined()
{
   return false;
}

void ib::sim::fr::idl::Frame::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
}

ib::sim::fr::idl::FrMessage::FrMessage()
{

    m_timeNs = 0;
    m_channel = ib::sim::fr::idl::None;


}

ib::sim::fr::idl::FrMessage::~FrMessage()
{




}

ib::sim::fr::idl::FrMessage::FrMessage(const FrMessage &x)
{
    m_senderAddr = x.m_senderAddr;
    m_timeNs = x.m_timeNs;
    m_channel = x.m_channel;
    m_frame = x.m_frame;
}

ib::sim::fr::idl::FrMessage::FrMessage(FrMessage &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_timeNs = x.m_timeNs;
    m_channel = x.m_channel;
    m_frame = std::move(x.m_frame);
}

ib::sim::fr::idl::FrMessage& ib::sim::fr::idl::FrMessage::operator=(const FrMessage &x)
{

    m_senderAddr = x.m_senderAddr;
    m_timeNs = x.m_timeNs;
    m_channel = x.m_channel;
    m_frame = x.m_frame;

    return *this;
}

ib::sim::fr::idl::FrMessage& ib::sim::fr::idl::FrMessage::operator=(FrMessage &&x)
{

    m_senderAddr = std::move(x.m_senderAddr);
    m_timeNs = x.m_timeNs;
    m_channel = x.m_channel;
    m_frame = std::move(x.m_frame);

    return *this;
}

size_t ib::sim::fr::idl::FrMessage::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ib::sim::fr::idl::Frame::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t ib::sim::fr::idl::FrMessage::getCdrSerializedSize(const ib::sim::fr::idl::FrMessage& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getCdrSerializedSize(data.senderAddr(), current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ib::sim::fr::idl::Frame::getCdrSerializedSize(data.frame(), current_alignment);

    return current_alignment - initial_alignment;
}

void ib::sim::fr::idl::FrMessage::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_senderAddr;
    scdr << m_timeNs;
    scdr << (uint32_t)m_channel;
    scdr << m_frame;
}

void ib::sim::fr::idl::FrMessage::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_senderAddr;
    dcdr >> m_timeNs;
    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_channel = (ib::sim::fr::idl::Channel)enum_value;
    }

    dcdr >> m_frame;
}

/*!
 * @brief This function copies the value in member senderAddr
 * @param _senderAddr New value to be copied in member senderAddr
 */
void ib::sim::fr::idl::FrMessage::senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
{
m_senderAddr = _senderAddr;
}

/*!
 * @brief This function moves the value in member senderAddr
 * @param _senderAddr New value to be moved in member senderAddr
 */
void ib::sim::fr::idl::FrMessage::senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
{
m_senderAddr = std::move(_senderAddr);
}

/*!
 * @brief This function returns a constant reference to member senderAddr
 * @return Constant reference to member senderAddr
 */
const ib::mw::idl::EndpointAddress& ib::sim::fr::idl::FrMessage::senderAddr() const
{
    return m_senderAddr;
}

/*!
 * @brief This function returns a reference to member senderAddr
 * @return Reference to member senderAddr
 */
ib::mw::idl::EndpointAddress& ib::sim::fr::idl::FrMessage::senderAddr()
{
    return m_senderAddr;
}
/*!
 * @brief This function sets a value in member timeNs
 * @param _timeNs New value for member timeNs
 */
void ib::sim::fr::idl::FrMessage::timeNs(int64_t _timeNs)
{
m_timeNs = _timeNs;
}

/*!
 * @brief This function returns the value of member timeNs
 * @return Value of member timeNs
 */
int64_t ib::sim::fr::idl::FrMessage::timeNs() const
{
    return m_timeNs;
}

/*!
 * @brief This function returns a reference to member timeNs
 * @return Reference to member timeNs
 */
int64_t& ib::sim::fr::idl::FrMessage::timeNs()
{
    return m_timeNs;
}
/*!
 * @brief This function sets a value in member channel
 * @param _channel New value for member channel
 */
void ib::sim::fr::idl::FrMessage::channel(ib::sim::fr::idl::Channel _channel)
{
m_channel = _channel;
}

/*!
 * @brief This function returns the value of member channel
 * @return Value of member channel
 */
ib::sim::fr::idl::Channel ib::sim::fr::idl::FrMessage::channel() const
{
    return m_channel;
}

/*!
 * @brief This function returns a reference to member channel
 * @return Reference to member channel
 */
ib::sim::fr::idl::Channel& ib::sim::fr::idl::FrMessage::channel()
{
    return m_channel;
}
/*!
 * @brief This function copies the value in member frame
 * @param _frame New value to be copied in member frame
 */
void ib::sim::fr::idl::FrMessage::frame(const ib::sim::fr::idl::Frame &_frame)
{
m_frame = _frame;
}

/*!
 * @brief This function moves the value in member frame
 * @param _frame New value to be moved in member frame
 */
void ib::sim::fr::idl::FrMessage::frame(ib::sim::fr::idl::Frame &&_frame)
{
m_frame = std::move(_frame);
}

/*!
 * @brief This function returns a constant reference to member frame
 * @return Constant reference to member frame
 */
const ib::sim::fr::idl::Frame& ib::sim::fr::idl::FrMessage::frame() const
{
    return m_frame;
}

/*!
 * @brief This function returns a reference to member frame
 * @return Reference to member frame
 */
ib::sim::fr::idl::Frame& ib::sim::fr::idl::FrMessage::frame()
{
    return m_frame;
}

size_t ib::sim::fr::idl::FrMessage::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;


     current_align += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_align); 




    return current_align;
}

bool ib::sim::fr::idl::FrMessage::isKeyDefined()
{
   return true;
}

void ib::sim::fr::idl::FrMessage::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 scdr << m_senderAddr;  
	 
	 
	 
}

ib::sim::fr::idl::FrMessageAck::FrMessageAck()
{

    m_timeNs = 0;
    m_txBufferIndex = 0;
    m_channel = ib::sim::fr::idl::None;


}

ib::sim::fr::idl::FrMessageAck::~FrMessageAck()
{





}

ib::sim::fr::idl::FrMessageAck::FrMessageAck(const FrMessageAck &x)
{
    m_senderAddr = x.m_senderAddr;
    m_timeNs = x.m_timeNs;
    m_txBufferIndex = x.m_txBufferIndex;
    m_channel = x.m_channel;
    m_frame = x.m_frame;
}

ib::sim::fr::idl::FrMessageAck::FrMessageAck(FrMessageAck &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_timeNs = x.m_timeNs;
    m_txBufferIndex = x.m_txBufferIndex;
    m_channel = x.m_channel;
    m_frame = std::move(x.m_frame);
}

ib::sim::fr::idl::FrMessageAck& ib::sim::fr::idl::FrMessageAck::operator=(const FrMessageAck &x)
{

    m_senderAddr = x.m_senderAddr;
    m_timeNs = x.m_timeNs;
    m_txBufferIndex = x.m_txBufferIndex;
    m_channel = x.m_channel;
    m_frame = x.m_frame;

    return *this;
}

ib::sim::fr::idl::FrMessageAck& ib::sim::fr::idl::FrMessageAck::operator=(FrMessageAck &&x)
{

    m_senderAddr = std::move(x.m_senderAddr);
    m_timeNs = x.m_timeNs;
    m_txBufferIndex = x.m_txBufferIndex;
    m_channel = x.m_channel;
    m_frame = std::move(x.m_frame);

    return *this;
}

size_t ib::sim::fr::idl::FrMessageAck::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ib::sim::fr::idl::Frame::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t ib::sim::fr::idl::FrMessageAck::getCdrSerializedSize(const ib::sim::fr::idl::FrMessageAck& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getCdrSerializedSize(data.senderAddr(), current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 2 + eprosima::fastcdr::Cdr::alignment(current_alignment, 2);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += ib::sim::fr::idl::Frame::getCdrSerializedSize(data.frame(), current_alignment);

    return current_alignment - initial_alignment;
}

void ib::sim::fr::idl::FrMessageAck::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_senderAddr;
    scdr << m_timeNs;
    scdr << m_txBufferIndex;
    scdr << (uint32_t)m_channel;
    scdr << m_frame;
}

void ib::sim::fr::idl::FrMessageAck::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_senderAddr;
    dcdr >> m_timeNs;
    dcdr >> m_txBufferIndex;
    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_channel = (ib::sim::fr::idl::Channel)enum_value;
    }

    dcdr >> m_frame;
}

/*!
 * @brief This function copies the value in member senderAddr
 * @param _senderAddr New value to be copied in member senderAddr
 */
void ib::sim::fr::idl::FrMessageAck::senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
{
m_senderAddr = _senderAddr;
}

/*!
 * @brief This function moves the value in member senderAddr
 * @param _senderAddr New value to be moved in member senderAddr
 */
void ib::sim::fr::idl::FrMessageAck::senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
{
m_senderAddr = std::move(_senderAddr);
}

/*!
 * @brief This function returns a constant reference to member senderAddr
 * @return Constant reference to member senderAddr
 */
const ib::mw::idl::EndpointAddress& ib::sim::fr::idl::FrMessageAck::senderAddr() const
{
    return m_senderAddr;
}

/*!
 * @brief This function returns a reference to member senderAddr
 * @return Reference to member senderAddr
 */
ib::mw::idl::EndpointAddress& ib::sim::fr::idl::FrMessageAck::senderAddr()
{
    return m_senderAddr;
}
/*!
 * @brief This function sets a value in member timeNs
 * @param _timeNs New value for member timeNs
 */
void ib::sim::fr::idl::FrMessageAck::timeNs(int64_t _timeNs)
{
m_timeNs = _timeNs;
}

/*!
 * @brief This function returns the value of member timeNs
 * @return Value of member timeNs
 */
int64_t ib::sim::fr::idl::FrMessageAck::timeNs() const
{
    return m_timeNs;
}

/*!
 * @brief This function returns a reference to member timeNs
 * @return Reference to member timeNs
 */
int64_t& ib::sim::fr::idl::FrMessageAck::timeNs()
{
    return m_timeNs;
}
/*!
 * @brief This function sets a value in member txBufferIndex
 * @param _txBufferIndex New value for member txBufferIndex
 */
void ib::sim::fr::idl::FrMessageAck::txBufferIndex(uint16_t _txBufferIndex)
{
m_txBufferIndex = _txBufferIndex;
}

/*!
 * @brief This function returns the value of member txBufferIndex
 * @return Value of member txBufferIndex
 */
uint16_t ib::sim::fr::idl::FrMessageAck::txBufferIndex() const
{
    return m_txBufferIndex;
}

/*!
 * @brief This function returns a reference to member txBufferIndex
 * @return Reference to member txBufferIndex
 */
uint16_t& ib::sim::fr::idl::FrMessageAck::txBufferIndex()
{
    return m_txBufferIndex;
}
/*!
 * @brief This function sets a value in member channel
 * @param _channel New value for member channel
 */
void ib::sim::fr::idl::FrMessageAck::channel(ib::sim::fr::idl::Channel _channel)
{
m_channel = _channel;
}

/*!
 * @brief This function returns the value of member channel
 * @return Value of member channel
 */
ib::sim::fr::idl::Channel ib::sim::fr::idl::FrMessageAck::channel() const
{
    return m_channel;
}

/*!
 * @brief This function returns a reference to member channel
 * @return Reference to member channel
 */
ib::sim::fr::idl::Channel& ib::sim::fr::idl::FrMessageAck::channel()
{
    return m_channel;
}
/*!
 * @brief This function copies the value in member frame
 * @param _frame New value to be copied in member frame
 */
void ib::sim::fr::idl::FrMessageAck::frame(const ib::sim::fr::idl::Frame &_frame)
{
m_frame = _frame;
}

/*!
 * @brief This function moves the value in member frame
 * @param _frame New value to be moved in member frame
 */
void ib::sim::fr::idl::FrMessageAck::frame(ib::sim::fr::idl::Frame &&_frame)
{
m_frame = std::move(_frame);
}

/*!
 * @brief This function returns a constant reference to member frame
 * @return Constant reference to member frame
 */
const ib::sim::fr::idl::Frame& ib::sim::fr::idl::FrMessageAck::frame() const
{
    return m_frame;
}

/*!
 * @brief This function returns a reference to member frame
 * @return Reference to member frame
 */
ib::sim::fr::idl::Frame& ib::sim::fr::idl::FrMessageAck::frame()
{
    return m_frame;
}

size_t ib::sim::fr::idl::FrMessageAck::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;


     current_align += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_align); 





    return current_align;
}

bool ib::sim::fr::idl::FrMessageAck::isKeyDefined()
{
   return true;
}

void ib::sim::fr::idl::FrMessageAck::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 scdr << m_senderAddr;  
	 
	 
	 
	 
}


ib::sim::fr::idl::FrSymbol::FrSymbol()
{

    m_timeNs = 0;
    m_channel = ib::sim::fr::idl::None;
    m_pattern = ib::sim::fr::idl::CasMts;

}

ib::sim::fr::idl::FrSymbol::~FrSymbol()
{




}

ib::sim::fr::idl::FrSymbol::FrSymbol(const FrSymbol &x)
{
    m_senderAddr = x.m_senderAddr;
    m_timeNs = x.m_timeNs;
    m_channel = x.m_channel;
    m_pattern = x.m_pattern;
}

ib::sim::fr::idl::FrSymbol::FrSymbol(FrSymbol &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_timeNs = x.m_timeNs;
    m_channel = x.m_channel;
    m_pattern = x.m_pattern;
}

ib::sim::fr::idl::FrSymbol& ib::sim::fr::idl::FrSymbol::operator=(const FrSymbol &x)
{

    m_senderAddr = x.m_senderAddr;
    m_timeNs = x.m_timeNs;
    m_channel = x.m_channel;
    m_pattern = x.m_pattern;

    return *this;
}

ib::sim::fr::idl::FrSymbol& ib::sim::fr::idl::FrSymbol::operator=(FrSymbol &&x)
{

    m_senderAddr = std::move(x.m_senderAddr);
    m_timeNs = x.m_timeNs;
    m_channel = x.m_channel;
    m_pattern = x.m_pattern;

    return *this;
}

size_t ib::sim::fr::idl::FrSymbol::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t ib::sim::fr::idl::FrSymbol::getCdrSerializedSize(const ib::sim::fr::idl::FrSymbol& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getCdrSerializedSize(data.senderAddr(), current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void ib::sim::fr::idl::FrSymbol::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_senderAddr;
    scdr << m_timeNs;
    scdr << (uint32_t)m_channel;
    scdr << (uint32_t)m_pattern;
}

void ib::sim::fr::idl::FrSymbol::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_senderAddr;
    dcdr >> m_timeNs;
    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_channel = (ib::sim::fr::idl::Channel)enum_value;
    }

    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_pattern = (ib::sim::fr::idl::SymbolPattern)enum_value;
    }

}

/*!
 * @brief This function copies the value in member senderAddr
 * @param _senderAddr New value to be copied in member senderAddr
 */
void ib::sim::fr::idl::FrSymbol::senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
{
m_senderAddr = _senderAddr;
}

/*!
 * @brief This function moves the value in member senderAddr
 * @param _senderAddr New value to be moved in member senderAddr
 */
void ib::sim::fr::idl::FrSymbol::senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
{
m_senderAddr = std::move(_senderAddr);
}

/*!
 * @brief This function returns a constant reference to member senderAddr
 * @return Constant reference to member senderAddr
 */
const ib::mw::idl::EndpointAddress& ib::sim::fr::idl::FrSymbol::senderAddr() const
{
    return m_senderAddr;
}

/*!
 * @brief This function returns a reference to member senderAddr
 * @return Reference to member senderAddr
 */
ib::mw::idl::EndpointAddress& ib::sim::fr::idl::FrSymbol::senderAddr()
{
    return m_senderAddr;
}
/*!
 * @brief This function sets a value in member timeNs
 * @param _timeNs New value for member timeNs
 */
void ib::sim::fr::idl::FrSymbol::timeNs(int64_t _timeNs)
{
m_timeNs = _timeNs;
}

/*!
 * @brief This function returns the value of member timeNs
 * @return Value of member timeNs
 */
int64_t ib::sim::fr::idl::FrSymbol::timeNs() const
{
    return m_timeNs;
}

/*!
 * @brief This function returns a reference to member timeNs
 * @return Reference to member timeNs
 */
int64_t& ib::sim::fr::idl::FrSymbol::timeNs()
{
    return m_timeNs;
}
/*!
 * @brief This function sets a value in member channel
 * @param _channel New value for member channel
 */
void ib::sim::fr::idl::FrSymbol::channel(ib::sim::fr::idl::Channel _channel)
{
m_channel = _channel;
}

/*!
 * @brief This function returns the value of member channel
 * @return Value of member channel
 */
ib::sim::fr::idl::Channel ib::sim::fr::idl::FrSymbol::channel() const
{
    return m_channel;
}

/*!
 * @brief This function returns a reference to member channel
 * @return Reference to member channel
 */
ib::sim::fr::idl::Channel& ib::sim::fr::idl::FrSymbol::channel()
{
    return m_channel;
}
/*!
 * @brief This function sets a value in member pattern
 * @param _pattern New value for member pattern
 */
void ib::sim::fr::idl::FrSymbol::pattern(ib::sim::fr::idl::SymbolPattern _pattern)
{
m_pattern = _pattern;
}

/*!
 * @brief This function returns the value of member pattern
 * @return Value of member pattern
 */
ib::sim::fr::idl::SymbolPattern ib::sim::fr::idl::FrSymbol::pattern() const
{
    return m_pattern;
}

/*!
 * @brief This function returns a reference to member pattern
 * @return Reference to member pattern
 */
ib::sim::fr::idl::SymbolPattern& ib::sim::fr::idl::FrSymbol::pattern()
{
    return m_pattern;
}

size_t ib::sim::fr::idl::FrSymbol::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;


     current_align += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_align); 




    return current_align;
}

bool ib::sim::fr::idl::FrSymbol::isKeyDefined()
{
   return true;
}

void ib::sim::fr::idl::FrSymbol::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 scdr << m_senderAddr;  
	 
	 
	 
}

ib::sim::fr::idl::FrSymbolAck::FrSymbolAck()
{



}

ib::sim::fr::idl::FrSymbolAck::~FrSymbolAck()
{


}

ib::sim::fr::idl::FrSymbolAck::FrSymbolAck(const FrSymbolAck &x)
{
    m_senderAddr = x.m_senderAddr;
    m_symbol = x.m_symbol;
}

ib::sim::fr::idl::FrSymbolAck::FrSymbolAck(FrSymbolAck &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_symbol = std::move(x.m_symbol);
}

ib::sim::fr::idl::FrSymbolAck& ib::sim::fr::idl::FrSymbolAck::operator=(const FrSymbolAck &x)
{

    m_senderAddr = x.m_senderAddr;
    m_symbol = x.m_symbol;

    return *this;
}

ib::sim::fr::idl::FrSymbolAck& ib::sim::fr::idl::FrSymbolAck::operator=(FrSymbolAck &&x)
{

    m_senderAddr = std::move(x.m_senderAddr);
    m_symbol = std::move(x.m_symbol);

    return *this;
}

size_t ib::sim::fr::idl::FrSymbolAck::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_alignment);
    current_alignment += ib::sim::fr::idl::FrSymbol::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t ib::sim::fr::idl::FrSymbolAck::getCdrSerializedSize(const ib::sim::fr::idl::FrSymbolAck& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getCdrSerializedSize(data.senderAddr(), current_alignment);
    current_alignment += ib::sim::fr::idl::FrSymbol::getCdrSerializedSize(data.symbol(), current_alignment);

    return current_alignment - initial_alignment;
}

void ib::sim::fr::idl::FrSymbolAck::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_senderAddr;
    scdr << m_symbol;
}

void ib::sim::fr::idl::FrSymbolAck::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_senderAddr;
    dcdr >> m_symbol;
}

/*!
 * @brief This function copies the value in member senderAddr
 * @param _senderAddr New value to be copied in member senderAddr
 */
void ib::sim::fr::idl::FrSymbolAck::senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
{
m_senderAddr = _senderAddr;
}

/*!
 * @brief This function moves the value in member senderAddr
 * @param _senderAddr New value to be moved in member senderAddr
 */
void ib::sim::fr::idl::FrSymbolAck::senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
{
m_senderAddr = std::move(_senderAddr);
}

/*!
 * @brief This function returns a constant reference to member senderAddr
 * @return Constant reference to member senderAddr
 */
const ib::mw::idl::EndpointAddress& ib::sim::fr::idl::FrSymbolAck::senderAddr() const
{
    return m_senderAddr;
}

/*!
 * @brief This function returns a reference to member senderAddr
 * @return Reference to member senderAddr
 */
ib::mw::idl::EndpointAddress& ib::sim::fr::idl::FrSymbolAck::senderAddr()
{
    return m_senderAddr;
}
/*!
 * @brief This function copies the value in member symbol
 * @param _symbol New value to be copied in member symbol
 */
void ib::sim::fr::idl::FrSymbolAck::symbol(const ib::sim::fr::idl::FrSymbol &_symbol)
{
m_symbol = _symbol;
}

/*!
 * @brief This function moves the value in member symbol
 * @param _symbol New value to be moved in member symbol
 */
void ib::sim::fr::idl::FrSymbolAck::symbol(ib::sim::fr::idl::FrSymbol &&_symbol)
{
m_symbol = std::move(_symbol);
}

/*!
 * @brief This function returns a constant reference to member symbol
 * @return Constant reference to member symbol
 */
const ib::sim::fr::idl::FrSymbol& ib::sim::fr::idl::FrSymbolAck::symbol() const
{
    return m_symbol;
}

/*!
 * @brief This function returns a reference to member symbol
 * @return Reference to member symbol
 */
ib::sim::fr::idl::FrSymbol& ib::sim::fr::idl::FrSymbolAck::symbol()
{
    return m_symbol;
}

size_t ib::sim::fr::idl::FrSymbolAck::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;


     current_align += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_align); 


    return current_align;
}

bool ib::sim::fr::idl::FrSymbolAck::isKeyDefined()
{
   return true;
}

void ib::sim::fr::idl::FrSymbolAck::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 scdr << m_senderAddr;  
	 
}

ib::sim::fr::idl::CycleStart::CycleStart()
{

    m_timeNs = 0;
    m_cycleCounter = 0;

}

ib::sim::fr::idl::CycleStart::~CycleStart()
{



}

ib::sim::fr::idl::CycleStart::CycleStart(const CycleStart &x)
{
    m_senderAddr = x.m_senderAddr;
    m_timeNs = x.m_timeNs;
    m_cycleCounter = x.m_cycleCounter;
}

ib::sim::fr::idl::CycleStart::CycleStart(CycleStart &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_timeNs = x.m_timeNs;
    m_cycleCounter = x.m_cycleCounter;
}

ib::sim::fr::idl::CycleStart& ib::sim::fr::idl::CycleStart::operator=(const CycleStart &x)
{

    m_senderAddr = x.m_senderAddr;
    m_timeNs = x.m_timeNs;
    m_cycleCounter = x.m_cycleCounter;

    return *this;
}

ib::sim::fr::idl::CycleStart& ib::sim::fr::idl::CycleStart::operator=(CycleStart &&x)
{

    m_senderAddr = std::move(x.m_senderAddr);
    m_timeNs = x.m_timeNs;
    m_cycleCounter = x.m_cycleCounter;

    return *this;
}

size_t ib::sim::fr::idl::CycleStart::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t ib::sim::fr::idl::CycleStart::getCdrSerializedSize(const ib::sim::fr::idl::CycleStart& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getCdrSerializedSize(data.senderAddr(), current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void ib::sim::fr::idl::CycleStart::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_senderAddr;
    scdr << m_timeNs;
    scdr << m_cycleCounter;
}

void ib::sim::fr::idl::CycleStart::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_senderAddr;
    dcdr >> m_timeNs;
    dcdr >> m_cycleCounter;
}

/*!
 * @brief This function copies the value in member senderAddr
 * @param _senderAddr New value to be copied in member senderAddr
 */
void ib::sim::fr::idl::CycleStart::senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
{
m_senderAddr = _senderAddr;
}

/*!
 * @brief This function moves the value in member senderAddr
 * @param _senderAddr New value to be moved in member senderAddr
 */
void ib::sim::fr::idl::CycleStart::senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
{
m_senderAddr = std::move(_senderAddr);
}

/*!
 * @brief This function returns a constant reference to member senderAddr
 * @return Constant reference to member senderAddr
 */
const ib::mw::idl::EndpointAddress& ib::sim::fr::idl::CycleStart::senderAddr() const
{
    return m_senderAddr;
}

/*!
 * @brief This function returns a reference to member senderAddr
 * @return Reference to member senderAddr
 */
ib::mw::idl::EndpointAddress& ib::sim::fr::idl::CycleStart::senderAddr()
{
    return m_senderAddr;
}
/*!
 * @brief This function sets a value in member timeNs
 * @param _timeNs New value for member timeNs
 */
void ib::sim::fr::idl::CycleStart::timeNs(int64_t _timeNs)
{
m_timeNs = _timeNs;
}

/*!
 * @brief This function returns the value of member timeNs
 * @return Value of member timeNs
 */
int64_t ib::sim::fr::idl::CycleStart::timeNs() const
{
    return m_timeNs;
}

/*!
 * @brief This function returns a reference to member timeNs
 * @return Reference to member timeNs
 */
int64_t& ib::sim::fr::idl::CycleStart::timeNs()
{
    return m_timeNs;
}
/*!
 * @brief This function sets a value in member cycleCounter
 * @param _cycleCounter New value for member cycleCounter
 */
void ib::sim::fr::idl::CycleStart::cycleCounter(uint8_t _cycleCounter)
{
m_cycleCounter = _cycleCounter;
}

/*!
 * @brief This function returns the value of member cycleCounter
 * @return Value of member cycleCounter
 */
uint8_t ib::sim::fr::idl::CycleStart::cycleCounter() const
{
    return m_cycleCounter;
}

/*!
 * @brief This function returns a reference to member cycleCounter
 * @return Reference to member cycleCounter
 */
uint8_t& ib::sim::fr::idl::CycleStart::cycleCounter()
{
    return m_cycleCounter;
}

size_t ib::sim::fr::idl::CycleStart::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;


     current_align += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_align); 



    return current_align;
}

bool ib::sim::fr::idl::CycleStart::isKeyDefined()
{
   return true;
}

void ib::sim::fr::idl::CycleStart::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 scdr << m_senderAddr;  
	 
	 
}


ib::sim::fr::idl::ControllerStatus::ControllerStatus()
{

    m_timeNs = 0;
    m_pocState = ib::sim::fr::idl::DefaultConfig;

}

ib::sim::fr::idl::ControllerStatus::~ControllerStatus()
{



}

ib::sim::fr::idl::ControllerStatus::ControllerStatus(const ControllerStatus &x)
{
    m_senderAddr = x.m_senderAddr;
    m_timeNs = x.m_timeNs;
    m_pocState = x.m_pocState;
}

ib::sim::fr::idl::ControllerStatus::ControllerStatus(ControllerStatus &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_timeNs = x.m_timeNs;
    m_pocState = x.m_pocState;
}

ib::sim::fr::idl::ControllerStatus& ib::sim::fr::idl::ControllerStatus::operator=(const ControllerStatus &x)
{

    m_senderAddr = x.m_senderAddr;
    m_timeNs = x.m_timeNs;
    m_pocState = x.m_pocState;

    return *this;
}

ib::sim::fr::idl::ControllerStatus& ib::sim::fr::idl::ControllerStatus::operator=(ControllerStatus &&x)
{

    m_senderAddr = std::move(x.m_senderAddr);
    m_timeNs = x.m_timeNs;
    m_pocState = x.m_pocState;

    return *this;
}

size_t ib::sim::fr::idl::ControllerStatus::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t ib::sim::fr::idl::ControllerStatus::getCdrSerializedSize(const ib::sim::fr::idl::ControllerStatus& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getCdrSerializedSize(data.senderAddr(), current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void ib::sim::fr::idl::ControllerStatus::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_senderAddr;
    scdr << m_timeNs;
    scdr << (uint32_t)m_pocState;
}

void ib::sim::fr::idl::ControllerStatus::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_senderAddr;
    dcdr >> m_timeNs;
    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_pocState = (ib::sim::fr::idl::PocState)enum_value;
    }

}

/*!
 * @brief This function copies the value in member senderAddr
 * @param _senderAddr New value to be copied in member senderAddr
 */
void ib::sim::fr::idl::ControllerStatus::senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
{
m_senderAddr = _senderAddr;
}

/*!
 * @brief This function moves the value in member senderAddr
 * @param _senderAddr New value to be moved in member senderAddr
 */
void ib::sim::fr::idl::ControllerStatus::senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
{
m_senderAddr = std::move(_senderAddr);
}

/*!
 * @brief This function returns a constant reference to member senderAddr
 * @return Constant reference to member senderAddr
 */
const ib::mw::idl::EndpointAddress& ib::sim::fr::idl::ControllerStatus::senderAddr() const
{
    return m_senderAddr;
}

/*!
 * @brief This function returns a reference to member senderAddr
 * @return Reference to member senderAddr
 */
ib::mw::idl::EndpointAddress& ib::sim::fr::idl::ControllerStatus::senderAddr()
{
    return m_senderAddr;
}
/*!
 * @brief This function sets a value in member timeNs
 * @param _timeNs New value for member timeNs
 */
void ib::sim::fr::idl::ControllerStatus::timeNs(int64_t _timeNs)
{
m_timeNs = _timeNs;
}

/*!
 * @brief This function returns the value of member timeNs
 * @return Value of member timeNs
 */
int64_t ib::sim::fr::idl::ControllerStatus::timeNs() const
{
    return m_timeNs;
}

/*!
 * @brief This function returns a reference to member timeNs
 * @return Reference to member timeNs
 */
int64_t& ib::sim::fr::idl::ControllerStatus::timeNs()
{
    return m_timeNs;
}
/*!
 * @brief This function sets a value in member pocState
 * @param _pocState New value for member pocState
 */
void ib::sim::fr::idl::ControllerStatus::pocState(ib::sim::fr::idl::PocState _pocState)
{
m_pocState = _pocState;
}

/*!
 * @brief This function returns the value of member pocState
 * @return Value of member pocState
 */
ib::sim::fr::idl::PocState ib::sim::fr::idl::ControllerStatus::pocState() const
{
    return m_pocState;
}

/*!
 * @brief This function returns a reference to member pocState
 * @return Reference to member pocState
 */
ib::sim::fr::idl::PocState& ib::sim::fr::idl::ControllerStatus::pocState()
{
    return m_pocState;
}

size_t ib::sim::fr::idl::ControllerStatus::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;


     current_align += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_align); 



    return current_align;
}

bool ib::sim::fr::idl::ControllerStatus::isKeyDefined()
{
   return true;
}

void ib::sim::fr::idl::ControllerStatus::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 scdr << m_senderAddr;  
	 
	 
}





ib::sim::fr::idl::PocStatus::PocStatus()
{

    m_timeNs = 0;
    m_state = ib::sim::fr::idl::DefaultConfig;
    m_chiHaltRequest = false;
    m_coldstartNoise = false;
    m_freeze = false;
    m_chiReadyRequest = false;
    m_errorMode = ib::sim::fr::idl::Active;
    m_slotMode = ib::sim::fr::idl::KeySlot;
    m_startupState = ib::sim::fr::idl::Undefined;
    m_wakeupStatus = ib::sim::fr::idl::UndefinedWakeupStatus;

}

ib::sim::fr::idl::PocStatus::~PocStatus()
{











}

ib::sim::fr::idl::PocStatus::PocStatus(const PocStatus &x)
{
    m_senderAddr = x.m_senderAddr;
    m_timeNs = x.m_timeNs;
    m_state = x.m_state;
    m_chiHaltRequest = x.m_chiHaltRequest;
    m_coldstartNoise = x.m_coldstartNoise;
    m_freeze = x.m_freeze;
    m_chiReadyRequest = x.m_chiReadyRequest;
    m_errorMode = x.m_errorMode;
    m_slotMode = x.m_slotMode;
    m_startupState = x.m_startupState;
    m_wakeupStatus = x.m_wakeupStatus;
}

ib::sim::fr::idl::PocStatus::PocStatus(PocStatus &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_timeNs = x.m_timeNs;
    m_state = x.m_state;
    m_chiHaltRequest = x.m_chiHaltRequest;
    m_coldstartNoise = x.m_coldstartNoise;
    m_freeze = x.m_freeze;
    m_chiReadyRequest = x.m_chiReadyRequest;
    m_errorMode = x.m_errorMode;
    m_slotMode = x.m_slotMode;
    m_startupState = x.m_startupState;
    m_wakeupStatus = x.m_wakeupStatus;
}

ib::sim::fr::idl::PocStatus& ib::sim::fr::idl::PocStatus::operator=(const PocStatus &x)
{

    m_senderAddr = x.m_senderAddr;
    m_timeNs = x.m_timeNs;
    m_state = x.m_state;
    m_chiHaltRequest = x.m_chiHaltRequest;
    m_coldstartNoise = x.m_coldstartNoise;
    m_freeze = x.m_freeze;
    m_chiReadyRequest = x.m_chiReadyRequest;
    m_errorMode = x.m_errorMode;
    m_slotMode = x.m_slotMode;
    m_startupState = x.m_startupState;
    m_wakeupStatus = x.m_wakeupStatus;

    return *this;
}

ib::sim::fr::idl::PocStatus& ib::sim::fr::idl::PocStatus::operator=(PocStatus &&x)
{

    m_senderAddr = std::move(x.m_senderAddr);
    m_timeNs = x.m_timeNs;
    m_state = x.m_state;
    m_chiHaltRequest = x.m_chiHaltRequest;
    m_coldstartNoise = x.m_coldstartNoise;
    m_freeze = x.m_freeze;
    m_chiReadyRequest = x.m_chiReadyRequest;
    m_errorMode = x.m_errorMode;
    m_slotMode = x.m_slotMode;
    m_startupState = x.m_startupState;
    m_wakeupStatus = x.m_wakeupStatus;

    return *this;
}

size_t ib::sim::fr::idl::PocStatus::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

size_t ib::sim::fr::idl::PocStatus::getCdrSerializedSize(const ib::sim::fr::idl::PocStatus& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += ib::mw::idl::EndpointAddress::getCdrSerializedSize(data.senderAddr(), current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);



    return current_alignment - initial_alignment;
}

void ib::sim::fr::idl::PocStatus::serialize(eprosima::fastcdr::Cdr &scdr) const
{

    scdr << m_senderAddr;
    scdr << m_timeNs;
    scdr << (uint32_t)m_state;
    scdr << m_chiHaltRequest;
    scdr << m_coldstartNoise;
    scdr << m_freeze;
    scdr << m_chiReadyRequest;
    scdr << (uint32_t)m_errorMode;
    scdr << (uint32_t)m_slotMode;
    scdr << (uint32_t)m_startupState;
    scdr << (uint32_t)m_wakeupStatus;
}

void ib::sim::fr::idl::PocStatus::deserialize(eprosima::fastcdr::Cdr &dcdr)
{

    dcdr >> m_senderAddr;
    dcdr >> m_timeNs;
    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_state = (ib::sim::fr::idl::PocState)enum_value;
    }

    dcdr >> m_chiHaltRequest;
    dcdr >> m_coldstartNoise;
    dcdr >> m_freeze;
    dcdr >> m_chiReadyRequest;
    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_errorMode = (ib::sim::fr::idl::ErrorModeType)enum_value;
    }

    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_slotMode = (ib::sim::fr::idl::SlotModeType)enum_value;
    }

    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_startupState = (ib::sim::fr::idl::StartupStateType)enum_value;
    }

    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_wakeupStatus = (ib::sim::fr::idl::WakeupStatusType)enum_value;
    }

}

/*!
 * @brief This function copies the value in member senderAddr
 * @param _senderAddr New value to be copied in member senderAddr
 */
void ib::sim::fr::idl::PocStatus::senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
{
m_senderAddr = _senderAddr;
}

/*!
 * @brief This function moves the value in member senderAddr
 * @param _senderAddr New value to be moved in member senderAddr
 */
void ib::sim::fr::idl::PocStatus::senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
{
m_senderAddr = std::move(_senderAddr);
}

/*!
 * @brief This function returns a constant reference to member senderAddr
 * @return Constant reference to member senderAddr
 */
const ib::mw::idl::EndpointAddress& ib::sim::fr::idl::PocStatus::senderAddr() const
{
    return m_senderAddr;
}

/*!
 * @brief This function returns a reference to member senderAddr
 * @return Reference to member senderAddr
 */
ib::mw::idl::EndpointAddress& ib::sim::fr::idl::PocStatus::senderAddr()
{
    return m_senderAddr;
}
/*!
 * @brief This function sets a value in member timeNs
 * @param _timeNs New value for member timeNs
 */
void ib::sim::fr::idl::PocStatus::timeNs(int64_t _timeNs)
{
m_timeNs = _timeNs;
}

/*!
 * @brief This function returns the value of member timeNs
 * @return Value of member timeNs
 */
int64_t ib::sim::fr::idl::PocStatus::timeNs() const
{
    return m_timeNs;
}

/*!
 * @brief This function returns a reference to member timeNs
 * @return Reference to member timeNs
 */
int64_t& ib::sim::fr::idl::PocStatus::timeNs()
{
    return m_timeNs;
}
/*!
 * @brief This function sets a value in member state
 * @param _state New value for member state
 */
void ib::sim::fr::idl::PocStatus::state(ib::sim::fr::idl::PocState _state)
{
m_state = _state;
}

/*!
 * @brief This function returns the value of member state
 * @return Value of member state
 */
ib::sim::fr::idl::PocState ib::sim::fr::idl::PocStatus::state() const
{
    return m_state;
}

/*!
 * @brief This function returns a reference to member state
 * @return Reference to member state
 */
ib::sim::fr::idl::PocState& ib::sim::fr::idl::PocStatus::state()
{
    return m_state;
}
/*!
 * @brief This function sets a value in member chiHaltRequest
 * @param _chiHaltRequest New value for member chiHaltRequest
 */
void ib::sim::fr::idl::PocStatus::chiHaltRequest(bool _chiHaltRequest)
{
m_chiHaltRequest = _chiHaltRequest;
}

/*!
 * @brief This function returns the value of member chiHaltRequest
 * @return Value of member chiHaltRequest
 */
bool ib::sim::fr::idl::PocStatus::chiHaltRequest() const
{
    return m_chiHaltRequest;
}

/*!
 * @brief This function returns a reference to member chiHaltRequest
 * @return Reference to member chiHaltRequest
 */
bool& ib::sim::fr::idl::PocStatus::chiHaltRequest()
{
    return m_chiHaltRequest;
}
/*!
 * @brief This function sets a value in member coldstartNoise
 * @param _coldstartNoise New value for member coldstartNoise
 */
void ib::sim::fr::idl::PocStatus::coldstartNoise(bool _coldstartNoise)
{
m_coldstartNoise = _coldstartNoise;
}

/*!
 * @brief This function returns the value of member coldstartNoise
 * @return Value of member coldstartNoise
 */
bool ib::sim::fr::idl::PocStatus::coldstartNoise() const
{
    return m_coldstartNoise;
}

/*!
 * @brief This function returns a reference to member coldstartNoise
 * @return Reference to member coldstartNoise
 */
bool& ib::sim::fr::idl::PocStatus::coldstartNoise()
{
    return m_coldstartNoise;
}
/*!
 * @brief This function sets a value in member freeze
 * @param _freeze New value for member freeze
 */
void ib::sim::fr::idl::PocStatus::freeze(bool _freeze)
{
m_freeze = _freeze;
}

/*!
 * @brief This function returns the value of member freeze
 * @return Value of member freeze
 */
bool ib::sim::fr::idl::PocStatus::freeze() const
{
    return m_freeze;
}

/*!
 * @brief This function returns a reference to member freeze
 * @return Reference to member freeze
 */
bool& ib::sim::fr::idl::PocStatus::freeze()
{
    return m_freeze;
}
/*!
 * @brief This function sets a value in member chiReadyRequest
 * @param _chiReadyRequest New value for member chiReadyRequest
 */
void ib::sim::fr::idl::PocStatus::chiReadyRequest(bool _chiReadyRequest)
{
m_chiReadyRequest = _chiReadyRequest;
}

/*!
 * @brief This function returns the value of member chiReadyRequest
 * @return Value of member chiReadyRequest
 */
bool ib::sim::fr::idl::PocStatus::chiReadyRequest() const
{
    return m_chiReadyRequest;
}

/*!
 * @brief This function returns a reference to member chiReadyRequest
 * @return Reference to member chiReadyRequest
 */
bool& ib::sim::fr::idl::PocStatus::chiReadyRequest()
{
    return m_chiReadyRequest;
}
/*!
 * @brief This function sets a value in member errorMode
 * @param _errorMode New value for member errorMode
 */
void ib::sim::fr::idl::PocStatus::errorMode(ib::sim::fr::idl::ErrorModeType _errorMode)
{
m_errorMode = _errorMode;
}

/*!
 * @brief This function returns the value of member errorMode
 * @return Value of member errorMode
 */
ib::sim::fr::idl::ErrorModeType ib::sim::fr::idl::PocStatus::errorMode() const
{
    return m_errorMode;
}

/*!
 * @brief This function returns a reference to member errorMode
 * @return Reference to member errorMode
 */
ib::sim::fr::idl::ErrorModeType& ib::sim::fr::idl::PocStatus::errorMode()
{
    return m_errorMode;
}
/*!
 * @brief This function sets a value in member slotMode
 * @param _slotMode New value for member slotMode
 */
void ib::sim::fr::idl::PocStatus::slotMode(ib::sim::fr::idl::SlotModeType _slotMode)
{
m_slotMode = _slotMode;
}

/*!
 * @brief This function returns the value of member slotMode
 * @return Value of member slotMode
 */
ib::sim::fr::idl::SlotModeType ib::sim::fr::idl::PocStatus::slotMode() const
{
    return m_slotMode;
}

/*!
 * @brief This function returns a reference to member slotMode
 * @return Reference to member slotMode
 */
ib::sim::fr::idl::SlotModeType& ib::sim::fr::idl::PocStatus::slotMode()
{
    return m_slotMode;
}
/*!
 * @brief This function sets a value in member startupState
 * @param _startupState New value for member startupState
 */
void ib::sim::fr::idl::PocStatus::startupState(ib::sim::fr::idl::StartupStateType _startupState)
{
m_startupState = _startupState;
}

/*!
 * @brief This function returns the value of member startupState
 * @return Value of member startupState
 */
ib::sim::fr::idl::StartupStateType ib::sim::fr::idl::PocStatus::startupState() const
{
    return m_startupState;
}

/*!
 * @brief This function returns a reference to member startupState
 * @return Reference to member startupState
 */
ib::sim::fr::idl::StartupStateType& ib::sim::fr::idl::PocStatus::startupState()
{
    return m_startupState;
}
/*!
 * @brief This function sets a value in member wakeupStatus
 * @param _wakeupStatus New value for member wakeupStatus
 */
void ib::sim::fr::idl::PocStatus::wakeupStatus(ib::sim::fr::idl::WakeupStatusType _wakeupStatus)
{
m_wakeupStatus = _wakeupStatus;
}

/*!
 * @brief This function returns the value of member wakeupStatus
 * @return Value of member wakeupStatus
 */
ib::sim::fr::idl::WakeupStatusType ib::sim::fr::idl::PocStatus::wakeupStatus() const
{
    return m_wakeupStatus;
}

/*!
 * @brief This function returns a reference to member wakeupStatus
 * @return Reference to member wakeupStatus
 */
ib::sim::fr::idl::WakeupStatusType& ib::sim::fr::idl::PocStatus::wakeupStatus()
{
    return m_wakeupStatus;
}

size_t ib::sim::fr::idl::PocStatus::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;


     current_align += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_align); 











    return current_align;
}

bool ib::sim::fr::idl::PocStatus::isKeyDefined()
{
   return true;
}

void ib::sim::fr::idl::PocStatus::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 scdr << m_senderAddr;  
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
}




