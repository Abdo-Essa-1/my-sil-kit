// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file EthernetTopicsPubSubTypes.h
 * This header file contains the declaration of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#ifndef _IB_SIM_ETH_IDL_ETHERNETTOPICS_PUBSUBTYPES_H_
#define _IB_SIM_ETH_IDL_ETHERNETTOPICS_PUBSUBTYPES_H_

#include <fastrtps/TopicDataType.h>

#include "EthernetTopics.h"

namespace ib
{
    namespace sim
    {
        namespace eth
        {
            namespace idl
            {
                /*!
                 * @brief This class represents the TopicDataType of the type EthTagControlInformation defined by the user in the IDL file.
                 * @ingroup ETHERNETTOPICS
                 */
                class EthTagControlInformationPubSubType : public eprosima::fastrtps::TopicDataType {
                public:
                        typedef EthTagControlInformation type;

                	EthTagControlInformationPubSubType();
                	virtual ~EthTagControlInformationPubSubType();
                	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
                	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                        std::function<uint32_t()> getSerializedSizeProvider(void* data);
                	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
                	void* createData();
                	void deleteData(void * data);
                	MD5 m_md5;
                	unsigned char* m_keyBuffer;
                };
                typedef uint32_t transmitIdT;
                /*!
                 * @brief This class represents the TopicDataType of the type EthMessage defined by the user in the IDL file.
                 * @ingroup ETHERNETTOPICS
                 */
                class EthMessagePubSubType : public eprosima::fastrtps::TopicDataType {
                public:
                        typedef EthMessage type;

                	EthMessagePubSubType();
                	virtual ~EthMessagePubSubType();
                	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
                	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                        std::function<uint32_t()> getSerializedSizeProvider(void* data);
                	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
                	void* createData();
                	void deleteData(void * data);
                	MD5 m_md5;
                	unsigned char* m_keyBuffer;
                };

                /*!
                 * @brief This class represents the TopicDataType of the type EthTransmitAcknowledge defined by the user in the IDL file.
                 * @ingroup ETHERNETTOPICS
                 */
                class EthTransmitAcknowledgePubSubType : public eprosima::fastrtps::TopicDataType {
                public:
                        typedef EthTransmitAcknowledge type;

                	EthTransmitAcknowledgePubSubType();
                	virtual ~EthTransmitAcknowledgePubSubType();
                	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
                	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                        std::function<uint32_t()> getSerializedSizeProvider(void* data);
                	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
                	void* createData();
                	void deleteData(void * data);
                	MD5 m_md5;
                	unsigned char* m_keyBuffer;
                };

                /*!
                 * @brief This class represents the TopicDataType of the type EthStatus defined by the user in the IDL file.
                 * @ingroup ETHERNETTOPICS
                 */
                class EthStatusPubSubType : public eprosima::fastrtps::TopicDataType {
                public:
                        typedef EthStatus type;

                	EthStatusPubSubType();
                	virtual ~EthStatusPubSubType();
                	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
                	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                        std::function<uint32_t()> getSerializedSizeProvider(void* data);
                	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
                	void* createData();
                	void deleteData(void * data);
                	MD5 m_md5;
                	unsigned char* m_keyBuffer;
                };

                /*!
                 * @brief This class represents the TopicDataType of the type EthSetMode defined by the user in the IDL file.
                 * @ingroup ETHERNETTOPICS
                 */
                class EthSetModePubSubType : public eprosima::fastrtps::TopicDataType {
                public:
                        typedef EthSetMode type;

                	EthSetModePubSubType();
                	virtual ~EthSetModePubSubType();
                	bool serialize(void *data, eprosima::fastrtps::rtps::SerializedPayload_t *payload);
                	bool deserialize(eprosima::fastrtps::rtps::SerializedPayload_t *payload, void *data);
                        std::function<uint32_t()> getSerializedSizeProvider(void* data);
                	bool getKey(void *data, eprosima::fastrtps::rtps::InstanceHandle_t *ihandle);
                	void* createData();
                	void deleteData(void * data);
                	MD5 m_md5;
                	unsigned char* m_keyBuffer;
                };
            }
        }
    }
}

#endif // _IB_SIM_ETH_IDL_ETHERNETTOPICS_PUBSUBTYPES_H_