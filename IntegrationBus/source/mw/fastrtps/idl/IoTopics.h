// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file IoTopics.h
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifndef _IB_SIM_IO_IDL_IOTOPICS_H_
#define _IB_SIM_IO_IDL_IOTOPICS_H_

// TODO Poner en el contexto.
#include "Common.h"

#include <stdint.h>
#include <array>
#include <string>
#include <vector>
#include <map>
#include <bitset>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif
#else
#define eProsima_user_DllExport
#endif

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(IoTopics_SOURCE)
#define IoTopics_DllAPI __declspec( dllexport )
#else
#define IoTopics_DllAPI __declspec( dllimport )
#endif // IoTopics_SOURCE
#else
#define IoTopics_DllAPI
#endif
#else
#define IoTopics_DllAPI
#endif // _WIN32

namespace eprosima
{
    namespace fastcdr
    {
        class Cdr;
    }
}

namespace ib
{
    namespace sim
    {
        namespace io
        {
            namespace idl
            {
                /*!
                 * @brief This class represents the structure AnalogIoMessage defined by the user in the IDL file.
                 * @ingroup IOTOPICS
                 */
                class AnalogIoMessage
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport AnalogIoMessage();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~AnalogIoMessage();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::io::idl::AnalogIoMessage that will be copied.
                     */
                    eProsima_user_DllExport AnalogIoMessage(const AnalogIoMessage &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::io::idl::AnalogIoMessage that will be copied.
                     */
                    eProsima_user_DllExport AnalogIoMessage(AnalogIoMessage &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::io::idl::AnalogIoMessage that will be copied.
                     */
                    eProsima_user_DllExport AnalogIoMessage& operator=(const AnalogIoMessage &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::io::idl::AnalogIoMessage that will be copied.
                     */
                    eProsima_user_DllExport AnalogIoMessage& operator=(AnalogIoMessage &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
                    {
                        m_senderAddr = _senderAddr;
                    }

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
                    {
                        m_senderAddr = std::move(_senderAddr);
                    }

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    inline eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const
                    {
                        return m_senderAddr;
                    }

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    inline eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr()
                    {
                        return m_senderAddr;
                    }
                    /*!
                     * @brief This function sets a value in member timestampNs
                     * @param _timestampNs New value for member timestampNs
                     */
                    inline eProsima_user_DllExport void timestampNs(int64_t _timestampNs)
                    {
                        m_timestampNs = _timestampNs;
                    }

                    /*!
                     * @brief This function returns the value of member timestampNs
                     * @return Value of member timestampNs
                     */
                    inline eProsima_user_DllExport int64_t timestampNs() const
                    {
                        return m_timestampNs;
                    }

                    /*!
                     * @brief This function returns a reference to member timestampNs
                     * @return Reference to member timestampNs
                     */
                    inline eProsima_user_DllExport int64_t& timestampNs()
                    {
                        return m_timestampNs;
                    }
                    /*!
                     * @brief This function sets a value in member value
                     * @param _value New value for member value
                     */
                    inline eProsima_user_DllExport void value(double _value)
                    {
                        m_value = _value;
                    }

                    /*!
                     * @brief This function returns the value of member value
                     * @return Value of member value
                     */
                    inline eProsima_user_DllExport double value() const
                    {
                        return m_value;
                    }

                    /*!
                     * @brief This function returns a reference to member value
                     * @return Reference to member value
                     */
                    inline eProsima_user_DllExport double& value()
                    {
                        return m_value;
                    }

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::io::idl::AnalogIoMessage& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    int64_t m_timestampNs;
                    double m_value;
                };
                /*!
                 * @brief This class represents the structure DigitalIoMessage defined by the user in the IDL file.
                 * @ingroup IOTOPICS
                 */
                class DigitalIoMessage
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport DigitalIoMessage();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~DigitalIoMessage();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::io::idl::DigitalIoMessage that will be copied.
                     */
                    eProsima_user_DllExport DigitalIoMessage(const DigitalIoMessage &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::io::idl::DigitalIoMessage that will be copied.
                     */
                    eProsima_user_DllExport DigitalIoMessage(DigitalIoMessage &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::io::idl::DigitalIoMessage that will be copied.
                     */
                    eProsima_user_DllExport DigitalIoMessage& operator=(const DigitalIoMessage &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::io::idl::DigitalIoMessage that will be copied.
                     */
                    eProsima_user_DllExport DigitalIoMessage& operator=(DigitalIoMessage &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
                    {
                        m_senderAddr = _senderAddr;
                    }

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
                    {
                        m_senderAddr = std::move(_senderAddr);
                    }

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    inline eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const
                    {
                        return m_senderAddr;
                    }

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    inline eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr()
                    {
                        return m_senderAddr;
                    }
                    /*!
                     * @brief This function sets a value in member timestampNs
                     * @param _timestampNs New value for member timestampNs
                     */
                    inline eProsima_user_DllExport void timestampNs(int64_t _timestampNs)
                    {
                        m_timestampNs = _timestampNs;
                    }

                    /*!
                     * @brief This function returns the value of member timestampNs
                     * @return Value of member timestampNs
                     */
                    inline eProsima_user_DllExport int64_t timestampNs() const
                    {
                        return m_timestampNs;
                    }

                    /*!
                     * @brief This function returns a reference to member timestampNs
                     * @return Reference to member timestampNs
                     */
                    inline eProsima_user_DllExport int64_t& timestampNs()
                    {
                        return m_timestampNs;
                    }
                    /*!
                     * @brief This function sets a value in member value
                     * @param _value New value for member value
                     */
                    inline eProsima_user_DllExport void value(bool _value)
                    {
                        m_value = _value;
                    }

                    /*!
                     * @brief This function returns the value of member value
                     * @return Value of member value
                     */
                    inline eProsima_user_DllExport bool value() const
                    {
                        return m_value;
                    }

                    /*!
                     * @brief This function returns a reference to member value
                     * @return Reference to member value
                     */
                    inline eProsima_user_DllExport bool& value()
                    {
                        return m_value;
                    }

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::io::idl::DigitalIoMessage& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    int64_t m_timestampNs;
                    bool m_value;
                };
                /*!
                 * @brief This class represents the structure PatternIoMessage defined by the user in the IDL file.
                 * @ingroup IOTOPICS
                 */
                class PatternIoMessage
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport PatternIoMessage();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~PatternIoMessage();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::io::idl::PatternIoMessage that will be copied.
                     */
                    eProsima_user_DllExport PatternIoMessage(const PatternIoMessage &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::io::idl::PatternIoMessage that will be copied.
                     */
                    eProsima_user_DllExport PatternIoMessage(PatternIoMessage &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::io::idl::PatternIoMessage that will be copied.
                     */
                    eProsima_user_DllExport PatternIoMessage& operator=(const PatternIoMessage &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::io::idl::PatternIoMessage that will be copied.
                     */
                    eProsima_user_DllExport PatternIoMessage& operator=(PatternIoMessage &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
                    {
                        m_senderAddr = _senderAddr;
                    }

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
                    {
                        m_senderAddr = std::move(_senderAddr);
                    }

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    inline eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const
                    {
                        return m_senderAddr;
                    }

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    inline eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr()
                    {
                        return m_senderAddr;
                    }
                    /*!
                     * @brief This function sets a value in member timestampNs
                     * @param _timestampNs New value for member timestampNs
                     */
                    inline eProsima_user_DllExport void timestampNs(int64_t _timestampNs)
                    {
                        m_timestampNs = _timestampNs;
                    }

                    /*!
                     * @brief This function returns the value of member timestampNs
                     * @return Value of member timestampNs
                     */
                    inline eProsima_user_DllExport int64_t timestampNs() const
                    {
                        return m_timestampNs;
                    }

                    /*!
                     * @brief This function returns a reference to member timestampNs
                     * @return Reference to member timestampNs
                     */
                    inline eProsima_user_DllExport int64_t& timestampNs()
                    {
                        return m_timestampNs;
                    }
                    /*!
                     * @brief This function copies the value in member value
                     * @param _value New value to be copied in member value
                     */
                    inline eProsima_user_DllExport void value(const std::vector<uint8_t> &_value)
                    {
                        m_value = _value;
                    }

                    /*!
                     * @brief This function moves the value in member value
                     * @param _value New value to be moved in member value
                     */
                    inline eProsima_user_DllExport void value(std::vector<uint8_t> &&_value)
                    {
                        m_value = std::move(_value);
                    }

                    /*!
                     * @brief This function returns a constant reference to member value
                     * @return Constant reference to member value
                     */
                    inline eProsima_user_DllExport const std::vector<uint8_t>& value() const
                    {
                        return m_value;
                    }

                    /*!
                     * @brief This function returns a reference to member value
                     * @return Reference to member value
                     */
                    inline eProsima_user_DllExport std::vector<uint8_t>& value()
                    {
                        return m_value;
                    }

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::io::idl::PatternIoMessage& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    int64_t m_timestampNs;
                    std::vector<uint8_t> m_value;
                };
                /*!
                 * @brief This class represents the structure PwmValue defined by the user in the IDL file.
                 * @ingroup IOTOPICS
                 */
                class PwmValue
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport PwmValue();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~PwmValue();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::io::idl::PwmValue that will be copied.
                     */
                    eProsima_user_DllExport PwmValue(const PwmValue &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::io::idl::PwmValue that will be copied.
                     */
                    eProsima_user_DllExport PwmValue(PwmValue &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::io::idl::PwmValue that will be copied.
                     */
                    eProsima_user_DllExport PwmValue& operator=(const PwmValue &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::io::idl::PwmValue that will be copied.
                     */
                    eProsima_user_DllExport PwmValue& operator=(PwmValue &&x);

                    /*!
                     * @brief This function sets a value in member frequency
                     * @param _frequency New value for member frequency
                     */
                    inline eProsima_user_DllExport void frequency(double _frequency)
                    {
                        m_frequency = _frequency;
                    }

                    /*!
                     * @brief This function returns the value of member frequency
                     * @return Value of member frequency
                     */
                    inline eProsima_user_DllExport double frequency() const
                    {
                        return m_frequency;
                    }

                    /*!
                     * @brief This function returns a reference to member frequency
                     * @return Reference to member frequency
                     */
                    inline eProsima_user_DllExport double& frequency()
                    {
                        return m_frequency;
                    }
                    /*!
                     * @brief This function sets a value in member dutyCycle
                     * @param _dutyCycle New value for member dutyCycle
                     */
                    inline eProsima_user_DllExport void dutyCycle(double _dutyCycle)
                    {
                        m_dutyCycle = _dutyCycle;
                    }

                    /*!
                     * @brief This function returns the value of member dutyCycle
                     * @return Value of member dutyCycle
                     */
                    inline eProsima_user_DllExport double dutyCycle() const
                    {
                        return m_dutyCycle;
                    }

                    /*!
                     * @brief This function returns a reference to member dutyCycle
                     * @return Reference to member dutyCycle
                     */
                    inline eProsima_user_DllExport double& dutyCycle()
                    {
                        return m_dutyCycle;
                    }

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::io::idl::PwmValue& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    double m_frequency;
                    double m_dutyCycle;
                };
                /*!
                 * @brief This class represents the structure PwmIoMessage defined by the user in the IDL file.
                 * @ingroup IOTOPICS
                 */
                class PwmIoMessage
                {
                public:

                    /*!
                     * @brief Default constructor.
                     */
                    eProsima_user_DllExport PwmIoMessage();

                    /*!
                     * @brief Default destructor.
                     */
                    eProsima_user_DllExport ~PwmIoMessage();

                    /*!
                     * @brief Copy constructor.
                     * @param x Reference to the object ib::sim::io::idl::PwmIoMessage that will be copied.
                     */
                    eProsima_user_DllExport PwmIoMessage(const PwmIoMessage &x);

                    /*!
                     * @brief Move constructor.
                     * @param x Reference to the object ib::sim::io::idl::PwmIoMessage that will be copied.
                     */
                    eProsima_user_DllExport PwmIoMessage(PwmIoMessage &&x);

                    /*!
                     * @brief Copy assignment.
                     * @param x Reference to the object ib::sim::io::idl::PwmIoMessage that will be copied.
                     */
                    eProsima_user_DllExport PwmIoMessage& operator=(const PwmIoMessage &x);

                    /*!
                     * @brief Move assignment.
                     * @param x Reference to the object ib::sim::io::idl::PwmIoMessage that will be copied.
                     */
                    eProsima_user_DllExport PwmIoMessage& operator=(PwmIoMessage &&x);

                    /*!
                     * @brief This function copies the value in member senderAddr
                     * @param _senderAddr New value to be copied in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(const ib::mw::idl::EndpointAddress &_senderAddr)
                    {
                        m_senderAddr = _senderAddr;
                    }

                    /*!
                     * @brief This function moves the value in member senderAddr
                     * @param _senderAddr New value to be moved in member senderAddr
                     */
                    inline eProsima_user_DllExport void senderAddr(ib::mw::idl::EndpointAddress &&_senderAddr)
                    {
                        m_senderAddr = std::move(_senderAddr);
                    }

                    /*!
                     * @brief This function returns a constant reference to member senderAddr
                     * @return Constant reference to member senderAddr
                     */
                    inline eProsima_user_DllExport const ib::mw::idl::EndpointAddress& senderAddr() const
                    {
                        return m_senderAddr;
                    }

                    /*!
                     * @brief This function returns a reference to member senderAddr
                     * @return Reference to member senderAddr
                     */
                    inline eProsima_user_DllExport ib::mw::idl::EndpointAddress& senderAddr()
                    {
                        return m_senderAddr;
                    }
                    /*!
                     * @brief This function sets a value in member timestampNs
                     * @param _timestampNs New value for member timestampNs
                     */
                    inline eProsima_user_DllExport void timestampNs(int64_t _timestampNs)
                    {
                        m_timestampNs = _timestampNs;
                    }

                    /*!
                     * @brief This function returns the value of member timestampNs
                     * @return Value of member timestampNs
                     */
                    inline eProsima_user_DllExport int64_t timestampNs() const
                    {
                        return m_timestampNs;
                    }

                    /*!
                     * @brief This function returns a reference to member timestampNs
                     * @return Reference to member timestampNs
                     */
                    inline eProsima_user_DllExport int64_t& timestampNs()
                    {
                        return m_timestampNs;
                    }
                    /*!
                     * @brief This function copies the value in member value
                     * @param _value New value to be copied in member value
                     */
                    inline eProsima_user_DllExport void value(const ib::sim::io::idl::PwmValue &_value)
                    {
                        m_value = _value;
                    }

                    /*!
                     * @brief This function moves the value in member value
                     * @param _value New value to be moved in member value
                     */
                    inline eProsima_user_DllExport void value(ib::sim::io::idl::PwmValue &&_value)
                    {
                        m_value = std::move(_value);
                    }

                    /*!
                     * @brief This function returns a constant reference to member value
                     * @return Constant reference to member value
                     */
                    inline eProsima_user_DllExport const ib::sim::io::idl::PwmValue& value() const
                    {
                        return m_value;
                    }

                    /*!
                     * @brief This function returns a reference to member value
                     * @return Reference to member value
                     */
                    inline eProsima_user_DllExport ib::sim::io::idl::PwmValue& value()
                    {
                        return m_value;
                    }

                    /*!
                     * @brief This function returns the maximum serialized size of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function returns the serialized size of a data depending on the buffer alignment.
                     * @param data Data which is calculated its serialized size.
                     * @param current_alignment Buffer alignment.
                     * @return Serialized size.
                     */
                    eProsima_user_DllExport static size_t getCdrSerializedSize(const ib::sim::io::idl::PwmIoMessage& data, size_t current_alignment = 0);


                    /*!
                     * @brief This function serializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serialize(eprosima::fastcdr::Cdr &cdr) const;

                    /*!
                     * @brief This function deserializes an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void deserialize(eprosima::fastcdr::Cdr &cdr);



                    /*!
                     * @brief This function returns the maximum serialized size of the Key of an object
                     * depending on the buffer alignment.
                     * @param current_alignment Buffer alignment.
                     * @return Maximum serialized size.
                     */
                    eProsima_user_DllExport static size_t getKeyMaxCdrSerializedSize(size_t current_alignment = 0);

                    /*!
                     * @brief This function tells you if the Key has been defined for this type
                     */
                    eProsima_user_DllExport static bool isKeyDefined();

                    /*!
                     * @brief This function serializes the key members of an object using CDR serialization.
                     * @param cdr CDR serialization object.
                     */
                    eProsima_user_DllExport void serializeKey(eprosima::fastcdr::Cdr &cdr) const;

                private:
                    ib::mw::idl::EndpointAddress m_senderAddr;
                    int64_t m_timestampNs;
                    ib::sim::io::idl::PwmValue m_value;
                };
            }
        }
    }
}

#endif // _IB_SIM_IO_IDL_IOTOPICS_H_