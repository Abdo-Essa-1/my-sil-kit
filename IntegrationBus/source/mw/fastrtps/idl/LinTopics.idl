#include "Common.idl"

module ib {
module sim {
module lin {
module idl {

    typedef octet LinIdT;

    enum ChecksumModel
    {
        Undefined,
        Enhanced,
        Classic
    };
    
    typedef octet DataLengthT;

    struct Frame
    {
        LinIdT        id;
        ChecksumModel checksumModel;
        DataLengthT   dataLength;
        octet         data[8];
    };

    enum FrameResponseType
    {
        MasterResponse,
        SlaveResponse,
        SlaveToSlave
    };
    
    enum FrameResponseMode
    {
        Unused,
        Rx,
        TxUnconditional
    };

    enum FrameStatus
    {
        NOT_OK,
        LIN_TX_OK,
        LIN_TX_BUSY,
        LIN_TX_HEADER_ERROR,
        LIN_TX_ERROR,
        LIN_RX_OK,
        LIN_RX_BUSY,
        LIN_RX_ERROR,
        LIN_RX_NO_RESPONSE
    };
    
    struct FrameResponse
    {
        Frame frame;
        FrameResponseMode responseMode;
    };
    
    enum ControllerMode
    {
        Inactive,
        Master,
        Slave
    };

    typedef unsigned long BaudRateT;

    struct ControllerConfig
    {
        @Key ib::mw::idl::EndpointAddress senderAddr;
        
        ControllerMode controllerMode;
        BaudRateT baudRate;
        sequence<FrameResponse> frameResponses; 
    };

    enum ControllerStatus
    {
        Unknown,
        Operational,
        Sleep
    };

    struct Transmission
    {
        @Key ib::mw::idl::EndpointAddress senderAddr;
        
        long long timestampNs;
        Frame frame;
        FrameStatus status;
    };

    struct SendFrameRequest
    {
        @Key ib::mw::idl::EndpointAddress senderAddr;
        
        Frame frame;
        FrameResponseType responseType;
    };

    struct SendFrameHeaderRequest
    {
        @Key ib::mw::idl::EndpointAddress senderAddr;
        
        LinIdT id;
    };

    
    struct FrameResponseUpdate
    {
        @Key ib::mw::idl::EndpointAddress senderAddr;
        
        sequence<FrameResponse> frameResponses;
    };

    struct ControllerStatusUpdate
    {
        @Key ib::mw::idl::EndpointAddress senderAddr;
        
        long long timestampNs;
        ControllerStatus status;
    };

    struct WakeupPulse
    {
        @Key ib::mw::idl::EndpointAddress senderAddr;
        
        long long timestampNs;
    };
    

};
};
};
};
