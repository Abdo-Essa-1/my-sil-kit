// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file MiddlewareTopicsPubSubTypes.cpp
 * This header file contains the implementation of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

#include "MiddlewareTopicsPubSubTypes.h"

using namespace eprosima::fastrtps;
using namespace eprosima::fastrtps::rtps;

namespace ib
{
    namespace mw
    {
        namespace sync
        {
            namespace idl
            {
                QuantumRequestPubSubType::QuantumRequestPubSubType() {
                    setName("ib::mw::sync::idl::QuantumRequest");
                    m_typeSize = (uint32_t)QuantumRequest::getMaxCdrSerializedSize() + 4 /*encapsulation*/;
                    m_isGetKeyDefined = QuantumRequest::isKeyDefined();
                    m_keyBuffer = (unsigned char*)malloc(QuantumRequest::getKeyMaxCdrSerializedSize()>16 ? QuantumRequest::getKeyMaxCdrSerializedSize() : 16);
                }

                QuantumRequestPubSubType::~QuantumRequestPubSubType() {
                    if(m_keyBuffer!=nullptr)
                        free(m_keyBuffer);
                }

                bool QuantumRequestPubSubType::serialize(void *data, SerializedPayload_t *payload) {
                    QuantumRequest *p_type = (QuantumRequest*) data;
                    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload->data, payload->max_size); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
                    payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
                    // Serialize encapsulation
                    ser.serialize_encapsulation();

                    try
                    {
                        p_type->serialize(ser); // Serialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    payload->length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
                    return true;
                }

                bool QuantumRequestPubSubType::deserialize(SerializedPayload_t* payload, void* data) {
                    QuantumRequest* p_type = (QuantumRequest*) data; 	//Convert DATA to pointer of your type
                    eprosima::fastcdr::FastBuffer fastbuffer((char*)payload->data, payload->length); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
                    // Deserialize encapsulation.
                    deser.read_encapsulation();
                    payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

                    try
                    {
                        p_type->deserialize(deser); //Deserialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    return true;
                }

                std::function<uint32_t()> QuantumRequestPubSubType::getSerializedSizeProvider(void* data) {
                    return [data]() -> uint32_t
                    {
                        return (uint32_t)type::getCdrSerializedSize(*static_cast<QuantumRequest*>(data)) + 4 /*encapsulation*/;
                    };
                }

                void* QuantumRequestPubSubType::createData() {
                    return (void*)new QuantumRequest();
                }

                void QuantumRequestPubSubType::deleteData(void* data) {
                    delete((QuantumRequest*)data);
                }

                bool QuantumRequestPubSubType::getKey(void *data, InstanceHandle_t* handle) {
                    if(!m_isGetKeyDefined)
                        return false;
                    QuantumRequest* p_type = (QuantumRequest*) data;
                    eprosima::fastcdr::FastBuffer fastbuffer((char*)m_keyBuffer,QuantumRequest::getKeyMaxCdrSerializedSize()); 	// Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS); 	// Object that serializes the data.
                    p_type->serializeKey(ser);
                    if(QuantumRequest::getKeyMaxCdrSerializedSize()>16)	{
                        m_md5.init();
                        m_md5.update(m_keyBuffer,(unsigned int)ser.getSerializedDataLength());
                        m_md5.finalize();
                        for(uint8_t i = 0;i<16;++i)    	{
                            handle->value[i] = m_md5.digest[i];
                        }
                    }
                    else    {
                        for(uint8_t i = 0;i<16;++i)    	{
                            handle->value[i] = m_keyBuffer[i];
                        }
                    }
                    return true;
                }


                QuantumGrantPubSubType::QuantumGrantPubSubType() {
                    setName("ib::mw::sync::idl::QuantumGrant");
                    m_typeSize = (uint32_t)QuantumGrant::getMaxCdrSerializedSize() + 4 /*encapsulation*/;
                    m_isGetKeyDefined = QuantumGrant::isKeyDefined();
                    m_keyBuffer = (unsigned char*)malloc(QuantumGrant::getKeyMaxCdrSerializedSize()>16 ? QuantumGrant::getKeyMaxCdrSerializedSize() : 16);
                }

                QuantumGrantPubSubType::~QuantumGrantPubSubType() {
                    if(m_keyBuffer!=nullptr)
                        free(m_keyBuffer);
                }

                bool QuantumGrantPubSubType::serialize(void *data, SerializedPayload_t *payload) {
                    QuantumGrant *p_type = (QuantumGrant*) data;
                    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload->data, payload->max_size); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
                    payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
                    // Serialize encapsulation
                    ser.serialize_encapsulation();

                    try
                    {
                        p_type->serialize(ser); // Serialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    payload->length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
                    return true;
                }

                bool QuantumGrantPubSubType::deserialize(SerializedPayload_t* payload, void* data) {
                    QuantumGrant* p_type = (QuantumGrant*) data; 	//Convert DATA to pointer of your type
                    eprosima::fastcdr::FastBuffer fastbuffer((char*)payload->data, payload->length); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
                    // Deserialize encapsulation.
                    deser.read_encapsulation();
                    payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

                    try
                    {
                        p_type->deserialize(deser); //Deserialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    return true;
                }

                std::function<uint32_t()> QuantumGrantPubSubType::getSerializedSizeProvider(void* data) {
                    return [data]() -> uint32_t
                    {
                        return (uint32_t)type::getCdrSerializedSize(*static_cast<QuantumGrant*>(data)) + 4 /*encapsulation*/;
                    };
                }

                void* QuantumGrantPubSubType::createData() {
                    return (void*)new QuantumGrant();
                }

                void QuantumGrantPubSubType::deleteData(void* data) {
                    delete((QuantumGrant*)data);
                }

                bool QuantumGrantPubSubType::getKey(void *data, InstanceHandle_t* handle) {
                    if(!m_isGetKeyDefined)
                        return false;
                    QuantumGrant* p_type = (QuantumGrant*) data;
                    eprosima::fastcdr::FastBuffer fastbuffer((char*)m_keyBuffer,QuantumGrant::getKeyMaxCdrSerializedSize()); 	// Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS); 	// Object that serializes the data.
                    p_type->serializeKey(ser);
                    if(QuantumGrant::getKeyMaxCdrSerializedSize()>16)	{
                        m_md5.init();
                        m_md5.update(m_keyBuffer,(unsigned int)ser.getSerializedDataLength());
                        m_md5.finalize();
                        for(uint8_t i = 0;i<16;++i)    	{
                            handle->value[i] = m_md5.digest[i];
                        }
                    }
                    else    {
                        for(uint8_t i = 0;i<16;++i)    	{
                            handle->value[i] = m_keyBuffer[i];
                        }
                    }
                    return true;
                }

                TickPubSubType::TickPubSubType() {
                    setName("ib::mw::sync::idl::Tick");
                    m_typeSize = (uint32_t)Tick::getMaxCdrSerializedSize() + 4 /*encapsulation*/;
                    m_isGetKeyDefined = Tick::isKeyDefined();
                    m_keyBuffer = (unsigned char*)malloc(Tick::getKeyMaxCdrSerializedSize()>16 ? Tick::getKeyMaxCdrSerializedSize() : 16);
                }

                TickPubSubType::~TickPubSubType() {
                    if(m_keyBuffer!=nullptr)
                        free(m_keyBuffer);
                }

                bool TickPubSubType::serialize(void *data, SerializedPayload_t *payload) {
                    Tick *p_type = (Tick*) data;
                    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload->data, payload->max_size); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
                    payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
                    // Serialize encapsulation
                    ser.serialize_encapsulation();

                    try
                    {
                        p_type->serialize(ser); // Serialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    payload->length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
                    return true;
                }

                bool TickPubSubType::deserialize(SerializedPayload_t* payload, void* data) {
                    Tick* p_type = (Tick*) data; 	//Convert DATA to pointer of your type
                    eprosima::fastcdr::FastBuffer fastbuffer((char*)payload->data, payload->length); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
                    // Deserialize encapsulation.
                    deser.read_encapsulation();
                    payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

                    try
                    {
                        p_type->deserialize(deser); //Deserialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    return true;
                }

                std::function<uint32_t()> TickPubSubType::getSerializedSizeProvider(void* data) {
                    return [data]() -> uint32_t
                    {
                        return (uint32_t)type::getCdrSerializedSize(*static_cast<Tick*>(data)) + 4 /*encapsulation*/;
                    };
                }

                void* TickPubSubType::createData() {
                    return (void*)new Tick();
                }

                void TickPubSubType::deleteData(void* data) {
                    delete((Tick*)data);
                }

                bool TickPubSubType::getKey(void *data, InstanceHandle_t* handle) {
                    if(!m_isGetKeyDefined)
                        return false;
                    Tick* p_type = (Tick*) data;
                    eprosima::fastcdr::FastBuffer fastbuffer((char*)m_keyBuffer,Tick::getKeyMaxCdrSerializedSize()); 	// Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS); 	// Object that serializes the data.
                    p_type->serializeKey(ser);
                    if(Tick::getKeyMaxCdrSerializedSize()>16)	{
                        m_md5.init();
                        m_md5.update(m_keyBuffer,(unsigned int)ser.getSerializedDataLength());
                        m_md5.finalize();
                        for(uint8_t i = 0;i<16;++i)    	{
                            handle->value[i] = m_md5.digest[i];
                        }
                    }
                    else    {
                        for(uint8_t i = 0;i<16;++i)    	{
                            handle->value[i] = m_keyBuffer[i];
                        }
                    }
                    return true;
                }

                TickDonePubSubType::TickDonePubSubType() {
                    setName("ib::mw::sync::idl::TickDone");
                    m_typeSize = (uint32_t)TickDone::getMaxCdrSerializedSize() + 4 /*encapsulation*/;
                    m_isGetKeyDefined = TickDone::isKeyDefined();
                    m_keyBuffer = (unsigned char*)malloc(TickDone::getKeyMaxCdrSerializedSize()>16 ? TickDone::getKeyMaxCdrSerializedSize() : 16);
                }

                TickDonePubSubType::~TickDonePubSubType() {
                    if(m_keyBuffer!=nullptr)
                        free(m_keyBuffer);
                }

                bool TickDonePubSubType::serialize(void *data, SerializedPayload_t *payload) {
                    TickDone *p_type = (TickDone*) data;
                    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload->data, payload->max_size); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
                    payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
                    // Serialize encapsulation
                    ser.serialize_encapsulation();

                    try
                    {
                        p_type->serialize(ser); // Serialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    payload->length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
                    return true;
                }

                bool TickDonePubSubType::deserialize(SerializedPayload_t* payload, void* data) {
                    TickDone* p_type = (TickDone*) data; 	//Convert DATA to pointer of your type
                    eprosima::fastcdr::FastBuffer fastbuffer((char*)payload->data, payload->length); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
                    // Deserialize encapsulation.
                    deser.read_encapsulation();
                    payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

                    try
                    {
                        p_type->deserialize(deser); //Deserialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    return true;
                }

                std::function<uint32_t()> TickDonePubSubType::getSerializedSizeProvider(void* data) {
                    return [data]() -> uint32_t
                    {
                        return (uint32_t)type::getCdrSerializedSize(*static_cast<TickDone*>(data)) + 4 /*encapsulation*/;
                    };
                }

                void* TickDonePubSubType::createData() {
                    return (void*)new TickDone();
                }

                void TickDonePubSubType::deleteData(void* data) {
                    delete((TickDone*)data);
                }

                bool TickDonePubSubType::getKey(void *data, InstanceHandle_t* handle) {
                    if(!m_isGetKeyDefined)
                        return false;
                    TickDone* p_type = (TickDone*) data;
                    eprosima::fastcdr::FastBuffer fastbuffer((char*)m_keyBuffer,TickDone::getKeyMaxCdrSerializedSize()); 	// Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS); 	// Object that serializes the data.
                    p_type->serializeKey(ser);
                    if(TickDone::getKeyMaxCdrSerializedSize()>16)	{
                        m_md5.init();
                        m_md5.update(m_keyBuffer,(unsigned int)ser.getSerializedDataLength());
                        m_md5.finalize();
                        for(uint8_t i = 0;i<16;++i)    	{
                            handle->value[i] = m_md5.digest[i];
                        }
                    }
                    else    {
                        for(uint8_t i = 0;i<16;++i)    	{
                            handle->value[i] = m_keyBuffer[i];
                        }
                    }
                    return true;
                }


                ParticipantCommandPubSubType::ParticipantCommandPubSubType() {
                    setName("ib::mw::sync::idl::ParticipantCommand");
                    m_typeSize = (uint32_t)ParticipantCommand::getMaxCdrSerializedSize() + 4 /*encapsulation*/;
                    m_isGetKeyDefined = ParticipantCommand::isKeyDefined();
                    m_keyBuffer = (unsigned char*)malloc(ParticipantCommand::getKeyMaxCdrSerializedSize()>16 ? ParticipantCommand::getKeyMaxCdrSerializedSize() : 16);
                }

                ParticipantCommandPubSubType::~ParticipantCommandPubSubType() {
                    if(m_keyBuffer!=nullptr)
                        free(m_keyBuffer);
                }

                bool ParticipantCommandPubSubType::serialize(void *data, SerializedPayload_t *payload) {
                    ParticipantCommand *p_type = (ParticipantCommand*) data;
                    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload->data, payload->max_size); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
                    payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
                    // Serialize encapsulation
                    ser.serialize_encapsulation();

                    try
                    {
                        p_type->serialize(ser); // Serialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    payload->length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
                    return true;
                }

                bool ParticipantCommandPubSubType::deserialize(SerializedPayload_t* payload, void* data) {
                    ParticipantCommand* p_type = (ParticipantCommand*) data; 	//Convert DATA to pointer of your type
                    eprosima::fastcdr::FastBuffer fastbuffer((char*)payload->data, payload->length); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
                    // Deserialize encapsulation.
                    deser.read_encapsulation();
                    payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

                    try
                    {
                        p_type->deserialize(deser); //Deserialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    return true;
                }

                std::function<uint32_t()> ParticipantCommandPubSubType::getSerializedSizeProvider(void* data) {
                    return [data]() -> uint32_t
                    {
                        return (uint32_t)type::getCdrSerializedSize(*static_cast<ParticipantCommand*>(data)) + 4 /*encapsulation*/;
                    };
                }

                void* ParticipantCommandPubSubType::createData() {
                    return (void*)new ParticipantCommand();
                }

                void ParticipantCommandPubSubType::deleteData(void* data) {
                    delete((ParticipantCommand*)data);
                }

                bool ParticipantCommandPubSubType::getKey(void *data, InstanceHandle_t* handle) {
                    if(!m_isGetKeyDefined)
                        return false;
                    ParticipantCommand* p_type = (ParticipantCommand*) data;
                    eprosima::fastcdr::FastBuffer fastbuffer((char*)m_keyBuffer,ParticipantCommand::getKeyMaxCdrSerializedSize()); 	// Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS); 	// Object that serializes the data.
                    p_type->serializeKey(ser);
                    if(ParticipantCommand::getKeyMaxCdrSerializedSize()>16)	{
                        m_md5.init();
                        m_md5.update(m_keyBuffer,(unsigned int)ser.getSerializedDataLength());
                        m_md5.finalize();
                        for(uint8_t i = 0;i<16;++i)    	{
                            handle->value[i] = m_md5.digest[i];
                        }
                    }
                    else    {
                        for(uint8_t i = 0;i<16;++i)    	{
                            handle->value[i] = m_keyBuffer[i];
                        }
                    }
                    return true;
                }


                SystemCommandPubSubType::SystemCommandPubSubType() {
                    setName("ib::mw::sync::idl::SystemCommand");
                    m_typeSize = (uint32_t)SystemCommand::getMaxCdrSerializedSize() + 4 /*encapsulation*/;
                    m_isGetKeyDefined = SystemCommand::isKeyDefined();
                    m_keyBuffer = (unsigned char*)malloc(SystemCommand::getKeyMaxCdrSerializedSize()>16 ? SystemCommand::getKeyMaxCdrSerializedSize() : 16);
                }

                SystemCommandPubSubType::~SystemCommandPubSubType() {
                    if(m_keyBuffer!=nullptr)
                        free(m_keyBuffer);
                }

                bool SystemCommandPubSubType::serialize(void *data, SerializedPayload_t *payload) {
                    SystemCommand *p_type = (SystemCommand*) data;
                    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload->data, payload->max_size); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
                    payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
                    // Serialize encapsulation
                    ser.serialize_encapsulation();

                    try
                    {
                        p_type->serialize(ser); // Serialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    payload->length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
                    return true;
                }

                bool SystemCommandPubSubType::deserialize(SerializedPayload_t* payload, void* data) {
                    SystemCommand* p_type = (SystemCommand*) data; 	//Convert DATA to pointer of your type
                    eprosima::fastcdr::FastBuffer fastbuffer((char*)payload->data, payload->length); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
                    // Deserialize encapsulation.
                    deser.read_encapsulation();
                    payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

                    try
                    {
                        p_type->deserialize(deser); //Deserialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    return true;
                }

                std::function<uint32_t()> SystemCommandPubSubType::getSerializedSizeProvider(void* data) {
                    return [data]() -> uint32_t
                    {
                        return (uint32_t)type::getCdrSerializedSize(*static_cast<SystemCommand*>(data)) + 4 /*encapsulation*/;
                    };
                }

                void* SystemCommandPubSubType::createData() {
                    return (void*)new SystemCommand();
                }

                void SystemCommandPubSubType::deleteData(void* data) {
                    delete((SystemCommand*)data);
                }

                bool SystemCommandPubSubType::getKey(void *data, InstanceHandle_t* handle) {
                    if(!m_isGetKeyDefined)
                        return false;
                    SystemCommand* p_type = (SystemCommand*) data;
                    eprosima::fastcdr::FastBuffer fastbuffer((char*)m_keyBuffer,SystemCommand::getKeyMaxCdrSerializedSize()); 	// Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS); 	// Object that serializes the data.
                    p_type->serializeKey(ser);
                    if(SystemCommand::getKeyMaxCdrSerializedSize()>16)	{
                        m_md5.init();
                        m_md5.update(m_keyBuffer,(unsigned int)ser.getSerializedDataLength());
                        m_md5.finalize();
                        for(uint8_t i = 0;i<16;++i)    	{
                            handle->value[i] = m_md5.digest[i];
                        }
                    }
                    else    {
                        for(uint8_t i = 0;i<16;++i)    	{
                            handle->value[i] = m_keyBuffer[i];
                        }
                    }
                    return true;
                }


                ParticipantStatusPubSubType::ParticipantStatusPubSubType() {
                    setName("ib::mw::sync::idl::ParticipantStatus");
                    m_typeSize = (uint32_t)ParticipantStatus::getMaxCdrSerializedSize() + 4 /*encapsulation*/;
                    m_isGetKeyDefined = ParticipantStatus::isKeyDefined();
                    m_keyBuffer = (unsigned char*)malloc(ParticipantStatus::getKeyMaxCdrSerializedSize()>16 ? ParticipantStatus::getKeyMaxCdrSerializedSize() : 16);
                }

                ParticipantStatusPubSubType::~ParticipantStatusPubSubType() {
                    if(m_keyBuffer!=nullptr)
                        free(m_keyBuffer);
                }

                bool ParticipantStatusPubSubType::serialize(void *data, SerializedPayload_t *payload) {
                    ParticipantStatus *p_type = (ParticipantStatus*) data;
                    eprosima::fastcdr::FastBuffer fastbuffer((char*) payload->data, payload->max_size); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
                    payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
                    // Serialize encapsulation
                    ser.serialize_encapsulation();

                    try
                    {
                        p_type->serialize(ser); // Serialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    payload->length = (uint32_t)ser.getSerializedDataLength(); //Get the serialized length
                    return true;
                }

                bool ParticipantStatusPubSubType::deserialize(SerializedPayload_t* payload, void* data) {
                    ParticipantStatus* p_type = (ParticipantStatus*) data; 	//Convert DATA to pointer of your type
                    eprosima::fastcdr::FastBuffer fastbuffer((char*)payload->data, payload->length); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
                    // Deserialize encapsulation.
                    deser.read_encapsulation();
                    payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

                    try
                    {
                        p_type->deserialize(deser); //Deserialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    return true;
                }

                std::function<uint32_t()> ParticipantStatusPubSubType::getSerializedSizeProvider(void* data) {
                    return [data]() -> uint32_t
                    {
                        return (uint32_t)type::getCdrSerializedSize(*static_cast<ParticipantStatus*>(data)) + 4 /*encapsulation*/;
                    };
                }

                void* ParticipantStatusPubSubType::createData() {
                    return (void*)new ParticipantStatus();
                }

                void ParticipantStatusPubSubType::deleteData(void* data) {
                    delete((ParticipantStatus*)data);
                }

                bool ParticipantStatusPubSubType::getKey(void *data, InstanceHandle_t* handle) {
                    if(!m_isGetKeyDefined)
                        return false;
                    ParticipantStatus* p_type = (ParticipantStatus*) data;
                    eprosima::fastcdr::FastBuffer fastbuffer((char*)m_keyBuffer,ParticipantStatus::getKeyMaxCdrSerializedSize()); 	// Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS); 	// Object that serializes the data.
                    p_type->serializeKey(ser);
                    if(ParticipantStatus::getKeyMaxCdrSerializedSize()>16)	{
                        m_md5.init();
                        m_md5.update(m_keyBuffer,(unsigned int)ser.getSerializedDataLength());
                        m_md5.finalize();
                        for(uint8_t i = 0;i<16;++i)    	{
                            handle->value[i] = m_md5.digest[i];
                        }
                    }
                    else    {
                        for(uint8_t i = 0;i<16;++i)    	{
                            handle->value[i] = m_keyBuffer[i];
                        }
                    }
                    return true;
                }



            } //End of namespace idl

        } //End of namespace sync

    } //End of namespace mw

} //End of namespace ib
