// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file IoTopics.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "IoTopics.h"

#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

ib::sim::io::idl::AnalogIoMessage::AnalogIoMessage()
{

    m_timestampNs = 0;
    m_value = 0.0;
}

ib::sim::io::idl::AnalogIoMessage::~AnalogIoMessage()
{
}

ib::sim::io::idl::AnalogIoMessage::AnalogIoMessage(const AnalogIoMessage &x)
{
    m_senderAddr = x.m_senderAddr;
    m_timestampNs = x.m_timestampNs;
    m_value = x.m_value;
}

ib::sim::io::idl::AnalogIoMessage::AnalogIoMessage(AnalogIoMessage &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_timestampNs = x.m_timestampNs;
    m_value = x.m_value;
}

ib::sim::io::idl::AnalogIoMessage& ib::sim::io::idl::AnalogIoMessage::operator=(const AnalogIoMessage &x)
{
    m_senderAddr = x.m_senderAddr;
    m_timestampNs = x.m_timestampNs;
    m_value = x.m_value;
    
    return *this;
}

ib::sim::io::idl::AnalogIoMessage& ib::sim::io::idl::AnalogIoMessage::operator=(AnalogIoMessage &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_timestampNs = x.m_timestampNs;
    m_value = x.m_value;
    
    return *this;
}

size_t ib::sim::io::idl::AnalogIoMessage::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    return current_alignment - initial_alignment;
}

size_t ib::sim::io::idl::AnalogIoMessage::getCdrSerializedSize(const ib::sim::io::idl::AnalogIoMessage& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += ib::mw::idl::EndpointAddress::getCdrSerializedSize(data.senderAddr(), current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    return current_alignment - initial_alignment;
}

void ib::sim::io::idl::AnalogIoMessage::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_senderAddr;
    scdr << m_timestampNs;
    scdr << m_value;
}

void ib::sim::io::idl::AnalogIoMessage::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_senderAddr;
    dcdr >> m_timestampNs;
    dcdr >> m_value;
}

size_t ib::sim::io::idl::AnalogIoMessage::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            
     current_align += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_align); 



    return current_align;
}

bool ib::sim::io::idl::AnalogIoMessage::isKeyDefined()
{
    return true;
}

void ib::sim::io::idl::AnalogIoMessage::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 scdr << m_senderAddr;  
	 
	 
}
ib::sim::io::idl::DigitalIoMessage::DigitalIoMessage()
{

    m_timestampNs = 0;
    m_value = false;
}

ib::sim::io::idl::DigitalIoMessage::~DigitalIoMessage()
{
}

ib::sim::io::idl::DigitalIoMessage::DigitalIoMessage(const DigitalIoMessage &x)
{
    m_senderAddr = x.m_senderAddr;
    m_timestampNs = x.m_timestampNs;
    m_value = x.m_value;
}

ib::sim::io::idl::DigitalIoMessage::DigitalIoMessage(DigitalIoMessage &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_timestampNs = x.m_timestampNs;
    m_value = x.m_value;
}

ib::sim::io::idl::DigitalIoMessage& ib::sim::io::idl::DigitalIoMessage::operator=(const DigitalIoMessage &x)
{
    m_senderAddr = x.m_senderAddr;
    m_timestampNs = x.m_timestampNs;
    m_value = x.m_value;
    
    return *this;
}

ib::sim::io::idl::DigitalIoMessage& ib::sim::io::idl::DigitalIoMessage::operator=(DigitalIoMessage &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_timestampNs = x.m_timestampNs;
    m_value = x.m_value;
    
    return *this;
}

size_t ib::sim::io::idl::DigitalIoMessage::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

size_t ib::sim::io::idl::DigitalIoMessage::getCdrSerializedSize(const ib::sim::io::idl::DigitalIoMessage& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += ib::mw::idl::EndpointAddress::getCdrSerializedSize(data.senderAddr(), current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 1 + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);


    return current_alignment - initial_alignment;
}

void ib::sim::io::idl::DigitalIoMessage::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_senderAddr;
    scdr << m_timestampNs;
    scdr << m_value;
}

void ib::sim::io::idl::DigitalIoMessage::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_senderAddr;
    dcdr >> m_timestampNs;
    dcdr >> m_value;
}

size_t ib::sim::io::idl::DigitalIoMessage::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            
     current_align += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_align); 



    return current_align;
}

bool ib::sim::io::idl::DigitalIoMessage::isKeyDefined()
{
    return true;
}

void ib::sim::io::idl::DigitalIoMessage::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 scdr << m_senderAddr;  
	 
	 
}
ib::sim::io::idl::PatternIoMessage::PatternIoMessage()
{

    m_timestampNs = 0;

}

ib::sim::io::idl::PatternIoMessage::~PatternIoMessage()
{
}

ib::sim::io::idl::PatternIoMessage::PatternIoMessage(const PatternIoMessage &x)
{
    m_senderAddr = x.m_senderAddr;
    m_timestampNs = x.m_timestampNs;
    m_value = x.m_value;
}

ib::sim::io::idl::PatternIoMessage::PatternIoMessage(PatternIoMessage &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_timestampNs = x.m_timestampNs;
    m_value = std::move(x.m_value);
}

ib::sim::io::idl::PatternIoMessage& ib::sim::io::idl::PatternIoMessage::operator=(const PatternIoMessage &x)
{
    m_senderAddr = x.m_senderAddr;
    m_timestampNs = x.m_timestampNs;
    m_value = x.m_value;
    
    return *this;
}

ib::sim::io::idl::PatternIoMessage& ib::sim::io::idl::PatternIoMessage::operator=(PatternIoMessage &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_timestampNs = x.m_timestampNs;
    m_value = std::move(x.m_value);
    
    return *this;
}

size_t ib::sim::io::idl::PatternIoMessage::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    current_alignment += (100 * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

size_t ib::sim::io::idl::PatternIoMessage::getCdrSerializedSize(const ib::sim::io::idl::PatternIoMessage& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += ib::mw::idl::EndpointAddress::getCdrSerializedSize(data.senderAddr(), current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);
    current_alignment += (data.value().size() * 1) + eprosima::fastcdr::Cdr::alignment(current_alignment, 1);



    return current_alignment - initial_alignment;
}

void ib::sim::io::idl::PatternIoMessage::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_senderAddr;
    scdr << m_timestampNs;
    scdr << m_value;
}

void ib::sim::io::idl::PatternIoMessage::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_senderAddr;
    dcdr >> m_timestampNs;
    dcdr >> m_value;
}

size_t ib::sim::io::idl::PatternIoMessage::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            
     current_align += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_align); 



    return current_align;
}

bool ib::sim::io::idl::PatternIoMessage::isKeyDefined()
{
    return true;
}

void ib::sim::io::idl::PatternIoMessage::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 scdr << m_senderAddr;  
	 
	 
}
ib::sim::io::idl::PwmValue::PwmValue()
{
    m_frequency = 0.0;
    m_dutyCycle = 0.0;
}

ib::sim::io::idl::PwmValue::~PwmValue()
{
}

ib::sim::io::idl::PwmValue::PwmValue(const PwmValue &x)
{
    m_frequency = x.m_frequency;
    m_dutyCycle = x.m_dutyCycle;
}

ib::sim::io::idl::PwmValue::PwmValue(PwmValue &&x)
{
    m_frequency = x.m_frequency;
    m_dutyCycle = x.m_dutyCycle;
}

ib::sim::io::idl::PwmValue& ib::sim::io::idl::PwmValue::operator=(const PwmValue &x)
{
    m_frequency = x.m_frequency;
    m_dutyCycle = x.m_dutyCycle;
    
    return *this;
}

ib::sim::io::idl::PwmValue& ib::sim::io::idl::PwmValue::operator=(PwmValue &&x)
{
    m_frequency = x.m_frequency;
    m_dutyCycle = x.m_dutyCycle;
    
    return *this;
}

size_t ib::sim::io::idl::PwmValue::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    return current_alignment - initial_alignment;
}

size_t ib::sim::io::idl::PwmValue::getCdrSerializedSize(const ib::sim::io::idl::PwmValue& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    return current_alignment - initial_alignment;
}

void ib::sim::io::idl::PwmValue::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_frequency;
    scdr << m_dutyCycle;
}

void ib::sim::io::idl::PwmValue::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_frequency;
    dcdr >> m_dutyCycle;
}

size_t ib::sim::io::idl::PwmValue::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            



    return current_align;
}

bool ib::sim::io::idl::PwmValue::isKeyDefined()
{
    return false;
}

void ib::sim::io::idl::PwmValue::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
}
ib::sim::io::idl::PwmIoMessage::PwmIoMessage()
{

    m_timestampNs = 0;

}

ib::sim::io::idl::PwmIoMessage::~PwmIoMessage()
{
}

ib::sim::io::idl::PwmIoMessage::PwmIoMessage(const PwmIoMessage &x)
{
    m_senderAddr = x.m_senderAddr;
    m_timestampNs = x.m_timestampNs;
    m_value = x.m_value;
}

ib::sim::io::idl::PwmIoMessage::PwmIoMessage(PwmIoMessage &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_timestampNs = x.m_timestampNs;
    m_value = std::move(x.m_value);
}

ib::sim::io::idl::PwmIoMessage& ib::sim::io::idl::PwmIoMessage::operator=(const PwmIoMessage &x)
{
    m_senderAddr = x.m_senderAddr;
    m_timestampNs = x.m_timestampNs;
    m_value = x.m_value;
    
    return *this;
}

ib::sim::io::idl::PwmIoMessage& ib::sim::io::idl::PwmIoMessage::operator=(PwmIoMessage &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_timestampNs = x.m_timestampNs;
    m_value = std::move(x.m_value);
    
    return *this;
}

size_t ib::sim::io::idl::PwmIoMessage::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += ib::sim::io::idl::PwmValue::getMaxCdrSerializedSize(current_alignment);

    return current_alignment - initial_alignment;
}

size_t ib::sim::io::idl::PwmIoMessage::getCdrSerializedSize(const ib::sim::io::idl::PwmIoMessage& data, size_t current_alignment)
{
    size_t initial_alignment = current_alignment;
            
    current_alignment += ib::mw::idl::EndpointAddress::getCdrSerializedSize(data.senderAddr(), current_alignment);
    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);

    current_alignment += ib::sim::io::idl::PwmValue::getCdrSerializedSize(data.value(), current_alignment);

    return current_alignment - initial_alignment;
}

void ib::sim::io::idl::PwmIoMessage::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_senderAddr;
    scdr << m_timestampNs;
    scdr << m_value;
}

void ib::sim::io::idl::PwmIoMessage::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_senderAddr;
    dcdr >> m_timestampNs;
    dcdr >> m_value;
}

size_t ib::sim::io::idl::PwmIoMessage::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            
     current_align += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_align); 



    return current_align;
}

bool ib::sim::io::idl::PwmIoMessage::isKeyDefined()
{
    return true;
}

void ib::sim::io::idl::PwmIoMessage::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 scdr << m_senderAddr;  
	 
	 
}



