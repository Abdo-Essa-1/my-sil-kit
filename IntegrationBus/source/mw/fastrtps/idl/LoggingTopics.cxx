// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*! 
 * @file LoggingTopics.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace { char dummy; }
#endif

#include "LoggingTopics.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>


ib::mw::logging::idl::SourceLoc::SourceLoc()
{

    m_line = 0;



}

ib::mw::logging::idl::SourceLoc::~SourceLoc()
{
}

ib::mw::logging::idl::SourceLoc::SourceLoc(const SourceLoc &x)
{
    m_filename = x.m_filename;
    m_line = x.m_line;
    m_funcname = x.m_funcname;
}

ib::mw::logging::idl::SourceLoc::SourceLoc(SourceLoc &&x)
{
    m_filename = std::move(x.m_filename);
    m_line = x.m_line;
    m_funcname = std::move(x.m_funcname);
}

ib::mw::logging::idl::SourceLoc& ib::mw::logging::idl::SourceLoc::operator=(const SourceLoc &x)
{
    m_filename = x.m_filename;
    m_line = x.m_line;
    m_funcname = x.m_funcname;

    return *this;
}

ib::mw::logging::idl::SourceLoc& ib::mw::logging::idl::SourceLoc::operator=(SourceLoc &&x)
{
    m_filename = std::move(x.m_filename);
    m_line = x.m_line;
    m_funcname = std::move(x.m_funcname);

    return *this;
}

size_t ib::mw::logging::idl::SourceLoc::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t ib::mw::logging::idl::SourceLoc::getCdrSerializedSize(const ib::mw::logging::idl::SourceLoc& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.filename().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.funcname().size() + 1;


    return current_alignment - initial_alignment;
}

void ib::mw::logging::idl::SourceLoc::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_filename;
    scdr << m_line;
    scdr << m_funcname;
}

void ib::mw::logging::idl::SourceLoc::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_filename;
    dcdr >> m_line;
    dcdr >> m_funcname;
}

size_t ib::mw::logging::idl::SourceLoc::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            




    return current_align;
}

bool ib::mw::logging::idl::SourceLoc::isKeyDefined()
{
    return false;
}

void ib::mw::logging::idl::SourceLoc::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 
	 
	 
}
ib::mw::logging::idl::LogMsg::LogMsg()
{


    m_level = ib::mw::logging::idl::level::trace;

    m_timeUs = 0;

    m_thread_id = 0;

    m_msg_id = 0;




}

ib::mw::logging::idl::LogMsg::~LogMsg()
{
}

ib::mw::logging::idl::LogMsg::LogMsg(const LogMsg &x)
{
    m_senderAddr = x.m_senderAddr;
    m_logger_name = x.m_logger_name;
    m_level = x.m_level;
    m_timeUs = x.m_timeUs;
    m_thread_id = x.m_thread_id;
    m_msg_id = x.m_msg_id;
    m_source = x.m_source;
    m_payload = x.m_payload;
}

ib::mw::logging::idl::LogMsg::LogMsg(LogMsg &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_logger_name = std::move(x.m_logger_name);
    m_level = x.m_level;
    m_timeUs = x.m_timeUs;
    m_thread_id = x.m_thread_id;
    m_msg_id = x.m_msg_id;
    m_source = std::move(x.m_source);
    m_payload = std::move(x.m_payload);
}

ib::mw::logging::idl::LogMsg& ib::mw::logging::idl::LogMsg::operator=(const LogMsg &x)
{
    m_senderAddr = x.m_senderAddr;
    m_logger_name = x.m_logger_name;
    m_level = x.m_level;
    m_timeUs = x.m_timeUs;
    m_thread_id = x.m_thread_id;
    m_msg_id = x.m_msg_id;
    m_source = x.m_source;
    m_payload = x.m_payload;

    return *this;
}

ib::mw::logging::idl::LogMsg& ib::mw::logging::idl::LogMsg::operator=(LogMsg &&x)
{
    m_senderAddr = std::move(x.m_senderAddr);
    m_logger_name = std::move(x.m_logger_name);
    m_level = x.m_level;
    m_timeUs = x.m_timeUs;
    m_thread_id = x.m_thread_id;
    m_msg_id = x.m_msg_id;
    m_source = std::move(x.m_source);
    m_payload = std::move(x.m_payload);

    return *this;
}

size_t ib::mw::logging::idl::LogMsg::getMaxCdrSerializedSize(size_t current_alignment)
{
    size_t initial_alignment = current_alignment;

    current_alignment += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += ib::mw::logging::idl::SourceLoc::getMaxCdrSerializedSize(current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + 255 + 1;


    return current_alignment - initial_alignment;
}

size_t ib::mw::logging::idl::LogMsg::getCdrSerializedSize(const ib::mw::logging::idl::LogMsg& data, size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;

    current_alignment += ib::mw::idl::EndpointAddress::getCdrSerializedSize(data.senderAddr(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.logger_name().size() + 1;

    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += 8 + eprosima::fastcdr::Cdr::alignment(current_alignment, 8);


    current_alignment += ib::mw::logging::idl::SourceLoc::getCdrSerializedSize(data.source(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.payload().size() + 1;


    return current_alignment - initial_alignment;
}

void ib::mw::logging::idl::LogMsg::serialize(eprosima::fastcdr::Cdr &scdr) const
{
    scdr << m_senderAddr;
    scdr << m_logger_name;
    scdr << (uint32_t)m_level;
    scdr << m_timeUs;
    scdr << m_thread_id;
    scdr << m_msg_id;
    scdr << m_source;
    scdr << m_payload;
}

void ib::mw::logging::idl::LogMsg::deserialize(eprosima::fastcdr::Cdr &dcdr)
{
    dcdr >> m_senderAddr;
    dcdr >> m_logger_name;
    {
        uint32_t enum_value = 0;
        dcdr >> enum_value;
        m_level = (ib::mw::logging::idl::level::level_enum)enum_value;
    }
    dcdr >> m_timeUs;
    dcdr >> m_thread_id;
    dcdr >> m_msg_id;
    dcdr >> m_source;
    dcdr >> m_payload;
}

size_t ib::mw::logging::idl::LogMsg::getKeyMaxCdrSerializedSize(size_t current_alignment)
{
	size_t current_align = current_alignment;
            
     current_align += ib::mw::idl::EndpointAddress::getMaxCdrSerializedSize(current_align); 








    return current_align;
}

bool ib::mw::logging::idl::LogMsg::isKeyDefined()
{
    return true;
}

void ib::mw::logging::idl::LogMsg::serializeKey(eprosima::fastcdr::Cdr &scdr) const
{
	(void) scdr;
	 scdr << m_senderAddr;  
	 
	 
	 
	 
	 
	 
	 
}



