#include "Common.idl"

module ib {
module sim {
module eth {
module idl {

    /*! \Brief Tag Control Information (TCI), part of the VLAN tag
     */
    struct EthTagControlInformation
    {
        octet pcp; // Priority code point (0 lowest priority, 7 highest priority)
        octet dei; // Drop eligible indicator
        unsigned short vid; // VLAN identifier 
    };

    typedef unsigned long transmitIdT;

    /*! \brief Ethernet Messages
     *
     *  There are two usecass: with and without an Ethernet simulator
     *  1.) With Simulator:
     *      Controller proxy sends message to simulator; after arbitration and delay simulation,
     *      simulator sends message to all receiving controller proxies.
     * 2.) Without Simulator:
     *     Message is broadcasted from one controller to all others. In this case, the
     *     /busId/ determines if a controller should process a message or not.
     */
    struct EthMessage
    {
        @Key ib::mw::idl::EndpointAddress senderAddr;
        unsigned long transmitId;  // set by the Controller, used by Network Simulator for acks
        long long timestampNs;
        sequence<octet> rawFrame;
    };

    enum EthTransmitStatus
    {
        Transmitted,
        ErrorControllerInactive,
        ErrorLinkDown,
        ErrorDropped,
        ErrorDuplicatedTransmitId,
        InvalidFrameFormat
    };

    struct EthTransmitAcknowledge
    {
        @Key ib::mw::idl::EndpointAddress senderAddr;
        unsigned long transmitId; // identifies the EthTransmitRequest, to which this Acknowledge
        unsigned long long sourceMac; //The source MAC address encoded as integral datatype
        long long timestampNs;
        EthTransmitStatus status; // Status of the Eth Transmit Request
    };


// ================================================================================
//  The following topics are only relevant, when using a Network Simulator
// ================================================================================

    enum EthState
    {
        Inactive, // Controller is switched off (default after reset)
        LinkDown, // Controller is active, but a link to another Ethernet controller in not yet established
        LinkUp // Controller is active and the link to another Ethernet controller is established
    };

    struct EthStatus
    {
        @Key ib::mw::idl::EndpointAddress senderAddr;
        long long timestampNs;
        EthState state; // state of the Ethernet controller
        unsigned long bitRate; // Bit rate in kBit/sec of the link when in state LinkUp, otherwise zero.
    };

    enum EthMode
    {
        ModeInactive, // The controller is inactive (default after reset)
        ModeActive // The controller is active.
    };

    struct EthSetMode
    {
        @Key ib::mw::idl::EndpointAddress senderAddr;
        EthMode mode;
    };



};
};
};
};
