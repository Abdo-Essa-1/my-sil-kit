#include "Common.idl"

module ib {
module mw {
module sync {
module idl {


struct QuantumRequest
{
    @Key ib::mw::idl::EndpointAddress senderAddr;
    long long nowNs;
    long long durationNs;
};

enum QuantumRequestStatus
{
    QR_Invalid, //!< Conversion Error
    QR_Granted, //!< Request was granted.
    QR_Rejected //!< Request was rejected, e.g., due to a stop.
};

struct QuantumGrant
{
    ib::mw::idl::EndpointAddress senderAddr;
    @Key ib::mw::idl::EndpointAddress grantee;
    long long nowNs;
    long long durationNs;

    QuantumRequestStatus status;
};

struct Tick
{
    @Key ib::mw::idl::EndpointAddress senderAddr;
    long long nowNs;
};
struct TickDone
{
    @Key ib::mw::idl::EndpointAddress senderAddr;
};


enum ParticipantCommandKind {
    PC_Invalid,
    PC_Initialize,
    PC_ReInitialize
};

struct ParticipantCommand
{
    @Key ib::mw::idl::EndpointAddress senderAddr;
    ib::mw::idl::ParticipantIdT participant;
    ParticipantCommandKind kind;
};

enum SystemCommandKind {
    SC_Invalid,
    SC_Run,
    SC_Stop,
    SC_Shutdown,
    SC_PrepareColdswap,
    SC_ExecuteColdswap
};

struct SystemCommand
{
    @Key ib::mw::idl::EndpointAddress senderAddr;
    SystemCommandKind kind;
};

enum ParticipantState {
    PS_Invalid,
    PS_Idle,
    PS_Initializing,
    PS_Initialized,
    PS_Running,
    PS_Paused,
    PS_Stopping,
    PS_Stopped,
    PS_ColdswapPrepare,
    PS_ColdswapReady,
    PS_ColdswapShutdown,
    PS_ColdswapIgnored,
    PS_Error,
    PS_ShuttingDown,
    PS_Shutdown
};

struct ParticipantStatus
{
    @Key ib::mw::idl::EndpointAddress senderAddr;
    string participantName;
    ParticipantState state;
    string enterReason;
    
    long long enterTimeUs; // time since UNIX epoch in Microseconds
    long long refreshTimeUs; // time since UNIX epoch in Microseconds
};

enum SystemState {
    SS_Invalid,
    SS_Idle,
    SS_Initializing,
    SS_Initialized,
    SS_Running,
    SS_Paused,
    SS_Stopping,
    SS_Stopped,
    SS_ColdswapPrepare,
    SS_ColdswapReady,
    SS_ColdswapPending,
    SS_ColdswapDone,
    SS_Error,
    SS_ShuttingDown,
    SS_Shutdown
};

    
};
};
};
};
