// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file LinTopicsPubSubTypes.cpp
 * This header file contains the implementation of the serialization functions.
 *
 * This file was generated by the tool fastcdrgen.
 */


#include <fastcdr/FastBuffer.h>
#include <fastcdr/Cdr.h>

#include "LinTopicsPubSubTypes.h"

using namespace eprosima::fastrtps;
using namespace eprosima::fastrtps::rtps;

namespace ib
{
    namespace sim
    {
        namespace lin
        {
            namespace idl
            {



                FramePubSubType::FramePubSubType()
                {
                    setName("ib::sim::lin::idl::Frame");
                    m_typeSize = static_cast<uint32_t>(Frame::getMaxCdrSerializedSize()) + 4 /*encapsulation*/;
                    m_isGetKeyDefined = Frame::isKeyDefined();
                    size_t keyLength = Frame::getKeyMaxCdrSerializedSize()>16 ? Frame::getKeyMaxCdrSerializedSize() : 16;
                    m_keyBuffer = reinterpret_cast<unsigned char*>(malloc(keyLength));
                    memset(m_keyBuffer, 0, keyLength);
                }

                FramePubSubType::~FramePubSubType()
                {
                    if(m_keyBuffer!=nullptr)
                        free(m_keyBuffer);
                }

                bool FramePubSubType::serialize(void *data, SerializedPayload_t *payload)
                {
                    Frame *p_type = static_cast<Frame*>(data);
                    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->max_size); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
                    payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
                    // Serialize encapsulation
                    ser.serialize_encapsulation();

                    try
                    {
                        p_type->serialize(ser); // Serialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    payload->length = static_cast<uint32_t>(ser.getSerializedDataLength()); //Get the serialized length
                    return true;
                }

                bool FramePubSubType::deserialize(SerializedPayload_t* payload, void* data)
                {
                    Frame* p_type = static_cast<Frame*>(data); //Convert DATA to pointer of your type
                    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->length); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
                    // Deserialize encapsulation.
                    deser.read_encapsulation();
                    payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

                    try
                    {
                        p_type->deserialize(deser); //Deserialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    return true;
                }

                std::function<uint32_t()> FramePubSubType::getSerializedSizeProvider(void* data)
                {
                    return [data]() -> uint32_t
                    {
                        return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<Frame*>(data))) + 4 /*encapsulation*/;
                    };
                }

                void* FramePubSubType::createData()
                {
                    return reinterpret_cast<void*>(new Frame());
                }

                void FramePubSubType::deleteData(void* data)
                {
                    delete(reinterpret_cast<Frame*>(data));
                }

                bool FramePubSubType::getKey(void *data, InstanceHandle_t* handle, bool force_md5)
                {
                    if(!m_isGetKeyDefined)
                        return false;
                    Frame* p_type = static_cast<Frame*>(data);
                    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(m_keyBuffer),Frame::getKeyMaxCdrSerializedSize());     // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS);     // Object that serializes the data.
                    p_type->serializeKey(ser);
                    if(force_md5 || Frame::getKeyMaxCdrSerializedSize()>16)    {
                        m_md5.init();
                        m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));
                        m_md5.finalize();
                        for(uint8_t i = 0;i<16;++i)        {
                            handle->value[i] = m_md5.digest[i];
                        }
                    }
                    else    {
                        for(uint8_t i = 0;i<16;++i)        {
                            handle->value[i] = m_keyBuffer[i];
                        }
                    }
                    return true;
                }




                FrameResponsePubSubType::FrameResponsePubSubType()
                {
                    setName("ib::sim::lin::idl::FrameResponse");
                    m_typeSize = static_cast<uint32_t>(FrameResponse::getMaxCdrSerializedSize()) + 4 /*encapsulation*/;
                    m_isGetKeyDefined = FrameResponse::isKeyDefined();
                    size_t keyLength = FrameResponse::getKeyMaxCdrSerializedSize()>16 ? FrameResponse::getKeyMaxCdrSerializedSize() : 16;
                    m_keyBuffer = reinterpret_cast<unsigned char*>(malloc(keyLength));
                    memset(m_keyBuffer, 0, keyLength);
                }

                FrameResponsePubSubType::~FrameResponsePubSubType()
                {
                    if(m_keyBuffer!=nullptr)
                        free(m_keyBuffer);
                }

                bool FrameResponsePubSubType::serialize(void *data, SerializedPayload_t *payload)
                {
                    FrameResponse *p_type = static_cast<FrameResponse*>(data);
                    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->max_size); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
                    payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
                    // Serialize encapsulation
                    ser.serialize_encapsulation();

                    try
                    {
                        p_type->serialize(ser); // Serialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    payload->length = static_cast<uint32_t>(ser.getSerializedDataLength()); //Get the serialized length
                    return true;
                }

                bool FrameResponsePubSubType::deserialize(SerializedPayload_t* payload, void* data)
                {
                    FrameResponse* p_type = static_cast<FrameResponse*>(data); //Convert DATA to pointer of your type
                    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->length); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
                    // Deserialize encapsulation.
                    deser.read_encapsulation();
                    payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

                    try
                    {
                        p_type->deserialize(deser); //Deserialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    return true;
                }

                std::function<uint32_t()> FrameResponsePubSubType::getSerializedSizeProvider(void* data)
                {
                    return [data]() -> uint32_t
                    {
                        return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<FrameResponse*>(data))) + 4 /*encapsulation*/;
                    };
                }

                void* FrameResponsePubSubType::createData()
                {
                    return reinterpret_cast<void*>(new FrameResponse());
                }

                void FrameResponsePubSubType::deleteData(void* data)
                {
                    delete(reinterpret_cast<FrameResponse*>(data));
                }

                bool FrameResponsePubSubType::getKey(void *data, InstanceHandle_t* handle, bool force_md5)
                {
                    if(!m_isGetKeyDefined)
                        return false;
                    FrameResponse* p_type = static_cast<FrameResponse*>(data);
                    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(m_keyBuffer),FrameResponse::getKeyMaxCdrSerializedSize());     // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS);     // Object that serializes the data.
                    p_type->serializeKey(ser);
                    if(force_md5 || FrameResponse::getKeyMaxCdrSerializedSize()>16)    {
                        m_md5.init();
                        m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));
                        m_md5.finalize();
                        for(uint8_t i = 0;i<16;++i)        {
                            handle->value[i] = m_md5.digest[i];
                        }
                    }
                    else    {
                        for(uint8_t i = 0;i<16;++i)        {
                            handle->value[i] = m_keyBuffer[i];
                        }
                    }
                    return true;
                }



                ControllerConfigPubSubType::ControllerConfigPubSubType()
                {
                    setName("ib::sim::lin::idl::ControllerConfig");
                    m_typeSize = static_cast<uint32_t>(ControllerConfig::getMaxCdrSerializedSize()) + 4 /*encapsulation*/;
                    m_isGetKeyDefined = ControllerConfig::isKeyDefined();
                    size_t keyLength = ControllerConfig::getKeyMaxCdrSerializedSize()>16 ? ControllerConfig::getKeyMaxCdrSerializedSize() : 16;
                    m_keyBuffer = reinterpret_cast<unsigned char*>(malloc(keyLength));
                    memset(m_keyBuffer, 0, keyLength);
                }

                ControllerConfigPubSubType::~ControllerConfigPubSubType()
                {
                    if(m_keyBuffer!=nullptr)
                        free(m_keyBuffer);
                }

                bool ControllerConfigPubSubType::serialize(void *data, SerializedPayload_t *payload)
                {
                    ControllerConfig *p_type = static_cast<ControllerConfig*>(data);
                    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->max_size); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
                    payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
                    // Serialize encapsulation
                    ser.serialize_encapsulation();

                    try
                    {
                        p_type->serialize(ser); // Serialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    payload->length = static_cast<uint32_t>(ser.getSerializedDataLength()); //Get the serialized length
                    return true;
                }

                bool ControllerConfigPubSubType::deserialize(SerializedPayload_t* payload, void* data)
                {
                    ControllerConfig* p_type = static_cast<ControllerConfig*>(data); //Convert DATA to pointer of your type
                    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->length); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
                    // Deserialize encapsulation.
                    deser.read_encapsulation();
                    payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

                    try
                    {
                        p_type->deserialize(deser); //Deserialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    return true;
                }

                std::function<uint32_t()> ControllerConfigPubSubType::getSerializedSizeProvider(void* data)
                {
                    return [data]() -> uint32_t
                    {
                        return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<ControllerConfig*>(data))) + 4 /*encapsulation*/;
                    };
                }

                void* ControllerConfigPubSubType::createData()
                {
                    return reinterpret_cast<void*>(new ControllerConfig());
                }

                void ControllerConfigPubSubType::deleteData(void* data)
                {
                    delete(reinterpret_cast<ControllerConfig*>(data));
                }

                bool ControllerConfigPubSubType::getKey(void *data, InstanceHandle_t* handle, bool force_md5)
                {
                    if(!m_isGetKeyDefined)
                        return false;
                    ControllerConfig* p_type = static_cast<ControllerConfig*>(data);
                    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(m_keyBuffer),ControllerConfig::getKeyMaxCdrSerializedSize());     // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS);     // Object that serializes the data.
                    p_type->serializeKey(ser);
                    if(force_md5 || ControllerConfig::getKeyMaxCdrSerializedSize()>16)    {
                        m_md5.init();
                        m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));
                        m_md5.finalize();
                        for(uint8_t i = 0;i<16;++i)        {
                            handle->value[i] = m_md5.digest[i];
                        }
                    }
                    else    {
                        for(uint8_t i = 0;i<16;++i)        {
                            handle->value[i] = m_keyBuffer[i];
                        }
                    }
                    return true;
                }


                TransmissionPubSubType::TransmissionPubSubType()
                {
                    setName("ib::sim::lin::idl::Transmission");
                    m_typeSize = static_cast<uint32_t>(Transmission::getMaxCdrSerializedSize()) + 4 /*encapsulation*/;
                    m_isGetKeyDefined = Transmission::isKeyDefined();
                    size_t keyLength = Transmission::getKeyMaxCdrSerializedSize()>16 ? Transmission::getKeyMaxCdrSerializedSize() : 16;
                    m_keyBuffer = reinterpret_cast<unsigned char*>(malloc(keyLength));
                    memset(m_keyBuffer, 0, keyLength);
                }

                TransmissionPubSubType::~TransmissionPubSubType()
                {
                    if(m_keyBuffer!=nullptr)
                        free(m_keyBuffer);
                }

                bool TransmissionPubSubType::serialize(void *data, SerializedPayload_t *payload)
                {
                    Transmission *p_type = static_cast<Transmission*>(data);
                    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->max_size); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
                    payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
                    // Serialize encapsulation
                    ser.serialize_encapsulation();

                    try
                    {
                        p_type->serialize(ser); // Serialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    payload->length = static_cast<uint32_t>(ser.getSerializedDataLength()); //Get the serialized length
                    return true;
                }

                bool TransmissionPubSubType::deserialize(SerializedPayload_t* payload, void* data)
                {
                    Transmission* p_type = static_cast<Transmission*>(data); //Convert DATA to pointer of your type
                    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->length); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
                    // Deserialize encapsulation.
                    deser.read_encapsulation();
                    payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

                    try
                    {
                        p_type->deserialize(deser); //Deserialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    return true;
                }

                std::function<uint32_t()> TransmissionPubSubType::getSerializedSizeProvider(void* data)
                {
                    return [data]() -> uint32_t
                    {
                        return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<Transmission*>(data))) + 4 /*encapsulation*/;
                    };
                }

                void* TransmissionPubSubType::createData()
                {
                    return reinterpret_cast<void*>(new Transmission());
                }

                void TransmissionPubSubType::deleteData(void* data)
                {
                    delete(reinterpret_cast<Transmission*>(data));
                }

                bool TransmissionPubSubType::getKey(void *data, InstanceHandle_t* handle, bool force_md5)
                {
                    if(!m_isGetKeyDefined)
                        return false;
                    Transmission* p_type = static_cast<Transmission*>(data);
                    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(m_keyBuffer),Transmission::getKeyMaxCdrSerializedSize());     // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS);     // Object that serializes the data.
                    p_type->serializeKey(ser);
                    if(force_md5 || Transmission::getKeyMaxCdrSerializedSize()>16)    {
                        m_md5.init();
                        m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));
                        m_md5.finalize();
                        for(uint8_t i = 0;i<16;++i)        {
                            handle->value[i] = m_md5.digest[i];
                        }
                    }
                    else    {
                        for(uint8_t i = 0;i<16;++i)        {
                            handle->value[i] = m_keyBuffer[i];
                        }
                    }
                    return true;
                }

                SendFrameRequestPubSubType::SendFrameRequestPubSubType()
                {
                    setName("ib::sim::lin::idl::SendFrameRequest");
                    m_typeSize = static_cast<uint32_t>(SendFrameRequest::getMaxCdrSerializedSize()) + 4 /*encapsulation*/;
                    m_isGetKeyDefined = SendFrameRequest::isKeyDefined();
                    size_t keyLength = SendFrameRequest::getKeyMaxCdrSerializedSize()>16 ? SendFrameRequest::getKeyMaxCdrSerializedSize() : 16;
                    m_keyBuffer = reinterpret_cast<unsigned char*>(malloc(keyLength));
                    memset(m_keyBuffer, 0, keyLength);
                }

                SendFrameRequestPubSubType::~SendFrameRequestPubSubType()
                {
                    if(m_keyBuffer!=nullptr)
                        free(m_keyBuffer);
                }

                bool SendFrameRequestPubSubType::serialize(void *data, SerializedPayload_t *payload)
                {
                    SendFrameRequest *p_type = static_cast<SendFrameRequest*>(data);
                    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->max_size); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
                    payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
                    // Serialize encapsulation
                    ser.serialize_encapsulation();

                    try
                    {
                        p_type->serialize(ser); // Serialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    payload->length = static_cast<uint32_t>(ser.getSerializedDataLength()); //Get the serialized length
                    return true;
                }

                bool SendFrameRequestPubSubType::deserialize(SerializedPayload_t* payload, void* data)
                {
                    SendFrameRequest* p_type = static_cast<SendFrameRequest*>(data); //Convert DATA to pointer of your type
                    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->length); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
                    // Deserialize encapsulation.
                    deser.read_encapsulation();
                    payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

                    try
                    {
                        p_type->deserialize(deser); //Deserialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    return true;
                }

                std::function<uint32_t()> SendFrameRequestPubSubType::getSerializedSizeProvider(void* data)
                {
                    return [data]() -> uint32_t
                    {
                        return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<SendFrameRequest*>(data))) + 4 /*encapsulation*/;
                    };
                }

                void* SendFrameRequestPubSubType::createData()
                {
                    return reinterpret_cast<void*>(new SendFrameRequest());
                }

                void SendFrameRequestPubSubType::deleteData(void* data)
                {
                    delete(reinterpret_cast<SendFrameRequest*>(data));
                }

                bool SendFrameRequestPubSubType::getKey(void *data, InstanceHandle_t* handle, bool force_md5)
                {
                    if(!m_isGetKeyDefined)
                        return false;
                    SendFrameRequest* p_type = static_cast<SendFrameRequest*>(data);
                    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(m_keyBuffer),SendFrameRequest::getKeyMaxCdrSerializedSize());     // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS);     // Object that serializes the data.
                    p_type->serializeKey(ser);
                    if(force_md5 || SendFrameRequest::getKeyMaxCdrSerializedSize()>16)    {
                        m_md5.init();
                        m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));
                        m_md5.finalize();
                        for(uint8_t i = 0;i<16;++i)        {
                            handle->value[i] = m_md5.digest[i];
                        }
                    }
                    else    {
                        for(uint8_t i = 0;i<16;++i)        {
                            handle->value[i] = m_keyBuffer[i];
                        }
                    }
                    return true;
                }

                SendFrameHeaderRequestPubSubType::SendFrameHeaderRequestPubSubType()
                {
                    setName("ib::sim::lin::idl::SendFrameHeaderRequest");
                    m_typeSize = static_cast<uint32_t>(SendFrameHeaderRequest::getMaxCdrSerializedSize()) + 4 /*encapsulation*/;
                    m_isGetKeyDefined = SendFrameHeaderRequest::isKeyDefined();
                    size_t keyLength = SendFrameHeaderRequest::getKeyMaxCdrSerializedSize()>16 ? SendFrameHeaderRequest::getKeyMaxCdrSerializedSize() : 16;
                    m_keyBuffer = reinterpret_cast<unsigned char*>(malloc(keyLength));
                    memset(m_keyBuffer, 0, keyLength);
                }

                SendFrameHeaderRequestPubSubType::~SendFrameHeaderRequestPubSubType()
                {
                    if(m_keyBuffer!=nullptr)
                        free(m_keyBuffer);
                }

                bool SendFrameHeaderRequestPubSubType::serialize(void *data, SerializedPayload_t *payload)
                {
                    SendFrameHeaderRequest *p_type = static_cast<SendFrameHeaderRequest*>(data);
                    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->max_size); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
                    payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
                    // Serialize encapsulation
                    ser.serialize_encapsulation();

                    try
                    {
                        p_type->serialize(ser); // Serialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    payload->length = static_cast<uint32_t>(ser.getSerializedDataLength()); //Get the serialized length
                    return true;
                }

                bool SendFrameHeaderRequestPubSubType::deserialize(SerializedPayload_t* payload, void* data)
                {
                    SendFrameHeaderRequest* p_type = static_cast<SendFrameHeaderRequest*>(data); //Convert DATA to pointer of your type
                    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->length); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
                    // Deserialize encapsulation.
                    deser.read_encapsulation();
                    payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

                    try
                    {
                        p_type->deserialize(deser); //Deserialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    return true;
                }

                std::function<uint32_t()> SendFrameHeaderRequestPubSubType::getSerializedSizeProvider(void* data)
                {
                    return [data]() -> uint32_t
                    {
                        return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<SendFrameHeaderRequest*>(data))) + 4 /*encapsulation*/;
                    };
                }

                void* SendFrameHeaderRequestPubSubType::createData()
                {
                    return reinterpret_cast<void*>(new SendFrameHeaderRequest());
                }

                void SendFrameHeaderRequestPubSubType::deleteData(void* data)
                {
                    delete(reinterpret_cast<SendFrameHeaderRequest*>(data));
                }

                bool SendFrameHeaderRequestPubSubType::getKey(void *data, InstanceHandle_t* handle, bool force_md5)
                {
                    if(!m_isGetKeyDefined)
                        return false;
                    SendFrameHeaderRequest* p_type = static_cast<SendFrameHeaderRequest*>(data);
                    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(m_keyBuffer),SendFrameHeaderRequest::getKeyMaxCdrSerializedSize());     // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS);     // Object that serializes the data.
                    p_type->serializeKey(ser);
                    if(force_md5 || SendFrameHeaderRequest::getKeyMaxCdrSerializedSize()>16)    {
                        m_md5.init();
                        m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));
                        m_md5.finalize();
                        for(uint8_t i = 0;i<16;++i)        {
                            handle->value[i] = m_md5.digest[i];
                        }
                    }
                    else    {
                        for(uint8_t i = 0;i<16;++i)        {
                            handle->value[i] = m_keyBuffer[i];
                        }
                    }
                    return true;
                }

                FrameResponseUpdatePubSubType::FrameResponseUpdatePubSubType()
                {
                    setName("ib::sim::lin::idl::FrameResponseUpdate");
                    m_typeSize = static_cast<uint32_t>(FrameResponseUpdate::getMaxCdrSerializedSize()) + 4 /*encapsulation*/;
                    m_isGetKeyDefined = FrameResponseUpdate::isKeyDefined();
                    size_t keyLength = FrameResponseUpdate::getKeyMaxCdrSerializedSize()>16 ? FrameResponseUpdate::getKeyMaxCdrSerializedSize() : 16;
                    m_keyBuffer = reinterpret_cast<unsigned char*>(malloc(keyLength));
                    memset(m_keyBuffer, 0, keyLength);
                }

                FrameResponseUpdatePubSubType::~FrameResponseUpdatePubSubType()
                {
                    if(m_keyBuffer!=nullptr)
                        free(m_keyBuffer);
                }

                bool FrameResponseUpdatePubSubType::serialize(void *data, SerializedPayload_t *payload)
                {
                    FrameResponseUpdate *p_type = static_cast<FrameResponseUpdate*>(data);
                    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->max_size); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
                    payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
                    // Serialize encapsulation
                    ser.serialize_encapsulation();

                    try
                    {
                        p_type->serialize(ser); // Serialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    payload->length = static_cast<uint32_t>(ser.getSerializedDataLength()); //Get the serialized length
                    return true;
                }

                bool FrameResponseUpdatePubSubType::deserialize(SerializedPayload_t* payload, void* data)
                {
                    FrameResponseUpdate* p_type = static_cast<FrameResponseUpdate*>(data); //Convert DATA to pointer of your type
                    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->length); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
                    // Deserialize encapsulation.
                    deser.read_encapsulation();
                    payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

                    try
                    {
                        p_type->deserialize(deser); //Deserialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    return true;
                }

                std::function<uint32_t()> FrameResponseUpdatePubSubType::getSerializedSizeProvider(void* data)
                {
                    return [data]() -> uint32_t
                    {
                        return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<FrameResponseUpdate*>(data))) + 4 /*encapsulation*/;
                    };
                }

                void* FrameResponseUpdatePubSubType::createData()
                {
                    return reinterpret_cast<void*>(new FrameResponseUpdate());
                }

                void FrameResponseUpdatePubSubType::deleteData(void* data)
                {
                    delete(reinterpret_cast<FrameResponseUpdate*>(data));
                }

                bool FrameResponseUpdatePubSubType::getKey(void *data, InstanceHandle_t* handle, bool force_md5)
                {
                    if(!m_isGetKeyDefined)
                        return false;
                    FrameResponseUpdate* p_type = static_cast<FrameResponseUpdate*>(data);
                    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(m_keyBuffer),FrameResponseUpdate::getKeyMaxCdrSerializedSize());     // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS);     // Object that serializes the data.
                    p_type->serializeKey(ser);
                    if(force_md5 || FrameResponseUpdate::getKeyMaxCdrSerializedSize()>16)    {
                        m_md5.init();
                        m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));
                        m_md5.finalize();
                        for(uint8_t i = 0;i<16;++i)        {
                            handle->value[i] = m_md5.digest[i];
                        }
                    }
                    else    {
                        for(uint8_t i = 0;i<16;++i)        {
                            handle->value[i] = m_keyBuffer[i];
                        }
                    }
                    return true;
                }

                ControllerStatusUpdatePubSubType::ControllerStatusUpdatePubSubType()
                {
                    setName("ib::sim::lin::idl::ControllerStatusUpdate");
                    m_typeSize = static_cast<uint32_t>(ControllerStatusUpdate::getMaxCdrSerializedSize()) + 4 /*encapsulation*/;
                    m_isGetKeyDefined = ControllerStatusUpdate::isKeyDefined();
                    size_t keyLength = ControllerStatusUpdate::getKeyMaxCdrSerializedSize()>16 ? ControllerStatusUpdate::getKeyMaxCdrSerializedSize() : 16;
                    m_keyBuffer = reinterpret_cast<unsigned char*>(malloc(keyLength));
                    memset(m_keyBuffer, 0, keyLength);
                }

                ControllerStatusUpdatePubSubType::~ControllerStatusUpdatePubSubType()
                {
                    if(m_keyBuffer!=nullptr)
                        free(m_keyBuffer);
                }

                bool ControllerStatusUpdatePubSubType::serialize(void *data, SerializedPayload_t *payload)
                {
                    ControllerStatusUpdate *p_type = static_cast<ControllerStatusUpdate*>(data);
                    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->max_size); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
                    payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
                    // Serialize encapsulation
                    ser.serialize_encapsulation();

                    try
                    {
                        p_type->serialize(ser); // Serialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    payload->length = static_cast<uint32_t>(ser.getSerializedDataLength()); //Get the serialized length
                    return true;
                }

                bool ControllerStatusUpdatePubSubType::deserialize(SerializedPayload_t* payload, void* data)
                {
                    ControllerStatusUpdate* p_type = static_cast<ControllerStatusUpdate*>(data); //Convert DATA to pointer of your type
                    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->length); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
                    // Deserialize encapsulation.
                    deser.read_encapsulation();
                    payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

                    try
                    {
                        p_type->deserialize(deser); //Deserialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    return true;
                }

                std::function<uint32_t()> ControllerStatusUpdatePubSubType::getSerializedSizeProvider(void* data)
                {
                    return [data]() -> uint32_t
                    {
                        return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<ControllerStatusUpdate*>(data))) + 4 /*encapsulation*/;
                    };
                }

                void* ControllerStatusUpdatePubSubType::createData()
                {
                    return reinterpret_cast<void*>(new ControllerStatusUpdate());
                }

                void ControllerStatusUpdatePubSubType::deleteData(void* data)
                {
                    delete(reinterpret_cast<ControllerStatusUpdate*>(data));
                }

                bool ControllerStatusUpdatePubSubType::getKey(void *data, InstanceHandle_t* handle, bool force_md5)
                {
                    if(!m_isGetKeyDefined)
                        return false;
                    ControllerStatusUpdate* p_type = static_cast<ControllerStatusUpdate*>(data);
                    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(m_keyBuffer),ControllerStatusUpdate::getKeyMaxCdrSerializedSize());     // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS);     // Object that serializes the data.
                    p_type->serializeKey(ser);
                    if(force_md5 || ControllerStatusUpdate::getKeyMaxCdrSerializedSize()>16)    {
                        m_md5.init();
                        m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));
                        m_md5.finalize();
                        for(uint8_t i = 0;i<16;++i)        {
                            handle->value[i] = m_md5.digest[i];
                        }
                    }
                    else    {
                        for(uint8_t i = 0;i<16;++i)        {
                            handle->value[i] = m_keyBuffer[i];
                        }
                    }
                    return true;
                }

                WakeupPulsePubSubType::WakeupPulsePubSubType()
                {
                    setName("ib::sim::lin::idl::WakeupPulse");
                    m_typeSize = static_cast<uint32_t>(WakeupPulse::getMaxCdrSerializedSize()) + 4 /*encapsulation*/;
                    m_isGetKeyDefined = WakeupPulse::isKeyDefined();
                    size_t keyLength = WakeupPulse::getKeyMaxCdrSerializedSize()>16 ? WakeupPulse::getKeyMaxCdrSerializedSize() : 16;
                    m_keyBuffer = reinterpret_cast<unsigned char*>(malloc(keyLength));
                    memset(m_keyBuffer, 0, keyLength);
                }

                WakeupPulsePubSubType::~WakeupPulsePubSubType()
                {
                    if(m_keyBuffer!=nullptr)
                        free(m_keyBuffer);
                }

                bool WakeupPulsePubSubType::serialize(void *data, SerializedPayload_t *payload)
                {
                    WakeupPulse *p_type = static_cast<WakeupPulse*>(data);
                    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->max_size); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that serializes the data.
                    payload->encapsulation = ser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;
                    // Serialize encapsulation
                    ser.serialize_encapsulation();

                    try
                    {
                        p_type->serialize(ser); // Serialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    payload->length = static_cast<uint32_t>(ser.getSerializedDataLength()); //Get the serialized length
                    return true;
                }

                bool WakeupPulsePubSubType::deserialize(SerializedPayload_t* payload, void* data)
                {
                    WakeupPulse* p_type = static_cast<WakeupPulse*>(data); //Convert DATA to pointer of your type
                    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(payload->data), payload->length); // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr deser(fastbuffer, eprosima::fastcdr::Cdr::DEFAULT_ENDIAN,
                            eprosima::fastcdr::Cdr::DDS_CDR); // Object that deserializes the data.
                    // Deserialize encapsulation.
                    deser.read_encapsulation();
                    payload->encapsulation = deser.endianness() == eprosima::fastcdr::Cdr::BIG_ENDIANNESS ? CDR_BE : CDR_LE;

                    try
                    {
                        p_type->deserialize(deser); //Deserialize the object:
                    }
                    catch(eprosima::fastcdr::exception::NotEnoughMemoryException& /*exception*/)
                    {
                        return false;
                    }

                    return true;
                }

                std::function<uint32_t()> WakeupPulsePubSubType::getSerializedSizeProvider(void* data)
                {
                    return [data]() -> uint32_t
                    {
                        return static_cast<uint32_t>(type::getCdrSerializedSize(*static_cast<WakeupPulse*>(data))) + 4 /*encapsulation*/;
                    };
                }

                void* WakeupPulsePubSubType::createData()
                {
                    return reinterpret_cast<void*>(new WakeupPulse());
                }

                void WakeupPulsePubSubType::deleteData(void* data)
                {
                    delete(reinterpret_cast<WakeupPulse*>(data));
                }

                bool WakeupPulsePubSubType::getKey(void *data, InstanceHandle_t* handle, bool force_md5)
                {
                    if(!m_isGetKeyDefined)
                        return false;
                    WakeupPulse* p_type = static_cast<WakeupPulse*>(data);
                    eprosima::fastcdr::FastBuffer fastbuffer(reinterpret_cast<char*>(m_keyBuffer),WakeupPulse::getKeyMaxCdrSerializedSize());     // Object that manages the raw buffer.
                    eprosima::fastcdr::Cdr ser(fastbuffer, eprosima::fastcdr::Cdr::BIG_ENDIANNESS);     // Object that serializes the data.
                    p_type->serializeKey(ser);
                    if(force_md5 || WakeupPulse::getKeyMaxCdrSerializedSize()>16)    {
                        m_md5.init();
                        m_md5.update(m_keyBuffer, static_cast<unsigned int>(ser.getSerializedDataLength()));
                        m_md5.finalize();
                        for(uint8_t i = 0;i<16;++i)        {
                            handle->value[i] = m_md5.digest[i];
                        }
                    }
                    else    {
                        for(uint8_t i = 0;i<16;++i)        {
                            handle->value[i] = m_keyBuffer[i];
                        }
                    }
                    return true;
                }


            } //End of namespace idl

        } //End of namespace lin

    } //End of namespace sim

} //End of namespace ib
